<?xml version="1.0" encoding="UTF-8"?><virtualedges><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.String getPackageName()"></source><targets><direct subsignature="void onTitleChanged(java.lang.CharSequence,int)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.graphics.drawable.Drawable getDrawable(int)"></source><targets><direct subsignature="void onActivityResult(int,int,android.content.Intent)" index="-1" target-position="base"></direct><direct subsignature="void finish()" index="-1" target-position="base"></direct><direct subsignature="void onNewIntent(android.content.Intent)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean isEnabled(int)"></source><targets><direct subsignature="java.lang.Object getItem(int)" index="-1" target-position="base"></direct><direct subsignature="int getItemViewType(int)" index="-1" target-position="base"></direct><direct subsignature="android.view.View getView(int,android.view.View,android.view.ViewGroup)" index="-1" target-position="base"></direct><direct subsignature="long getItemId(int)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.os.IBinder getBinder()"></source><targets><direct subsignature="boolean onStartJob(android.app.job.JobParameters)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void onBoundsChange(android.graphics.Rect)"></source><targets><direct subsignature="void draw(android.graphics.Canvas)" index="-1" target-position="base"></direct><direct subsignature="void getOutline(android.graphics.Outline)" index="-1" target-position="base"></direct><direct subsignature="void invalidateSelf()" index="-1" target-position="base"></direct><direct subsignature="boolean getPadding(android.graphics.Rect)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean post(java.lang.Runnable)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void invalidateSelf()"></source><targets><direct subsignature="void getOutline(android.graphics.Outline)" index="-1" target-position="base"></direct><direct subsignature="void onBoundsChange(android.graphics.Rect)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.graphics.drawable.Drawable getDrawable()"></source><targets><direct subsignature="boolean hasOverlappingRendering()" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean postDelayed(java.lang.Runnable,long)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void run()"></source><targets><direct subsignature="void done()" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int[] getState()"></source><targets><direct subsignature="void invalidateSelf()" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void onTextChanged(java.lang.CharSequence,int,int,int)"></source><targets><direct subsignature="void setTypeface(android.graphics.Typeface,int)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean isStateful()"></source><targets><direct subsignature="boolean onStateChange(int[])" index="-1" target-position="base"></direct><direct subsignature="void setColorFilter(android.graphics.ColorFilter)" index="-1" target-position="base"></direct><direct subsignature="void getOutline(android.graphics.Outline)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean sendMessage(android.os.Message)"></source><targets><direct subsignature="void handleMessage(android.os.Message)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)"></source><targets><direct subsignature="android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.Context getApplicationContext()"></source><targets><direct subsignature="android.view.View findViewById(int)" index="-1" target-position="base"></direct><direct subsignature="void onActivityResult(int,int,android.content.Intent)" index="-1" target-position="base"></direct><direct subsignature="void finish()" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)"></source><targets><direct subsignature="java.lang.Object[] newArray(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean getPadding(android.graphics.Rect)"></source><targets><direct subsignature="void setColorFilter(android.graphics.ColorFilter)" index="-1" target-position="base"></direct><direct subsignature="void getOutline(android.graphics.Outline)" index="-1" target-position="base"></direct><direct subsignature="void onBoundsChange(android.graphics.Rect)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void attachInterface(android.os.IInterface,java.lang.String)"></source><targets><direct subsignature="boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)"></source><targets><direct subsignature="void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)" index="-1" target-position="base"></direct><direct subsignature="void setTypeface(android.graphics.Typeface,int)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void startActivityForResult(android.content.Intent,int)"></source><targets><direct subsignature="void startActivityForResult(android.content.Intent,int,android.os.Bundle)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)"></source><targets><direct subsignature="android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void onMeasure(int,int)"></source><targets><direct subsignature="void setTextSize(int,float)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.graphics.Rect getBounds()"></source><targets><direct subsignature="void setColorFilter(android.graphics.ColorFilter)" index="-1" target-position="base"></direct><direct subsignature="void draw(android.graphics.Canvas)" index="-1" target-position="base"></direct><direct subsignature="void getOutline(android.graphics.Outline)" index="-1" target-position="base"></direct><direct subsignature="void invalidateSelf()" index="-1" target-position="base"></direct><direct subsignature="boolean getPadding(android.graphics.Rect)" index="-1" target-position="base"></direct><direct subsignature="void onBoundsChange(android.graphics.Rect)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.Object get()"></source><targets><direct subsignature="boolean cancel(boolean)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object put(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean containsKey(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean addAll(java.util.Collection)" index="0" target-position="argument"></direct><direct subsignature="boolean isEnabled(int)" index="0" target-position="argument"></direct><direct subsignature="java.util.Collection values()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object remove(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int getCount()" index="0" target-position="argument"></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct><direct subsignature="void attachBaseContext(android.content.Context)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="android.view.View getView(int,android.view.View,android.view.ViewGroup)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray()" index="0" target-position="argument"></direct><direct subsignature="java.util.Set keySet()" index="0" target-position="argument"></direct><direct subsignature="java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object getItem(int)" index="0" target-position="argument"></direct><direct subsignature="java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="void execute(java.lang.Runnable)" index="0" target-position="argument"></direct><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="int getItemViewType(int)" index="0" target-position="argument"></direct><direct subsignature="boolean equals(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.List subList(int,int)" index="0" target-position="argument"></direct><direct subsignature="void run()" index="0" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray(java.lang.Object[])" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="long getItemId(int)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object initialValue()" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void drawableStateChanged()"></source><targets><direct subsignature="void setTextSize(int,float)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.res.Resources$Theme getTheme()"></source><targets><direct subsignature="android.view.View findViewById(int)" index="-1" target-position="base"></direct><direct subsignature="void finish()" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])"></source><targets><direct subsignature="java.lang.Object doInBackground(java.lang.Object[])" index="-1" target-position="base"></direct><direct subsignature="void onPostExecute(java.lang.Object)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)"></source><targets><direct subsignature="android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.ContentResolver getContentResolver()"></source><targets><direct subsignature="android.view.View findViewById(int)" index="-1" target-position="base"></direct><direct subsignature="android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.Context createConfigurationContext(android.content.res.Configuration)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="-1" target-position="base"></direct><direct subsignature="android.content.res.Resources getResources()" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeStrongBinder(android.os.IBinder)"></source><targets><direct subsignature="boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.pm.PackageManager getPackageManager()"></source><targets><direct subsignature="void onStateNotSaved()" index="-1" target-position="base"></direct><direct subsignature="void startActivityForResult(android.content.Intent,int,android.os.Bundle)" index="-1" target-position="base"></direct><direct subsignature="void startActivityForResult(android.content.Intent,int)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.Context getBaseContext()"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="-1" target-position="base"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.os.Looper getLooper()"></source><targets><direct subsignature="void dispatchMessage(android.os.Message)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void removeMessages(int,java.lang.Object)"></source><targets><direct subsignature="void dispatchMessage(android.os.Message)" index="-1" target-position="base"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean sendMessageDelayed(android.os.Message,long)"></source><targets><direct subsignature="void dispatchMessage(android.os.Message)" index="-1" target-position="base"></direct></targets></edge></virtualedges>