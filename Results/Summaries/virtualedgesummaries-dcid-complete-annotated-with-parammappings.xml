<?xml version="1.0" encoding="UTF-8"?><virtualedges><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void closeDrawer(android.view.View)"></source><targets><indirect subsignature="void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener)" index="-1" target-position="base"><direct subsignature="void onDrawerClosed(android.view.View)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,int,int,int,int)"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setHint(java.lang.CharSequence)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.StringBuilder insert(int,java.lang.CharSequence,int,int)"></source><targets><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)"></source><targets><direct subsignature="java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="short readShort()"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setRedirectHandler(org.apache.http.client.RedirectHandler)"></source><targets><direct subsignature="boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.view.animation.Interpolator,float,float)"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.List checkedList(java.util.List,java.lang.Class)&gt;"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="int hashCode()" index="0" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object remove(int)" index="0" target-position="argument"></direct><direct subsignature="java.util.ListIterator listIterator(int)" index="0" target-position="argument"></direct><direct subsignature="void add(int,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object set(int,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean removeAll(java.util.Collection)" index="0" target-position="argument"></direct><direct subsignature="java.util.List subList(int,int)" index="0" target-position="argument"></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int indexOf(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean remove(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean contains(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray(java.lang.Object[])" index="0" target-position="argument"></direct><direct subsignature="boolean containsAll(java.util.Collection)" index="0" target-position="argument"></direct><direct subsignature="int lastIndexOf(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean retainAll(java.util.Collection)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.Reader,int)"></source><targets><direct subsignature="int read(char[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean addGpsStatusListener(android.location.GpsStatus$Listener)"></source><targets><direct subsignature="void onGpsStatusChanged(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean,android.text.TextUtils$TruncateAt,int)"></source><targets><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean setDynamicShortcuts(java.util.List)"></source><targets><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.lang.Object max(java.util.Collection)&gt;"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.String matchCategories(java.util.Set)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)&gt;"></source><targets><direct subsignature="java.lang.Object lastKey()" index="0" target-position="argument"></direct><direct subsignature="java.util.SortedMap subMap(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.SortedMap headMap(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object firstKey()" index="0" target-position="argument"></direct><direct subsignature="java.util.Comparator comparator()" index="0" target-position="argument"></direct><direct subsignature="java.util.SortedMap tailMap(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)"></source><targets><direct subsignature="boolean onPreferenceClick(android.preference.Preference)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setCallback(android.view.Window$Callback)"></source><targets><direct subsignature="boolean onCreatePanelMenu(int,android.view.Menu)" index="0" target-position="argument"></direct><direct subsignature="boolean dispatchKeyEvent(android.view.KeyEvent)" index="0" target-position="argument"></direct><direct subsignature="void onWindowFocusChanged(boolean)" index="0" target-position="argument"></direct><direct subsignature="boolean dispatchTouchEvent(android.view.MotionEvent)" index="0" target-position="argument"></direct><direct subsignature="boolean onPreparePanel(int,android.view.View,android.view.Menu)" index="0" target-position="argument"></direct><direct subsignature="boolean onMenuOpened(int,android.view.Menu)" index="0" target-position="argument"></direct><direct subsignature="void onDetachedFromWindow()" index="0" target-position="argument"></direct><direct subsignature="void onAttachedToWindow()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="float measureText(java.lang.CharSequence,int,int)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean onMenuItemSelected(int,android.view.MenuItem)"></source><targets><direct subsignature="java.lang.CharSequence getTitleCondensed()" index="1" target-position="argument"></direct><direct subsignature="int getItemId()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAdapter(android.widget.ListAdapter)"></source><targets><direct subsignature="void notifyDataSetInvalidated()" index="0" target-position="argument"></direct><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="void setViewText(android.widget.TextView,java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="boolean isEnabled(int)" index="0" target-position="argument"></direct><direct subsignature="int getViewTypeCount()" index="0" target-position="argument"></direct><direct subsignature="void unregisterDataSetObserver(android.database.DataSetObserver)" index="0" target-position="argument"></direct><direct subsignature="android.view.View getView(int,android.view.View,android.view.ViewGroup)" index="0" target-position="argument"></direct><direct subsignature="void changeCursor(android.database.Cursor)" index="0" target-position="argument"></direct><direct subsignature="int getItemViewType(int)" index="0" target-position="argument"></direct><direct subsignature="void registerDataSetObserver(android.database.DataSetObserver)" index="0" target-position="argument"></direct><direct subsignature="void bindView(android.view.View,android.content.Context,android.database.Cursor)" index="0" target-position="argument"></direct><direct subsignature="void setViewImage(android.widget.ImageView,java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="void notifyDataSetChanged()" index="0" target-position="argument"></direct><direct subsignature="long getItemId(int)" index="0" target-position="argument"></direct><direct subsignature="android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)" index="0" target-position="argument"></direct><direct subsignature="boolean hasStableIds()" index="0" target-position="argument"></direct><direct subsignature="boolean areAllItemsEnabled()" index="0" target-position="argument"></direct><direct subsignature="int getCount()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object getItem(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setDisplay(android.view.SurfaceHolder)"></source><targets><direct subsignature="void setFixedSize(int,int)" index="0" target-position="argument"></direct><direct subsignature="android.view.Surface getSurface()" index="0" target-position="argument"></direct><direct subsignature="void setKeepScreenOn(boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="2" target-position="argument"></direct><direct subsignature="int length()" index="2" target-position="argument"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.Intent setClassName(android.content.Context,java.lang.String)"></source><targets><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAdapter(androidx.recyclerview.widget.bd)"></source><targets><direct subsignature="androidx.recyclerview.widget.ci onCreateViewHolder(android.view.ViewGroup,int)" index="0" target-position="argument"></direct><direct subsignature="void onBindViewHolder(androidx.recyclerview.widget.ci,int)" index="0" target-position="argument"></direct><direct subsignature="int getItemCount()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.support.v7.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)"></source><targets><direct subsignature="void onClick(android.content.DialogInterface,int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean bindCustomTabsService(android.content.Context,java.lang.String,androidx.browser.customtabs.CustomTabsServiceConnection)"></source><targets><direct subsignature="void onCustomTabsServiceConnected(android.content.ComponentName,androidx.browser.customtabs.CustomTabsClient)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)&gt;"></source><targets><direct subsignature="void run()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,int,java.lang.CharSequence,int,int)"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)&gt;"></source><targets><direct subsignature="int getColumnIndexOrThrow(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="java.lang.String getString(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)"></source><targets><direct subsignature="boolean onInfo(android.media.MediaPlayer,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAnimationListener(android.view.animation.Animation$AnimationListener)"></source><targets><direct subsignature="void onAnimationStart(android.view.animation.Animation)" index="0" target-position="argument"></direct><direct subsignature="void onAnimationEnd(android.view.animation.Animation)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setTextKeepState(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.AlteredCharSequence: android.text.AlteredCharSequence make(java.lang.CharSequence,char[],int,int)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct><direct subsignature="char charAt(int)" index="0" target-position="argument"></direct><direct subsignature="java.lang.CharSequence subSequence(int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAdListener(com.google.android.gms.ads.AdListener)"></source><targets><direct subsignature="void onAdFailedToLoad(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="1" target-position="argument"></direct><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.View getView(int,android.view.View,android.view.ViewGroup)"></source><targets><direct subsignature="void onSizeChanged(int,int,int,int)" index="2" target-position="argument"></direct><direct subsignature="void onWindowFocusChanged(boolean)" index="2" target-position="argument"></direct><direct subsignature="boolean onKeyDown(int,android.view.KeyEvent)" index="2" target-position="argument"></direct><direct subsignature="boolean onInterceptTouchEvent(android.view.MotionEvent)" index="2" target-position="argument"></direct><direct subsignature="void layoutChildren()" index="2" target-position="argument"></direct><direct subsignature="boolean onKeyUp(int,android.view.KeyEvent)" index="2" target-position="argument"></direct><direct subsignature="void onFocusChanged(boolean,int,android.graphics.Rect)" index="2" target-position="argument"></direct><direct subsignature="boolean performItemClick(android.view.View,int,long)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="void dispatchDraw(android.graphics.Canvas)" index="2" target-position="argument"></direct><direct subsignature="void onLayout(boolean,int,int,int,int)" index="2" target-position="argument"></direct><direct subsignature="void requestLayout()" index="2" target-position="argument"></direct><direct subsignature="void onMeasure(int,int)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAdapter(androidx.viewpager.widget.PagerAdapter)"></source><targets><direct subsignature="int getCount()" index="0" target-position="argument"></direct><direct subsignature="androidx.fragment.app.Fragment getItem(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.String,org.xml.sax.Locator,java.lang.Exception)"></source><targets><direct subsignature="int getLineNumber()" index="1" target-position="argument"></direct><direct subsignature="java.lang.String getPublicId()" index="1" target-position="argument"></direct><direct subsignature="java.lang.String getSystemId()" index="1" target-position="argument"></direct><direct subsignature="int getColumnNumber()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int readUnsignedShort()"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="io.reactivex.Single compose(io.reactivex.SingleTransformer)"></source><targets><direct subsignature="io.reactivex.SingleSource apply(io.reactivex.Single)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.Set)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.StringBuffer insert(int,java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void dispatchTrackballEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession$EventCallback)"></source><targets><direct subsignature="void finishedEvent(int,boolean)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.Object invoke(java.util.concurrent.ForkJoinTask)"></source><targets><direct subsignature="boolean exec()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)"></source><targets><direct subsignature="void onDismiss()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAnimation(android.content.Context,int)"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)&gt;"></source><targets><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.Security: java.security.Provider[] getProviders(java.util.Map)&gt;"></source><targets><direct subsignature="java.util.Set keySet()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.os.IBinder peekService(android.content.Context,android.content.Intent)"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.opengl.GLU: void gluPerspective(javax.microedition.khronos.opengles.GL10,float,float,float,float)&gt;"></source><targets><direct subsignature="void glFrustumf(float,float,float,float,float,float)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.List sortedWith(java.lang.Iterable,java.util.Comparator)"></source><targets><direct subsignature="int compare(java.lang.Object,java.lang.Object)" index="1" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray(java.lang.Object[])" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.Set checkedSet(java.util.Set,java.lang.Class)&gt;"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="int hashCode()" index="0" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean removeAll(java.util.Collection)" index="0" target-position="argument"></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct><direct subsignature="boolean remove(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean contains(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray(java.lang.Object[])" index="0" target-position="argument"></direct><direct subsignature="boolean containsAll(java.util.Collection)" index="0" target-position="argument"></direct><direct subsignature="boolean retainAll(java.util.Collection)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,android.util.Property,android.animation.TypeEvaluator,java.lang.Object[])&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.LayoutInflater cloneInContext(android.content.Context)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.Set,java.security.cert.CertSelector)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.StringBuffer append(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="oauth.signpost.http.HttpRequest sign(java.lang.Object)"></source><targets><indirect subsignature="void setSigningStrategy(oauth.signpost.signature.SigningStrategy)" index="-1" target-position="base"><direct subsignature="java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)&gt;"></source><targets><direct subsignature="org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.io.PrintWriter append(java.lang.CharSequence,int,int)"></source><targets><direct subsignature="java.lang.CharSequence subSequence(int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener,android.os.Handler)"></source><targets><direct subsignature="void onFrameAvailable(android.graphics.SurfaceTexture)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnScrollListener(android.widget.NumberPicker$OnScrollListener)"></source><targets><direct subsignature="void onScrollStateChange(android.widget.NumberPicker,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)"></source><targets><direct subsignature="void onChildViewAdded(android.view.View,android.view.View)" index="0" target-position="argument"></direct><direct subsignature="void onChildViewRemoved(android.view.View,android.view.View)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setTextKeepState(java.lang.CharSequence,android.widget.TextView$BufferType)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.Iterable filter(java.lang.Iterable,com.google.common.base.Predicate)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="boolean remove(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean onMenuOpened(int,android.view.Menu)"></source><targets><direct subsignature="void close()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: int lastIndexOfSubList(java.util.List,java.util.List)&gt;"></source><targets><direct subsignature="int size()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnMapClickListener(com.google.android.gms.maps.GoogleMap$OnMapClickListener)"></source><targets><direct subsignature="void onMapClick(com.google.android.gms.maps.model.LatLng)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setListAdapter(android.widget.ListAdapter)"></source><targets><direct subsignature="void notifyDataSetInvalidated()" index="0" target-position="argument"></direct><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="void setViewText(android.widget.TextView,java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="boolean isEnabled(int)" index="0" target-position="argument"></direct><direct subsignature="int getViewTypeCount()" index="0" target-position="argument"></direct><direct subsignature="void unregisterDataSetObserver(android.database.DataSetObserver)" index="0" target-position="argument"></direct><direct subsignature="android.view.View getView(int,android.view.View,android.view.ViewGroup)" index="0" target-position="argument"></direct><direct subsignature="int getItemViewType(int)" index="0" target-position="argument"></direct><direct subsignature="void registerDataSetObserver(android.database.DataSetObserver)" index="0" target-position="argument"></direct><direct subsignature="void bindView(android.view.View,android.content.Context,android.database.Cursor)" index="0" target-position="argument"></direct><direct subsignature="void notifyDataSetChanged()" index="0" target-position="argument"></direct><direct subsignature="long getItemId(int)" index="0" target-position="argument"></direct><direct subsignature="android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)" index="0" target-position="argument"></direct><direct subsignature="void setViewBinder(android.widget.SimpleCursorAdapter$ViewBinder)" index="0" target-position="argument"></direct><direct subsignature="boolean hasStableIds()" index="0" target-position="argument"></direct><direct subsignature="boolean areAllItemsEnabled()" index="0" target-position="argument"></direct><direct subsignature="int getCount()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object getItem(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnDateChangeListener(android.widget.CalendarView$OnDateChangeListener)"></source><targets><direct subsignature="void onSelectedDayChange(android.widget.CalendarView,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeTypedList(java.util.List)"></source><targets><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)"></source><targets><direct subsignature="okhttp3.Response intercept(okhttp3.Interceptor$Chain)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.view.GestureDetector$OnGestureListener)"></source><targets><direct subsignature="boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)" index="0" target-position="argument"></direct><direct subsignature="boolean onDown(android.view.MotionEvent)" index="0" target-position="argument"></direct><direct subsignature="void onShowPress(android.view.MotionEvent)" index="0" target-position="argument"></direct><direct subsignature="boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void installIfNeededAsync(android.content.Context,com.google.android.gms.security.ProviderInstaller$ProviderInstallListener)"></source><targets><direct subsignature="void onProviderInstalled()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void onScroll(android.widget.AbsListView,int,int,int)"></source><targets><direct subsignature="boolean onTouchEvent(android.view.MotionEvent)" index="0" target-position="argument"></direct><direct subsignature="void computeScroll()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void autoFocus(android.hardware.Camera$AutoFocusCallback)"></source><targets><direct subsignature="void onAutoFocus(boolean,android.hardware.Camera)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void outline41(android.content.SharedPreferences,java.lang.String,java.lang.String)"></source><targets><direct subsignature="android.content.SharedPreferences$Editor edit()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)"></source><targets><direct subsignature="void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.view.Display)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="android.content.Context createDisplayContext(android.view.Display)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.google.common.collect.Sets$SetView union(java.util.Set,java.util.Set)"></source><targets><direct subsignature="int size()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.text.Editable append(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setPolicy(java.util.Set)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.Notification$InboxStyle setSummaryText(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)&gt;"></source><targets><direct subsignature="int compare(java.lang.Object,java.lang.Object)" index="3" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.graphics.drawable.Drawable,int,float,float)"></source><targets><direct subsignature="android.graphics.drawable.Drawable$ConstantState getConstantState()" index="0" target-position="argument"></direct><direct subsignature="boolean setState(int[])" index="0" target-position="argument"></direct><direct subsignature="void setBounds(android.graphics.Rect)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)"></source><targets><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)&gt;"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnChildClickListener(android.widget.ExpandableListView$OnChildClickListener)"></source><targets><direct subsignature="boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setFormatter(java.util.logging.Formatter)"></source><targets><direct subsignature="java.lang.String format(java.util.logging.LogRecord)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void logIn(com.parse.LogInCallback)"></source><targets><direct subsignature="void done(java.lang.Object,java.lang.Throwable)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.nio.channels.Channels: java.io.InputStream newInputStream(java.nio.channels.ReadableByteChannel)&gt;"></source><targets><direct subsignature="int read(java.nio.ByteBuffer)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.os.IBinder)"></source><targets><direct subsignature="android.os.IInterface queryLocalInterface(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.List distinct(java.lang.Iterable)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(com.launchdarkly.eventsource.d,java.net.URI)"></source><targets><direct subsignature="void onMessage(java.lang.String,com.launchdarkly.eventsource.g)" index="0" target-position="argument"></direct><direct subsignature="void onOpen()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean removeAll(java.util.Collection)"></source><targets><direct subsignature="boolean contains(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct><direct subsignature="int indexOf(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)"></source><targets><direct subsignature="void onAccountsUpdated(android.accounts.Account[])" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)&gt;"></source><targets><direct subsignature="java.util.SortedSet tailSet(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object last()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object first()" index="0" target-position="argument"></direct><direct subsignature="java.util.SortedSet subSet(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Comparator comparator()" index="0" target-position="argument"></direct><direct subsignature="java.util.SortedSet headSet(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: int binarySearch(java.util.List,java.lang.Object)&gt;"></source><targets><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setEGLContextFactory(android.opengl.GLSurfaceView$EGLContextFactory)"></source><targets><direct subsignature="javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)"></source><targets><direct subsignature="java.lang.Object getAttribute(java.lang.String)" index="1" target-position="argument"></direct><direct subsignature="java.lang.String getMethod()" index="0" target-position="argument"></direct><direct subsignature="java.net.URI getURI()" index="0" target-position="argument"></direct><direct subsignature="void setAttribute(java.lang.String,java.lang.Object)" index="1" target-position="argument"></direct><direct subsignature="org.apache.http.Header[] getAllHeaders()" index="0" target-position="argument"></direct><direct subsignature="org.apache.http.params.HttpParams getParams()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.String,org.xml.sax.Locator)"></source><targets><direct subsignature="int getLineNumber()" index="1" target-position="argument"></direct><direct subsignature="java.lang.String getPublicId()" index="1" target-position="argument"></direct><direct subsignature="java.lang.String getSystemId()" index="1" target-position="argument"></direct><direct subsignature="int getColumnNumber()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void print(java.lang.String)"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.Writer)" index="-1" target-position="base"><direct subsignature="void write(java.lang.String,int,int)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Writer,boolean)" index="-1" target-position="base"><direct subsignature="void write(java.lang.String,int,int)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="yve toBuilder()"></source><targets><indirect subsignature="java.lang.Object newMessageInfo(yvz,java.lang.String,java.lang.Object[])" index="-1" target-position="base"></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)&gt;"></source><targets><direct subsignature="int getIntParameter(java.lang.String,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setFactory(android.widget.ViewSwitcher$ViewFactory)"></source><targets><direct subsignature="android.view.View makeView()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void write(byte[])"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.OutputStream,javax.crypto.Cipher)" index="-1" target-position="base"><direct subsignature="void write(byte[])" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.OutputStream,javax.crypto.Cipher)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.OutputStream,java.util.zip.Deflater)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.List unmodifiableList(java.util.List)&gt;"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="boolean contains(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAnimation(android.view.animation.Animation)"></source><targets><direct subsignature="boolean getTransformation(long,android.view.animation.Transformation,float)" index="0" target-position="argument"></direct><direct subsignature="void reset()" index="0" target-position="argument"></direct><direct subsignature="void setStartTime(long)" index="0" target-position="argument"></direct><direct subsignature="void initialize(int,int,int,int)" index="0" target-position="argument"></direct><direct subsignature="boolean willChangeBounds()" index="0" target-position="argument"></direct><direct subsignature="boolean getFillAfter()" index="0" target-position="argument"></direct><direct subsignature="long getStartOffset()" index="0" target-position="argument"></direct><direct subsignature="boolean willChangeTransformationMatrix()" index="0" target-position="argument"></direct><direct subsignature="boolean isInitialized()" index="0" target-position="argument"></direct><direct subsignature="float resolveSize(int,float,int,int)" index="0" target-position="argument"></direct><direct subsignature="void applyTransformation(float,android.view.animation.Transformation)" index="0" target-position="argument"></direct><direct subsignature="float getScaleFactor()" index="0" target-position="argument"></direct><direct subsignature="void start()" index="0" target-position="argument"></direct><direct subsignature="boolean getTransformation(long,android.view.animation.Transformation)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(org.apache.http.protocol.HttpContext)"></source><targets><direct subsignature="java.lang.Object getAttribute(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnClickListener(android.view.View$OnClickListener)"></source><targets><direct subsignature="void doClick(android.view.View)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setListNavigationCallbacks(android.widget.SpinnerAdapter,com.actionbarsherlock.app.ActionBar$OnNavigationListener)"></source><targets><direct subsignature="boolean onNavigationItemSelected(int,long)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void connect()"></source><targets><indirect subsignature="void &lt;init&gt;(android.content.Context,android.media.MediaScannerConnection$MediaScannerConnectionClient)" index="-1" target-position="base"><direct subsignature="void onMediaScannerConnected()" index="1" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void registerInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener,android.os.Handler)"></source><targets><direct subsignature="void onInputDeviceAdded(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.support.v7.app.AlertDialog$Builder setOnDismissListener(android.content.DialogInterface$OnDismissListener)"></source><targets><direct subsignature="void onDismiss(android.content.DialogInterface)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)"></source><targets><direct subsignature="void onViewAttachedToWindow(android.view.View)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.io.File[] listFiles(java.io.FileFilter)"></source><targets><direct subsignature="boolean accept(java.io.File)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="io.reactivex.Observable doOnSubscribe(io.reactivex.functions.Consumer)"></source><targets><direct subsignature="void accept(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)"></source><targets><direct subsignature="org.apache.http.Header[] getAllHeaders()" index="1" target-position="argument"></direct><direct subsignature="org.apache.http.ProtocolVersion getProtocolVersion()" index="1" target-position="argument"></direct><direct subsignature="org.apache.http.RequestLine getRequestLine()" index="1" target-position="argument"></direct><direct subsignature="java.lang.Object handleResponse(org.apache.http.HttpResponse)" index="2" target-position="argument"></direct><direct subsignature="org.apache.http.params.HttpParams getParams()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnShowListener(android.content.DialogInterface$OnShowListener)"></source><targets><direct subsignature="void onShow(android.content.DialogInterface)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void playTogether(java.util.Collection)"></source><targets><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void parseSubTree(org.xmlpull.v1.XmlPullParser)"></source><targets><direct subsignature="java.lang.String getPositionDescription()" index="0" target-position="argument"></direct><direct subsignature="int getEventType()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setResultCallback(com.google.android.gms.common.api.ResultCallback)"></source><targets><direct subsignature="void onResult(com.google.android.gms.common.api.Result)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.StringBuilder insert(int,java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance(java.lang.String,java.lang.ClassLoader)&gt;"></source><targets><direct subsignature="java.lang.Class loadClass(java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.String[] list(java.io.FilenameFilter)"></source><targets><direct subsignature="boolean accept(java.io.File,java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.io.CharArrayWriter append(java.lang.CharSequence,int,int)"></source><targets><direct subsignature="java.lang.CharSequence subSequence(int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setMovementMethod(android.text.method.MovementMethod)"></source><targets><direct subsignature="void initialize(android.widget.TextView,android.text.Spannable)" index="0" target-position="argument"></direct><direct subsignature="boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)" index="0" target-position="argument"></direct><direct subsignature="boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)" index="0" target-position="argument"></direct><direct subsignature="boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)" index="0" target-position="argument"></direct><direct subsignature="boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)" index="0" target-position="argument"></direct><direct subsignature="boolean onKeyOther(android.widget.TextView,android.text.Spannable,android.view.KeyEvent)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)&gt;"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.text.Normalizer: boolean isNormalized(java.lang.CharSequence,java.text.Normalizer$Form)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.DownloadManager: java.lang.Long getMaxBytesOverMobile(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: void removeSelection(android.text.Spannable)&gt;"></source><targets><direct subsignature="void removeSpan(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean verify(java.lang.String,javax.net.ssl.SSLSession)"></source><targets><direct subsignature="java.security.cert.Certificate[] getPeerCertificates()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)&gt;"></source><targets><direct subsignature="int read()" index="0" target-position="argument"></direct><direct subsignature="void reset()" index="0" target-position="argument"></direct><direct subsignature="void mark(int)" index="0" target-position="argument"></direct><direct subsignature="boolean markSupported()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.Comparator reverseOrder(java.util.Comparator)&gt;"></source><targets><direct subsignature="int compare(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: boolean moveToRightEdge(android.text.Spannable,android.text.Layout)&gt;"></source><targets><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser)"></source><targets><direct subsignature="javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int read(char[])"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.Reader)" index="-1" target-position="base"><direct subsignature="int read(char[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Reader,int)" index="-1" target-position="base"><direct subsignature="int read(char[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Reader)" index="-1" target-position="base"><direct subsignature="boolean ready()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Reader,int)" index="-1" target-position="base"><direct subsignature="boolean ready()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="int available()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.lang.StringBuilder)&gt;"></source><targets><direct subsignature="int getPosition()" index="0" target-position="argument"></direct><direct subsignature="boolean moveToNext()" index="0" target-position="argument"></direct><direct subsignature="boolean moveToPosition(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.SortedSet checkedSortedSet(java.util.SortedSet,java.lang.Class)&gt;"></source><targets><direct subsignature="java.util.SortedSet tailSet(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object last()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object first()" index="0" target-position="argument"></direct><direct subsignature="java.util.SortedSet subSet(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Comparator comparator()" index="0" target-position="argument"></direct><direct subsignature="java.util.SortedSet headSet(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.gesture.GestureLibraries: android.gesture.GestureLibrary fromPrivateFile(android.content.Context,java.lang.String)&gt;"></source><targets><direct subsignature="java.io.File getFileStreamPath(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.net.URL,java.lang.String,java.net.URLStreamHandler)"></source><targets><direct subsignature="void parseURL(java.net.URL,java.lang.String,int,int)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="1" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean onPreparePanel(int,android.view.View,android.view.Menu)"></source><targets><direct subsignature="void setQwertyMode(boolean)" index="2" target-position="argument"></direct><direct subsignature="int size()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnMenuItemClickListener(android.support.v7.widget.Toolbar$OnMenuItemClickListener)"></source><targets><direct subsignature="boolean onMenuItemClick(android.view.MenuItem)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)"></source><targets><direct subsignature="void onSensorChanged(android.hardware.SensorEvent)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)&gt;"></source><targets><direct subsignature="java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)&gt;"></source><targets><direct subsignature="int getIntParameter(java.lang.String,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void registerDataSetObserver(android.database.DataSetObserver)"></source><targets><direct subsignature="void onChanged()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="long getOrCreateThreadId(android.content.Context,java.lang.String)"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.SortedSet synchronizedSortedSet(java.util.SortedSet)&gt;"></source><targets><direct subsignature="java.util.SortedSet tailSet(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object last()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object first()" index="0" target-position="argument"></direct><direct subsignature="java.util.SortedSet subSet(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Comparator comparator()" index="0" target-position="argument"></direct><direct subsignature="java.util.SortedSet headSet(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.Map synchronizedMap(java.util.Map)&gt;"></source><targets><direct subsignature="java.lang.Object put(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean containsKey(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void dump(android.util.Printer,java.lang.String)"></source><targets><direct subsignature="void println(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.SpannableStringBuilder: android.text.SpannableStringBuilder valueOf(java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setRenderer(android.opengl.GLSurfaceView$Renderer)"></source><targets><direct subsignature="void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int)" index="0" target-position="argument"></direct><direct subsignature="void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig)" index="0" target-position="argument"></direct><direct subsignature="void onDrawFrame(javax.microedition.khronos.opengles.GL10)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)&gt;"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.util.Xml: void parse(java.io.InputStream,android.util.Xml$Encoding,org.xml.sax.ContentHandler)&gt;"></source><targets><direct subsignature="void endDocument()" index="2" target-position="argument"></direct><direct subsignature="void characters(char[],int,int)" index="2" target-position="argument"></direct><direct subsignature="void startDocument()" index="2" target-position="argument"></direct><direct subsignature="void endElement(java.lang.String,java.lang.String,java.lang.String)" index="2" target-position="argument"></direct><direct subsignature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" index="2" target-position="argument"></direct><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="int read(byte[])" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)"></source><targets><direct subsignature="void run()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.database.Cursor,java.lang.String,boolean,android.os.Handler)"></source><targets><direct subsignature="int getColumnIndexOrThrow(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="boolean moveToNext()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String[] getColumnNames()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setExtendedKeyUsage(java.util.Set)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.Application newApplication(java.lang.ClassLoader,java.lang.String,android.content.Context)"></source><targets><direct subsignature="java.lang.String getPackageName()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void openDrawer(android.view.View)"></source><targets><indirect subsignature="void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener)" index="-1" target-position="base"><direct subsignature="void onDrawerOpened(android.view.View)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void putAll(java.util.Map)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object put(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Set entrySet()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object remove(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean containsKey(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int findTokenEnd(java.lang.CharSequence,int)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.view.ScaleGestureDetector$OnScaleGestureListener)"></source><targets><direct subsignature="boolean onScaleBegin(android.view.ScaleGestureDetector)" index="1" target-position="argument"></direct><direct subsignature="void onScaleEnd(android.view.ScaleGestureDetector)" index="1" target-position="argument"></direct><direct subsignature="boolean onScale(android.view.ScaleGestureDetector)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer)"></source><targets><direct subsignature="void accept(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)&gt;"></source><targets><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.InputStream,java.nio.charset.Charset)"></source><targets><direct subsignature="int available()" index="0" target-position="argument"></direct><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)&gt;"></source><targets><direct subsignature="java.util.Iterator iterator()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAdapter(android.widget.Adapter)"></source><targets><direct subsignature="void registerDataSetObserver(android.database.DataSetObserver)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnSeekBarChangeListener(android.widget.SeekBar$OnSeekBarChangeListener)"></source><targets><direct subsignature="void onStopTrackingTouch(android.widget.SeekBar)" index="0" target-position="argument"></direct><direct subsignature="void onStartTrackingTouch(android.widget.SeekBar)" index="0" target-position="argument"></direct><direct subsignature="void onProgressChanged(android.widget.SeekBar,int,boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean postAtFrontOfQueue(java.lang.Runnable)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)&gt;"></source><targets><direct subsignature="int read(byte[],int,int)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: java.lang.String dumpCursorToString(android.database.Cursor)&gt;"></source><targets><direct subsignature="int getPosition()" index="0" target-position="argument"></direct><direct subsignature="boolean moveToNext()" index="0" target-position="argument"></direct><direct subsignature="boolean moveToPosition(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.os.Looper,android.os.Handler$Callback)"></source><targets><direct subsignature="boolean handleMessage(android.os.Message)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)"></source><targets><direct subsignature="void onClick(android.content.DialogInterface,int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.ContactsContract$CommonDataKinds$Im: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.view.LayoutInflater,android.content.Context)"></source><targets><direct subsignature="android.view.View onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)" index="0" target-position="argument"></direct><direct subsignature="android.view.View onCreateView(java.lang.String,android.util.AttributeSet)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct><direct subsignature="void onClick(android.content.DialogInterface,int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void closeQuietly(java.io.Reader)"></source><targets><direct subsignature="void close()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)&gt;"></source><targets><direct subsignature="org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setDrawerListener(android.support.v4.widget.p)"></source><targets><direct subsignature="void onDrawerClosed(android.view.View)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void invalidateDrawable(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="void draw(android.graphics.Canvas)" index="0" target-position="argument"></direct><direct subsignature="void invalidateSelf()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setCallback(android.graphics.drawable.Drawable$Callback)"></source><targets><direct subsignature="void invalidateDrawable(android.graphics.drawable.Drawable)" index="0" target-position="argument"></direct><direct subsignature="void onSizeChanged(int,int,int,int)" index="0" target-position="argument"></direct><direct subsignature="boolean verifyDrawable(android.graphics.drawable.Drawable)" index="0" target-position="argument"></direct><direct subsignature="void onVisibilityChanged(android.view.View,int)" index="0" target-position="argument"></direct><direct subsignature="android.os.Parcelable onSaveInstanceState()" index="0" target-position="argument"></direct><direct subsignature="void drawableStateChanged()" index="0" target-position="argument"></direct><direct subsignature="void onAttachedToWindow()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.google.common.collect.SetMultimap newSetMultimap(java.util.Map,com.google.common.base.Supplier)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object put(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get()" index="1" target-position="argument"></direct><direct subsignature="java.util.Set entrySet()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAdapter(android.widget.ExpandableListAdapter)"></source><targets><direct subsignature="long getGroupId(int)" index="0" target-position="argument"></direct><direct subsignature="int getGroupCount()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object getGroup(int)" index="0" target-position="argument"></direct><direct subsignature="android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)" index="0" target-position="argument"></direct><direct subsignature="long getChildId(int,int)" index="0" target-position="argument"></direct><direct subsignature="android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)" index="0" target-position="argument"></direct><direct subsignature="int getChildrenCount(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="1" target-position="argument"></direct><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void startAnimation(android.view.animation.Animation)"></source><targets><direct subsignature="boolean getTransformation(long,android.view.animation.Transformation,float)" index="0" target-position="argument"></direct><direct subsignature="void reset()" index="0" target-position="argument"></direct><direct subsignature="void setStartTime(long)" index="0" target-position="argument"></direct><direct subsignature="void initialize(int,int,int,int)" index="0" target-position="argument"></direct><direct subsignature="void ensureInterpolator()" index="0" target-position="argument"></direct><direct subsignature="boolean willChangeBounds()" index="0" target-position="argument"></direct><direct subsignature="boolean getFillAfter()" index="0" target-position="argument"></direct><direct subsignature="long getStartOffset()" index="0" target-position="argument"></direct><direct subsignature="boolean willChangeTransformationMatrix()" index="0" target-position="argument"></direct><direct subsignature="boolean isInitialized()" index="0" target-position="argument"></direct><direct subsignature="float resolveSize(int,float,int,int)" index="0" target-position="argument"></direct><direct subsignature="void applyTransformation(float,android.view.animation.Transformation)" index="0" target-position="argument"></direct><direct subsignature="float getScaleFactor()" index="0" target-position="argument"></direct><direct subsignature="boolean getTransformation(long,android.view.animation.Transformation)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(int,java.security.cert.X509Certificate,java.lang.String)"></source><targets><direct subsignature="java.security.Principal getSubjectDN()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(int)"></source><targets><indirect subsignature="void setSocketFactory(java.net.SocketImplFactory)" index="-1" target-position="base"><direct subsignature="java.net.SocketImpl createSocketImpl()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)"></source><targets><direct subsignature="void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.view.View,android.text.Editable,java.lang.String,boolean)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="3" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.MediaStore: java.lang.String getVersion(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.support.v7.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)"></source><targets><direct subsignature="void onClick(android.content.DialogInterface,int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.util.AttributeSet)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct><direct subsignature="void stopLocalVoiceInteraction()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.ApplicationErrorReport: android.content.ComponentName getErrorReportReceiver(android.content.Context,java.lang.String,int)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct><direct subsignature="android.content.pm.PackageManager getPackageManager()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeMessage(int,com.google.protobuf.MessageLite)"></source><targets><direct subsignature="void writeTo(com.google.protobuf.CodedOutputStream)" index="1" target-position="argument"></direct><direct subsignature="int getSerializedSize()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void postOnAnimationDelayed(java.lang.Runnable,long)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)"></source><targets><direct subsignature="void setAttribute(java.lang.String,java.lang.Object)" index="2" target-position="argument"></direct><direct subsignature="java.lang.String getMethod()" index="0" target-position="argument"></direct><direct subsignature="java.net.URI getURI()" index="0" target-position="argument"></direct><direct subsignature="org.apache.http.Header[] getAllHeaders()" index="0" target-position="argument"></direct><direct subsignature="org.apache.http.params.HttpParams getParams()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object getAttribute(java.lang.String)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.Security: int insertProviderAt(java.security.Provider,int)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setEntity(org.apache.http.HttpEntity)"></source><targets><direct subsignature="org.apache.http.Header getContentEncoding()" index="0" target-position="argument"></direct><direct subsignature="java.io.InputStream getContent()" index="0" target-position="argument"></direct><direct subsignature="long getContentLength()" index="0" target-position="argument"></direct><direct subsignature="boolean isChunked()" index="0" target-position="argument"></direct><direct subsignature="org.apache.http.Header getContentType()" index="0" target-position="argument"></direct><direct subsignature="void writeTo(java.io.OutputStream)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAutoFocusMoveCallback(android.hardware.Camera$AutoFocusMoveCallback)"></source><targets><direct subsignature="void onAutoFocusMoving(boolean,android.hardware.Camera)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="long getOrCreateThreadId(android.content.Context,java.util.Set)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)&gt;"></source><targets><direct subsignature="android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="2"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.InputStream,java.lang.String)"></source><targets><direct subsignature="int available()" index="0" target-position="argument"></direct><direct subsignature="void fill()" index="0" target-position="argument"></direct><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)"></source><targets><direct subsignature="void onPreviewFrame(byte[],android.hardware.Camera)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean dispatch(android.view.KeyEvent$Callback)"></source><targets><direct subsignature="boolean onKeyDown(int,android.view.KeyEvent)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)&gt;"></source><targets><direct subsignature="int getColumnIndexOrThrow(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct><direct sourceIdx="3" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="java.lang.String getString(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)&gt;"></source><targets><direct subsignature="void readFully(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="int readUnsignedShort()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)"></source><targets><direct subsignature="void onAccuracyChanged(android.hardware.Sensor,int)" index="0" target-position="argument"></direct><direct subsignature="void onSensorChanged(android.hardware.SensorEvent)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)&gt;"></source><targets><direct subsignature="int getIntParameter(java.lang.String,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.view.animation.Animation)"></source><targets><direct subsignature="void setFillBefore(boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.View inflate(int,android.view.ViewGroup,boolean)"></source><targets><direct subsignature="android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)" index="1" target-position="argument"></direct><direct subsignature="boolean dispatchTouchEvent(android.view.MotionEvent)" index="1" target-position="argument"></direct><direct subsignature="boolean onTouchEvent(android.view.MotionEvent)" index="1" target-position="argument"></direct><direct subsignature="boolean performItemClick(android.view.View,int,long)" index="1" target-position="argument"></direct><direct subsignature="void onDetachedFromWindow()" index="1" target-position="argument"></direct><direct subsignature="void onAttachedToWindow()" index="1" target-position="argument"></direct><direct subsignature="void onMeasure(int,int)" index="1" target-position="argument"></direct><direct subsignature="void onLayout(boolean,int,int,int,int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)&gt;"></source><targets><direct subsignature="javax.security.auth.x500.X500Principal getSubjectX500Principal()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setCheckMarkDrawable(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="int getIntrinsicWidth()" index="0" target-position="argument"></direct><direct subsignature="boolean setState(int[])" index="0" target-position="argument"></direct><direct subsignature="int getIntrinsicHeight()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,int,android.database.Cursor,java.lang.String[],int[])"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndexOrThrow(java.lang.String)" index="2" target-position="argument"></direct><direct subsignature="void registerDataSetObserver(android.database.DataSetObserver)" index="2" target-position="argument"></direct><direct subsignature="void onListItemClick(android.widget.ListView,android.view.View,int,long)" index="0" target-position="argument"></direct><direct subsignature="void registerContentObserver(android.database.ContentObserver)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)"></source><targets><direct subsignature="void onItemSelected(android.widget.AdapterView,android.view.View,int,long)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addCookie(org.apache.http.cookie.Cookie)"></source><targets><direct subsignature="java.util.Date getExpiryDate()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getName()" index="0" target-position="argument"></direct><direct subsignature="boolean isExpired(java.util.Date)" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getValue()" index="0" target-position="argument"></direct><direct subsignature="boolean isSecure()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getDomain()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getComment()" index="0" target-position="argument"></direct><direct subsignature="int getVersion()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPath()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void scheduleAtFixedRate(java.util.TimerTask,long,long)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void onCanceled(android.database.Cursor)"></source><targets><direct subsignature="boolean isClosed()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="io.reactivex.Observable doOnNext(io.reactivex.functions.Consumer)"></source><targets><direct subsignature="void accept(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void loadAd(com.google.android.gms.ads.AdRequest)"></source><targets><indirect subsignature="void setAdListener(com.google.android.gms.ads.AdListener)" index="-1" target-position="base"><direct subsignature="void onAdLoaded()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void setAdListener(com.google.android.gms.ads.AdListener)" index="-1" target-position="base"><direct subsignature="void onAdFailedToLoad(int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.String,java.lang.CharSequence,int)"></source><targets><direct subsignature="java.lang.String toString()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.io.Writer append(java.lang.CharSequence)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)&gt;"></source><targets><direct subsignature="int getIntParameter(java.lang.String,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.ContactsContract$CommonDataKinds$SipAddress: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.Set subtract(java.lang.Iterable,java.lang.Iterable)"></source><targets><direct subsignature="boolean contains(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)"></source><targets><direct subsignature="void clear()" index="4" target-position="argument"></direct><direct subsignature="int size()" index="4" target-position="argument"></direct><direct subsignature="boolean offer(java.lang.Object)" index="4" target-position="argument"></direct><direct subsignature="boolean isEmpty()" index="4" target-position="argument"></direct><direct subsignature="java.lang.Object poll(long,java.util.concurrent.TimeUnit)" index="4" target-position="argument"></direct><direct subsignature="java.lang.Object take()" index="4" target-position="argument"></direct><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="5" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)&gt;"></source><targets><direct subsignature="int write(java.nio.ByteBuffer)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.WallpaperManager: android.app.WallpaperManager getInstance(android.content.Context)&gt;"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.method.Touch: void scrollTo(android.widget.TextView,android.text.Layout,int,int)&gt;"></source><targets><direct subsignature="int getParagraphDirection(int)" index="1" target-position="argument"></direct><direct subsignature="int getLineForVertical(int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)"></source><targets><direct subsignature="java.lang.Object call()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)"></source><targets><direct subsignature="android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="2"></direct><direct sourceIdx="3" targetIdx="2"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setCallback(android.support.v4.media.session.MediaSessionCompat$Callback)"></source><targets><direct subsignature="void onSkipToPrevious()" index="0" target-position="argument"></direct><direct subsignature="boolean onMediaButtonEvent(android.content.Intent)" index="0" target-position="argument"></direct><direct subsignature="void onPlay()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addCallback(android.view.SurfaceHolder$Callback)"></source><targets><direct subsignature="void surfaceDestroyed(android.view.SurfaceHolder)" index="0" target-position="argument"></direct><direct subsignature="void surfaceCreated(android.view.SurfaceHolder)" index="0" target-position="argument"></direct><direct subsignature="void surfaceChanged(android.view.SurfaceHolder,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.Contacts$Organizations: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.ActivityOptions makeCustomAnimation(android.content.Context,int,int)"></source><targets><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)"></source><targets><direct subsignature="org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()" index="0" target-position="argument"></direct><direct subsignature="void shutdown()" index="0" target-position="argument"></direct><direct subsignature="org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="void closeExpiredConnections()" index="0" target-position="argument"></direct><direct subsignature="org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,java.lang.Class)"></source><targets><direct subsignature="boolean onCreateOptionsMenu(android.view.Menu)" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct><direct subsignature="void onActivityResult(int,int,android.content.Intent)" index="0" target-position="argument"></direct><direct subsignature="void onBackPressed()" index="0" target-position="argument"></direct><direct subsignature="android.app.Dialog onCreateDialog(int)" index="0" target-position="argument"></direct><direct subsignature="boolean onOptionsItemSelected(android.view.MenuItem)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void write(java.io.OutputStream)"></source><targets><direct subsignature="void write(int)" index="0" target-position="argument"></direct><direct subsignature="void flush()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)"></source><targets><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorDoubleToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)&gt;"></source><targets><direct subsignature="boolean isNull(int)" index="0" target-position="argument"></direct><direct subsignature="double getDouble(int)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndex(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct><direct sourceIdx="3" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int breakText(java.lang.CharSequence,int,int,boolean,float,float[])"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.view.View)"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void getMapAsync(com.google.android.gms.maps.OnMapReadyCallback)"></source><targets><direct subsignature="void onMapReady(com.google.android.gms.maps.GoogleMap)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)"></source><targets><direct subsignature="boolean contains(java.lang.Object)" index="1" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="1" target-position="argument"></direct><direct subsignature="int size()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.Writer)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="java.io.StringWriter append(java.lang.CharSequence)" index="0" target-position="argument"></direct><direct subsignature="void write(char[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void write(int)" index="0" target-position="argument"></direct><direct subsignature="void write(java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="void write(java.lang.String,int,int)" index="0" target-position="argument"></direct><direct subsignature="void flush()" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct><direct subsignature="java.lang.StringBuffer getBuffer()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,int,android.database.Cursor)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)"></source><targets><direct subsignature="int size()" index="4" target-position="argument"></direct><direct subsignature="boolean offer(java.lang.Object)" index="4" target-position="argument"></direct><direct subsignature="boolean isEmpty()" index="4" target-position="argument"></direct><direct subsignature="java.lang.Object poll(long,java.util.concurrent.TimeUnit)" index="4" target-position="argument"></direct><direct subsignature="java.lang.Object take()" index="4" target-position="argument"></direct><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="5" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)&gt;"></source><targets><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addListener(android.animation.Animator$AnimatorListener)"></source><targets><direct subsignature="void onAnimationStart(android.animation.Animator)" index="0" target-position="argument"></direct><direct subsignature="void onAnimationEnd(android.animation.Animator)" index="0" target-position="argument"></direct><direct subsignature="void onAnimationCancel(android.animation.Animator)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.MenuItem add(int,int,int,java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="3" target-position="argument"></direct><direct subsignature="java.lang.String toString()" index="3" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setCompletionHint(java.lang.CharSequence)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.OutputStream,javax.crypto.Cipher)"></source><targets><direct subsignature="void write(byte[])" index="0" target-position="argument"></direct><direct subsignature="byte[] toByteArray()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.ContactsContract$Groups: android.content.EntityIterator newEntityIterator(android.database.Cursor)&gt;"></source><targets><direct subsignature="boolean moveToFirst()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAdapter(android.support.v4.view.PagerAdapter)"></source><targets><direct subsignature="int getItemPosition(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.CharSequence getPageTitle(int)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object instantiateItem(android.view.ViewGroup,int)" index="0" target-position="argument"></direct><direct subsignature="boolean isViewFromObject(android.view.View,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object instantiateItem(android.view.View,int)" index="0" target-position="argument"></direct><direct subsignature="void destroyItem(android.view.ViewGroup,int,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int getCount()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.xml.validation.SchemaFactory: javax.xml.validation.SchemaFactory newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader)&gt;"></source><targets><direct subsignature="java.lang.Class loadClass(java.lang.String)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="1" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.text.Editable newEditable(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addTab(android.support.design.widget.TabLayout$Tab)"></source><targets><indirect subsignature="void setOnTabSelectedListener(android.support.design.widget.TabLayout$OnTabSelectedListener)" index="-1" target-position="base"><direct subsignature="void onTabSelected(android.support.design.widget.TabLayout$Tab)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void unregisterContentObserver(android.database.ContentObserver)"></source><targets><direct subsignature="void onChange(boolean,android.net.Uri)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.view.animation.Animation,float)"></source><targets><direct subsignature="void setFillBefore(boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener)"></source><targets><direct subsignature="void onFaceDetection(android.hardware.Camera$Face[],android.hardware.Camera)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.util.JsonWriter name(java.lang.String)"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.Writer)" index="-1" target-position="base"><direct subsignature="java.io.StringWriter append(java.lang.CharSequence)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.security.cert.CertPathParameters)"></source><targets><direct subsignature="java.lang.Object clone()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnScrollListener(android.widget.AbsListView$OnScrollListener)"></source><targets><direct subsignature="void onScroll(android.widget.AbsListView,int,int,int)" index="0" target-position="argument"></direct><direct subsignature="void onScrollStateChanged(android.widget.AbsListView,int)" index="0" target-position="argument"></direct><indirect subsignature="void setOnScrollListener(android.widget.AbsListView$OnScrollListener)" index="-1" target-position="base"><direct subsignature="void onScroll(android.widget.AbsListView,int,int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void outline42(android.content.SharedPreferences,java.lang.String,boolean)"></source><targets><direct subsignature="android.content.SharedPreferences$Editor edit()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getString(java.lang.String,java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct><direct sourceIdx="1" targetIdx="1"></direct></parameterMappings></direct><direct subsignature="boolean getBoolean(java.lang.String,boolean)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addOnTabSelectedListener(com.google.android.material.tabs.TabLayout$BaseOnTabSelectedListener)"></source><targets><direct subsignature="void onTabSelected(com.google.android.material.tabs.TabLayout$Tab)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="uk.co.senab.actionbarpulltorefresh.library.ActionBarPullToRefresh$SetupWizard listener(uk.co.senab.actionbarpulltorefresh.library.listeners.OnRefreshListener)"></source><targets><direct subsignature="void onRefreshStarted(android.view.View)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.lang.Object min(java.util.Collection)&gt;"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.StringBuilder append(java.lang.Object)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.util.Rfc822Tokenizer: void tokenize(java.lang.CharSequence,java.util.Collection)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct><direct subsignature="void onClick(android.content.DialogInterface,int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)"></source><targets><direct subsignature="boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.text.SpannableStringBuilder append(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)"></source><targets><direct subsignature="void write(byte[],int,int)" index="2" target-position="argument"></direct><direct subsignature="void flush()" index="2" target-position="argument"></direct><direct subsignature="byte[] toByteArray()" index="2" target-position="argument"></direct><direct subsignature="void close()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.view.animation.AnimationUtils: android.view.animation.Animation makeOutAnimation(android.content.Context,boolean)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.params.HttpConnectionParams: boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams)&gt;"></source><targets><direct subsignature="boolean getBooleanParameter(java.lang.String,boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener)"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct><direct subsignature="android.content.pm.PackageManager getPackageManager()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.StringBuilder append(java.lang.CharSequence,int,int)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean contains(java.lang.CharSequence)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.TimeZone,java.util.Locale)"></source><targets><direct subsignature="int getOffset(long)" index="0" target-position="argument"></direct><direct subsignature="int getRawOffset()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)"></source><targets><direct subsignature="void onMeasure(int,int)" index="0" target-position="argument"></direct><direct subsignature="boolean dispatchKeyEvent(android.view.KeyEvent)" index="0" target-position="argument"></direct><direct subsignature="boolean onInterceptTouchEvent(android.view.MotionEvent)" index="0" target-position="argument"></direct><direct subsignature="void onLayout(boolean,int,int,int,int)" index="0" target-position="argument"></direct><direct subsignature="void dispatchDraw(android.graphics.Canvas)" index="0" target-position="argument"></direct><direct subsignature="boolean onTouchEvent(android.view.MotionEvent)" index="0" target-position="argument"></direct><direct subsignature="void scrollTo(int,int)" index="0" target-position="argument"></direct><direct subsignature="void computeScroll()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.text.Spannable newSpannable(java.lang.CharSequence)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.SortedMap checkedSortedMap(java.util.SortedMap,java.lang.Class,java.lang.Class)&gt;"></source><targets><direct subsignature="java.lang.Object lastKey()" index="0" target-position="argument"></direct><direct subsignature="java.util.SortedMap subMap(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.SortedMap headMap(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object firstKey()" index="0" target-position="argument"></direct><direct subsignature="java.util.Comparator comparator()" index="0" target-position="argument"></direct><direct subsignature="java.util.SortedMap tailMap(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.lang.Object min(java.util.Collection,java.util.Comparator)&gt;"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void println()"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.Writer)" index="-1" target-position="base"><direct subsignature="void write(java.lang.String)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.CalendarContract$EventsEntity: android.content.EntityIterator newEntityIterator(android.database.Cursor,android.content.ContentResolver)&gt;"></source><targets><direct subsignature="boolean moveToFirst()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setContentDescription(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.facebook.Session openActiveSession(android.app.Activity,boolean,com.facebook.Session$StatusCallback)"></source><targets><direct subsignature="void call(com.facebook.Session,com.facebook.SessionState,java.lang.Exception)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.Map,long,java.util.List)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Set keySet()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String)&gt;"></source><targets><direct subsignature="java.lang.ClassLoader getClassLoader()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorShortToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)&gt;"></source><targets><direct subsignature="boolean isNull(int)" index="0" target-position="argument"></direct><direct subsignature="short getShort(int)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndex(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="2" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)&gt;"></source><targets><direct subsignature="java.net.SocketImpl createSocketImpl()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)&gt;"></source><targets><direct subsignature="android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="2"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)"></source><targets><direct subsignature="void onPrepared(android.media.MediaPlayer)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.text.Editable replace(int,int,java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.Reader)" index="0" target-position="argument"><direct subsignature="void close()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setNavigationItemSelectedListener(android.support.design.widget.NavigationView$OnNavigationItemSelectedListener)"></source><targets><direct subsignature="boolean onNavigationItemSelected(android.view.MenuItem)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorStringToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)&gt;"></source><targets><direct subsignature="boolean isNull(int)" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getString(int)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndex(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="2" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.View getView(android.view.View,android.view.ViewGroup)"></source><targets><direct subsignature="int getChildCount()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)"></source><targets><direct subsignature="int getLineNumber()" index="1" target-position="argument"></direct><direct subsignature="java.lang.String getPositionDescription()" index="1" target-position="argument"></direct><direct subsignature="int getColumnNumber()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int readInt()"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="int read()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean addAll(java.util.Collection)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object remove()" index="0" target-position="argument"></direct><direct subsignature="int hashCode()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object removeFirst()" index="0" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.ListIterator listIterator(int)" index="0" target-position="argument"></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object clone()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int indexOf(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean remove(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean contains(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.String readLine()"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.Reader)" index="-1" target-position="base"><direct subsignature="int read(char[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Reader,int)" index="-1" target-position="base"><direct subsignature="int read(char[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Reader,int)" index="-1" target-position="base"><direct subsignature="void close()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.bumptech.glide.load.Option disk(java.lang.String,java.lang.Object,com.bumptech.glide.load.Option$CacheKeyUpdater)"></source><targets><direct subsignature="void update(byte[],java.lang.Object,java.security.MessageDigest)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.SpannableString: android.text.SpannableString valueOf(java.lang.CharSequence)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void dispatchDraw(android.graphics.Canvas)"></source><targets><indirect subsignature="void setAnimation(android.view.animation.Animation)" index="-1" target-position="base"><direct subsignature="void applyTransformation(float,android.view.animation.Transformation)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void startAnimation(android.view.animation.Animation)" index="-1" target-position="base"><direct subsignature="boolean getTransformation(long,android.view.animation.Transformation)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void startAnimation(android.view.animation.Animation)" index="-1" target-position="base"><direct subsignature="long getStartOffset()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void setAnimation(android.view.animation.Animation)" index="-1" target-position="base"><direct subsignature="long getStartOffset()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void setAnimation(android.view.animation.Animation)" index="-1" target-position="base"><direct subsignature="boolean getTransformation(long,android.view.animation.Transformation)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setCookieStore(org.apache.http.client.CookieStore)"></source><targets><direct subsignature="java.util.List getCookies()" index="0" target-position="argument"></direct><direct subsignature="void addCookie(org.apache.http.cookie.Cookie)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,long)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.TimeZone)"></source><targets><direct subsignature="int getOffset(long)" index="0" target-position="argument"></direct><direct subsignature="int getRawOffset()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)"></source><targets><direct subsignature="void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setShape(android.graphics.drawable.shapes.Shape)"></source><targets><direct subsignature="void draw(android.graphics.Canvas,android.graphics.Paint)" index="0" target-position="argument"></direct><direct subsignature="void onResize(float,float)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.net.CookieHandler: void setDefault(java.net.CookieHandler)&gt;"></source><targets><direct subsignature="java.util.Map get(java.net.URI,java.util.Map)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void load(java.io.InputStream,boolean)"></source><targets><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)&gt;"></source><targets><direct subsignature="int next()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.format.DateFormat: java.text.DateFormat getTimeFormat(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void postOnAnimation(android.view.View,java.lang.Runnable)"></source><targets><direct subsignature="void run()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance(java.lang.String,java.lang.ClassLoader)&gt;"></source><targets><direct subsignature="java.lang.Class loadClass(java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)&gt;"></source><targets><direct subsignature="java.lang.Object run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.telephony.PhoneNumberUtils: boolean compare(android.content.Context,java.lang.String,java.lang.String)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean postDelayed(java.lang.Runnable,long)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)"></source><targets><direct subsignature="void onViewAttachedToWindow(android.view.View)" index="0" target-position="argument"></direct><direct subsignature="void onViewDetachedFromWindow(android.view.View)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)&gt;"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.SortedMap)"></source><targets><direct subsignature="java.util.Comparator comparator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)&gt;"></source><targets><direct subsignature="java.lang.Object[] getSpans(int,int,java.lang.Class)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,int,java.util.List)"></source><targets><direct subsignature="boolean addAll(java.util.Collection)" index="2" target-position="argument"></direct><direct subsignature="int size()" index="2" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="2" target-position="argument"></direct><direct subsignature="void clear()" index="2" target-position="argument"></direct><direct subsignature="java.lang.Object get(int)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.List)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray(java.lang.Object[])" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedAction)&gt;"></source><targets><direct subsignature="java.lang.Object run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setDataSource(android.content.Context,android.net.Uri,java.util.Map)"></source><targets><direct subsignature="java.util.Set entrySet()" index="2" target-position="argument"></direct><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)&gt;"></source><targets><direct subsignature="java.net.URLStreamHandler createURLStreamHandler(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.Object getItemAtPosition(int)"></source><targets><indirect subsignature="void setAdapter(android.widget.ListAdapter)" index="-1" target-position="base"><direct subsignature="java.lang.Object getItem(int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setInputProcessor(com.badlogic.gdx.InputProcessor)"></source><targets><direct subsignature="boolean keyDown(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.database.Cursor,int)"></source><targets><direct subsignature="int getColumnIndexOrThrow(java.lang.String)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean onTouchEvent(android.view.MotionEvent)"></source><targets><indirect subsignature="void setAdapter(android.support.v4.view.PagerAdapter)" index="-1" target-position="base"></indirect><indirect subsignature="void setAdapter(android.support.v4.view.PagerAdapter)" index="-1" target-position="base"><direct subsignature="void destroyItem(android.view.ViewGroup,int,java.lang.Object)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener)" index="-1" target-position="base"><direct subsignature="void onPageSelected(int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setContextClassLoader(java.lang.ClassLoader)"></source><targets><direct subsignature="java.lang.Class loadClass(java.lang.String,boolean)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Class findClass(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void loadFromXML(java.io.InputStream)"></source><targets><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.Set getStringSet(java.lang.String,java.util.Set)"></source><targets><direct subsignature="boolean contains(java.lang.Object)" index="1" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray(java.lang.Object[])" index="1" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="1" target-position="argument"></direct><direct subsignature="int size()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)&gt;"></source><targets><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener)"></source><targets><direct subsignature="void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)" index="0" target-position="argument"></direct><direct subsignature="void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)" index="0" target-position="argument"></direct><direct subsignature="void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)&gt;"></source><targets><direct subsignature="int compare(java.lang.Object,java.lang.Object)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct><direct sourceIdx="1" targetIdx="1"></direct></parameterMappings></direct><direct subsignature="java.lang.Object remove(int)" index="0" target-position="argument"></direct><direct subsignature="void add(int,java.lang.Object)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="1"></direct></parameterMappings></direct><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.lang.Character: int codePointBefore(java.lang.CharSequence,int)&gt;"></source><targets><direct subsignature="char charAt(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Html: android.text.Spanned fromHtml(java.lang.String,android.text.Html$ImageGetter,android.text.Html$TagHandler)&gt;"></source><targets><direct subsignature="void handleTag(boolean,java.lang.String,android.text.Editable,org.xml.sax.XMLReader)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)"></source><targets><direct subsignature="void onAnimationEnd(android.animation.Animator)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,java.lang.String[],int)"></source><targets><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)"></source><targets><indirect subsignature="void &lt;init&gt;(int,java.util.concurrent.ThreadFactory)" index="-1" target-position="base"><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect><indirect subsignature="void &lt;init&gt;(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)" index="-1" target-position="base"><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="5" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)&gt;"></source><targets><direct subsignature="boolean remove(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object removeFirst()" index="0" target-position="argument"></direct><direct subsignature="boolean contains(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object getFirst()" index="0" target-position="argument"></direct><direct subsignature="boolean offerFirst(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="void addFirst(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object pollFirst()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object peekFirst()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void startConnection(com.android.installreferrer.api.InstallReferrerStateListener)"></source><targets><direct subsignature="void onInstallReferrerSetupFinished(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.String resolveType(android.content.Context)"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void putAll(java.util.Map,java.lang.Iterable)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object put(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean removeEldestEntry(java.util.Map$Entry)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean containsValue(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean containsKey(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Collection values()" index="0" target-position="argument"></direct><direct subsignature="java.util.Set keySet()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)&gt;"></source><targets><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="javax.inject.Provider provider(javax.inject.Provider)"></source><targets><direct subsignature="java.lang.Object get()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.OutputStream)"></source><targets><direct subsignature="void finish()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[])" index="0" target-position="argument"></direct><direct subsignature="void write(int)" index="0" target-position="argument"></direct><direct subsignature="byte[] toByteArray()" index="0" target-position="argument"></direct><direct subsignature="void flush()" index="0" target-position="argument"></direct><direct subsignature="void deflate()" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void readFully(byte[])"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorDoubleToCursorValues(android.database.Cursor,java.lang.String,android.content.ContentValues)&gt;"></source><targets><direct subsignature="boolean isNull(int)" index="0" target-position="argument"></direct><direct subsignature="double getDouble(int)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndex(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)"></source><targets><direct subsignature="void onDraw()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)&gt;"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)&gt;"></source><targets><direct subsignature="org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void init(java.security.Key)"></source><targets><direct subsignature="byte[] getEncoded()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getFormat()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: void selectAll(android.text.Spannable)&gt;"></source><targets><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,java.util.Locale)"></source><targets><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.Contacts$ContactMethods: java.lang.CharSequence getDisplayLabel(android.content.Context,int,int,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.google.android.vending.expansion.downloader.IStub CreateStub(com.google.android.vending.expansion.downloader.IDownloaderClient,java.lang.Class)"></source><targets><direct subsignature="void onServiceConnected(android.os.Messenger)" index="0" target-position="argument"></direct><direct subsignature="void onDownloadStateChanged(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.BoringLayout: android.text.BoringLayout make(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void postOnAnimation(java.lang.Runnable)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Date)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int read()"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.InputStream,int)" index="-1" target-position="base"><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="int available()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setInterpolator(android.view.animation.Interpolator)"></source><targets><direct subsignature="float getInterpolation(float)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeTo(java.io.OutputStream)"></source><targets><indirect subsignature="void writeTo(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Layout: float getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.ContactsContract$RawContacts: android.content.EntityIterator newEntityIterator(android.database.Cursor)&gt;"></source><targets><direct subsignature="boolean moveToFirst()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.InputStream,long)"></source><targets><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.View apply(android.content.Context,android.view.ViewGroup)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)"></source><targets><direct subsignature="java.lang.Object createFromParcel(android.os.Parcel)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.AlertDialog show()"></source><targets><indirect subsignature="void &lt;init&gt;(android.content.Context)" index="-1" target-position="base"><direct subsignature="android.content.pm.ApplicationInfo getApplicationInfo()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(android.content.Context)" index="-1" target-position="base"><direct subsignature="android.content.Context getBaseContext()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(android.content.Context)" index="-1" target-position="base"><direct subsignature="void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(android.content.Context)" index="-1" target-position="base"><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)&gt;"></source><targets><direct subsignature="void ellipsized(int,int)" index="5" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)"></source><targets><direct subsignature="void onGlobalLayout()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeStringList(java.util.List)"></source><targets><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.fasterxml.jackson.jr.private_.TreeNode treeFrom(java.lang.Object)"></source><targets><indirect subsignature="com.fasterxml.jackson.jr.ob.JSON with(com.fasterxml.jackson.jr.private_.TreeCodec)" index="-1" target-position="base"><direct subsignature="com.fasterxml.jackson.jr.private_.TreeNode readTree(com.fasterxml.jackson.jr.private_.JsonParser)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)"></source><targets><direct subsignature="java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct><direct subsignature="boolean isSecure(java.net.Socket)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.net.URLClassLoader: java.net.URLClassLoader newInstance(java.net.URL[],java.lang.ClassLoader)&gt;"></source><targets><direct subsignature="java.net.URL getResource(java.lang.String)" index="1" target-position="argument"></direct><direct subsignature="java.lang.Class loadClass(java.lang.String,boolean)" index="1" target-position="argument"></direct><direct subsignature="java.util.Enumeration getResources(java.lang.String)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)&gt;"></source><targets><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction)&gt;"></source><targets><direct subsignature="java.lang.Object run()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addItemDecoration(android.support.v7.widget.RecyclerView$ItemDecoration)"></source><targets><direct subsignature="void getItemOffsets(android.graphics.Rect,android.view.View,android.support.v7.widget.RecyclerView,android.support.v7.widget.RecyclerView$State)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.CalendarContract$CalendarEntity: android.content.EntityIterator newEntityIterator(android.database.Cursor)&gt;"></source><targets><direct subsignature="boolean isAfterLast()" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndexOrThrow(java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="boolean moveToNext()" index="0" target-position="argument"></direct><direct subsignature="boolean moveToFirst()" index="0" target-position="argument"></direct><direct subsignature="boolean isNull(int)" index="0" target-position="argument"></direct><direct subsignature="int getInt(int)" index="0" target-position="argument"></direct><direct subsignature="long getLong(int)" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getString(int)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndex(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void play(android.content.Context,android.net.Uri,boolean,int)"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeTypedList(android.os.Parcel,int,java.util.List,boolean)"></source><targets><direct subsignature="int size()" index="2" target-position="argument"></direct><direct subsignature="java.lang.Object get(int)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.RejectedExecutionHandler)"></source><targets><direct subsignature="int size()" index="4" target-position="argument"></direct><direct subsignature="boolean offer(java.lang.Object)" index="4" target-position="argument"></direct><direct subsignature="boolean isEmpty()" index="4" target-position="argument"></direct><direct subsignature="java.lang.Object poll(long,java.util.concurrent.TimeUnit)" index="4" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)"></source><targets><direct subsignature="android.view.View createTabContent(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void schedule(java.util.TimerTask,java.util.Date)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.support.v4.content.Loader initLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks)"></source><targets><direct subsignature="android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="1"></direct></parameterMappings></direct><direct subsignature="void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.os.RecoverySystem: void rebootWipeCache(android.content.Context)&gt;"></source><targets><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void write(java.lang.String)"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.Writer)" index="-1" target-position="base"><direct subsignature="void write(char[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Writer)" index="-1" target-position="base"><direct subsignature="void close()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.View initializeForView(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)"></source><targets><direct subsignature="void create()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeUTF(java.lang.String)"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void write(int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void writeUTF(java.lang.String)" index="-1" target-position="base"><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void write(int)" index="0" target-position="argument"></direct></indirect></indirect><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="byte[] toByteArray()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void writeUTF(java.lang.String)" index="-1" target-position="base"><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void flush()" index="0" target-position="argument"></direct></indirect></indirect><indirect subsignature="void writeUTF(java.lang.String)" index="-1" target-position="base"></indirect><indirect subsignature="void writeUTF(java.lang.String)" index="-1" target-position="base"><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="byte[] toByteArray()" index="0" target-position="argument"></direct></indirect></indirect><indirect subsignature="void writeUTF(java.lang.String)" index="-1" target-position="base"><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect></indirect><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void deflate()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void writeUTF(java.lang.String)" index="-1" target-position="base"><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void close()" index="0" target-position="argument"></direct></indirect></indirect><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="0" target-position="argument"><direct subsignature="void write(int)" index="0" target-position="argument"></direct></indirect></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.io.File[] listFiles(java.io.FilenameFilter)"></source><targets><direct subsignature="boolean accept(java.io.File,java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.format.Formatter: java.lang.String formatShortFileSize(android.content.Context,long)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.widget.ArrayAdapter: android.widget.ArrayAdapter createFromResource(android.content.Context,int,int)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)"></source><targets><direct subsignature="byte[] getEncoded()" index="1" target-position="argument"></direct><direct subsignature="int getIterationCount()" index="2" target-position="argument"></direct><direct subsignature="byte[] getIV()" index="2" target-position="argument"></direct><direct subsignature="java.lang.String getFormat()" index="1" target-position="argument"></direct><direct subsignature="byte[] getSalt()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.Map checkedMap(java.util.Map,java.lang.Class,java.lang.Class)&gt;"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object put(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int hashCode()" index="0" target-position="argument"></direct><direct subsignature="java.util.Set entrySet()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean containsValue(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object remove(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean containsKey(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Collection values()" index="0" target-position="argument"></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct><direct subsignature="java.util.Set keySet()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,java.util.List,int,java.lang.String[],int[])"></source><targets><direct subsignature="java.lang.Object get(int)" index="1" target-position="argument"></direct><direct subsignature="int size()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)&gt;"></source><targets><direct subsignature="int read(byte[],int,int)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void start(com.adobe.marketing.mobile.AdobeCallback)"></source><targets><direct subsignature="void call(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="kotlinx.coroutines.Job launchWhenResumed(kotlin.jvm.functions.Function2)"></source><targets><direct subsignature="kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setPathToNames(java.util.Collection)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="io.reactivex.Observable combineLatest(io.reactivex.ObservableSource,io.reactivex.ObservableSource,io.reactivex.ObservableSource,io.reactivex.functions.Function3)"></source><targets><direct subsignature="java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object)" index="3" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: boolean extendUp(android.text.Spannable,android.text.Layout)&gt;"></source><targets><direct subsignature="void removeSpan(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addIdleHandler(android.os.MessageQueue$IdleHandler)"></source><targets><direct subsignature="boolean queueIdle()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.Map toMutableMap(java.util.Map)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean containsKey(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Collection values()" index="0" target-position="argument"></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct><direct subsignature="java.util.Set keySet()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnTouchListener(android.view.View$OnTouchListener)"></source><targets><direct subsignature="boolean onTouch(android.view.View,android.view.MotionEvent)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.view.Display,int)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void dumpCursor(android.database.Cursor)&gt;"></source><targets><direct subsignature="int getPosition()" index="0" target-position="argument"></direct><direct subsignature="boolean moveToNext()" index="0" target-position="argument"></direct><direct subsignature="boolean moveToPosition(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.View inflate(int,android.view.ViewGroup)"></source><targets><direct subsignature="void onAttachedToWindow()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="2" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.nio.file.Files: void delete(java.nio.file.Path)&gt;"></source><targets><direct subsignature="java.nio.file.FileSystem getFileSystem()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: boolean moveRight(android.text.Spannable,android.text.Layout)&gt;"></source><targets><direct subsignature="java.lang.Object[] getSpans(int,int,java.lang.Class)" index="0" target-position="argument"></direct><direct subsignature="void removeSpan(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="void setSpan(java.lang.Object,int,int,int)" index="0" target-position="argument"></direct><direct subsignature="int nextSpanTransition(int,int,java.lang.Class)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void verify(java.lang.String,java.security.cert.X509Certificate)"></source><targets><direct subsignature="javax.security.auth.x500.X500Principal getSubjectX500Principal()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: boolean isDigitsOnly(java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,int,int,java.util.List)"></source><targets><direct subsignature="java.lang.String getPackageCodePath()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void queueEvent(java.lang.Runnable)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.LocationRequest,com.google.android.gms.location.LocationListener)"></source><targets><direct subsignature="void onLocationChanged(android.location.Location)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator)&gt;"></source><targets><direct subsignature="int compare(java.lang.Object,java.lang.Object)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct><direct sourceIdx="1" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.InputStream,boolean)&gt;"></source><targets><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.Collection checkedCollection(java.util.Collection,java.lang.Class)&gt;"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="boolean remove(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean contains(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray(java.lang.Object[])" index="0" target-position="argument"></direct><direct subsignature="boolean removeAll(java.util.Collection)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="boolean containsAll(java.util.Collection)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct><direct subsignature="boolean retainAll(java.util.Collection)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)"></source><targets><direct subsignature="void updateQuota(long)" index="5" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.Intent setClass(android.content.Context,java.lang.Class)"></source><targets><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)"></source><targets><direct subsignature="void writeDataToPipe(android.os.ParcelFileDescriptor,android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object)" index="4" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="1"></direct><direct sourceIdx="1" targetIdx="2"></direct><direct sourceIdx="2" targetIdx="3"></direct><direct sourceIdx="3" targetIdx="4"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct><direct subsignature="void setKeepScreenOn(boolean)" index="2" target-position="argument"></direct><direct subsignature="android.view.Surface getSurface()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(androidx.room.j,java.util.Map,java.util.Map,java.lang.String[])"></source><targets><direct subsignature="java.util.Set entrySet()" index="1" target-position="argument"></direct><direct subsignature="java.lang.Object get(java.lang.Object)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)"></source><targets><direct subsignature="byte[] getKey()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.preference.PreferenceManager: void setDefaultValues(android.content.Context,java.lang.String,int,int,boolean)&gt;"></source><targets><direct subsignature="android.content.SharedPreferences getSharedPreferences(java.lang.String,int)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)&gt;"></source><targets><direct subsignature="java.lang.Object run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.database.Cursor)"></source><targets><direct subsignature="android.os.Bundle getExtras()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.opengl.ETC1Util: void loadTexture(int,int,int,int,int,java.io.InputStream)&gt;"></source><targets><direct subsignature="int read(byte[],int,int)" index="5" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="io.reactivex.Observable combineLatest(io.reactivex.ObservableSource,io.reactivex.ObservableSource,io.reactivex.functions.BiFunction)"></source><targets><direct subsignature="java.lang.Object apply(java.lang.Object,java.lang.Object)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.net.ssl.HttpsURLConnection: void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)&gt;"></source><targets><direct subsignature="int hashCode()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setImageDrawable(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="void draw(android.graphics.Canvas)" index="0" target-position="argument"></direct><direct subsignature="boolean setVisible(boolean,boolean)" index="0" target-position="argument"></direct><direct subsignature="void jumpToCurrentState()" index="0" target-position="argument"></direct><direct subsignature="int getOpacity()" index="0" target-position="argument"></direct><direct subsignature="void setHotspot(float,float)" index="0" target-position="argument"></direct><direct subsignature="void invalidateSelf()" index="0" target-position="argument"></direct><direct subsignature="android.graphics.drawable.Drawable$Callback getCallback()" index="0" target-position="argument"></direct><direct subsignature="void onBoundsChange(android.graphics.Rect)" index="0" target-position="argument"></direct><direct subsignature="int getIntrinsicWidth()" index="0" target-position="argument"></direct><direct subsignature="boolean isStateful()" index="0" target-position="argument"></direct><direct subsignature="boolean onStateChange(int[])" index="0" target-position="argument"></direct><direct subsignature="int getLayoutDirection()" index="0" target-position="argument"></direct><direct subsignature="int getIntrinsicHeight()" index="0" target-position="argument"></direct><direct subsignature="void startTransition(int)" index="0" target-position="argument"></direct><direct subsignature="void setBounds(int,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void read(java.io.InputStream)"></source><targets><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)"></source><targets><direct subsignature="void onCheckedChanged(android.widget.CompoundButton,boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setViewBinder(android.widget.SimpleCursorAdapter$ViewBinder)"></source><targets><direct subsignature="boolean setViewValue(android.view.View,android.database.Cursor,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)"></source><targets><direct subsignature="boolean onPreDraw()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.view.animation.AnimationUtils: android.view.animation.LayoutAnimationController loadLayoutAnimation(android.content.Context,int)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.concurrent.ForkJoinTask: void invokeAll(java.util.concurrent.ForkJoinTask,java.util.concurrent.ForkJoinTask)&gt;"></source><targets><direct subsignature="boolean exec()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.json.JSONObject: java.lang.String numberToString(java.lang.Number)&gt;"></source><targets><direct subsignature="double doubleValue()" index="0" target-position="argument"></direct><direct subsignature="long longValue()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setShaderFactory(android.graphics.drawable.ShapeDrawable$ShaderFactory)"></source><targets><direct subsignature="android.graphics.Shader resize(int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setInput(java.io.InputStream,java.lang.String)"></source><targets><direct subsignature="int read()" index="0" target-position="argument"></direct><direct subsignature="int available()" index="0" target-position="argument"></direct><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnDismissListener(android.content.DialogInterface$OnDismissListener)"></source><targets><direct subsignature="void onDismiss(android.content.DialogInterface)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.Notification$BigPictureStyle setBigContentTitle(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.Notification$BigTextStyle setBigContentTitle(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)"></source><targets><direct subsignature="android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.StringBuilder append(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct><direct subsignature="char charAt(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setMessageLogging(android.util.Printer)"></source><targets><direct subsignature="void println(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.InputStream)"></source><targets><direct subsignature="int read()" index="0" target-position="argument"></direct><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="0" target-position="argument"><direct subsignature="void close()" index="0" target-position="argument"></direct></indirect><direct subsignature="void reset()" index="0" target-position="argument"></direct><direct subsignature="int available()" index="0" target-position="argument"></direct><direct subsignature="void mark(int)" index="0" target-position="argument"></direct><direct subsignature="void fill()" index="0" target-position="argument"></direct><direct subsignature="boolean markSupported()" index="0" target-position="argument"></direct><direct subsignature="long skip(long)" index="0" target-position="argument"></direct><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct><direct subsignature="int read(byte[])" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.view.animation.Interpolator)"></source><targets><direct subsignature="android.content.pm.ApplicationInfo getApplicationInfo()" index="0" target-position="argument"></direct><direct subsignature="float getInterpolation(float)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.database.Cursor,java.lang.String[],android.database.Cursor,java.lang.String[])"></source><targets><direct subsignature="int getColumnIndexOrThrow(java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="boolean moveToFirst()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)"></source><targets><direct subsignature="void onWindowFocusChanged(boolean)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void draw(android.graphics.Canvas)"></source><targets><indirect subsignature="void setBackgroundDrawable(android.graphics.drawable.Drawable)" index="-1" target-position="base"><direct subsignature="void draw(android.graphics.Canvas)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)&gt;"></source><targets><direct subsignature="java.util.Collection getSubjectAlternativeNames()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)&gt;"></source><targets><direct subsignature="boolean isNull(int)" index="0" target-position="argument"></direct><direct subsignature="long getLong(int)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndex(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean contains(java.lang.Object)"></source><targets><direct subsignature="int indexOf(java.lang.Object)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.ContactsContract$QuickContact: void showQuickContact(android.content.Context,android.view.View,android.net.Uri,int,java.lang.String[])&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)"></source><targets><direct subsignature="boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(com.bumptech.glide.load.Key,com.bumptech.glide.load.data.DataFetcher)"></source><targets><direct subsignature="int hashCode()" index="0" target-position="argument"></direct><direct subsignature="void loadData(com.bumptech.glide.Priority,com.bumptech.glide.load.data.DataFetcher$DataCallback)" index="1" target-position="argument"></direct><direct subsignature="com.bumptech.glide.load.DataSource getDataSource()" index="1" target-position="argument"></direct><direct subsignature="void updateDiskCacheKey(java.security.MessageDigest)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setTrackDrawable(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="void draw(android.graphics.Canvas)" index="0" target-position="argument"></direct><direct subsignature="boolean isStateful()" index="0" target-position="argument"></direct><direct subsignature="void jumpToCurrentState()" index="0" target-position="argument"></direct><direct subsignature="boolean getPadding(android.graphics.Rect)" index="0" target-position="argument"></direct><direct subsignature="int getIntrinsicHeight()" index="0" target-position="argument"></direct><direct subsignature="void setBounds(int,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.security.auth.Subject: java.lang.Object doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedExceptionAction,java.security.AccessControlContext)&gt;"></source><targets><direct subsignature="java.lang.Object run()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: int frequency(java.util.Collection,java.lang.Object)&gt;"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setContentHandler(org.xml.sax.ContentHandler)"></source><targets><direct subsignature="void characters(char[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void endElement(java.lang.String,java.lang.String,java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.CharSequence terminateToken(java.lang.CharSequence)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="androidx.lifecycle.ViewModel get(java.lang.Class)"></source><targets><indirect subsignature="void &lt;init&gt;(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory)" index="-1" target-position="base"><direct subsignature="androidx.lifecycle.ViewModel create(java.lang.Class)" index="1" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.Intent putExtra(java.lang.String,android.os.Parcelable)"></source><targets><direct subsignature="void writeToParcel(android.os.Parcel,int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.security.cert.Certificate generateCertificate(java.io.InputStream)"></source><targets><direct subsignature="void mark(int)" index="0" target-position="argument"></direct><direct subsignature="boolean markSupported()" index="0" target-position="argument"></direct><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="java.lang.String[] databaseList()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int load(android.content.Context,int,int)"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.Notification$Builder setStyle(android.app.Notification$Style)"></source><targets><direct subsignature="void setBuilder(android.app.Notification$Builder)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setSelector(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="boolean selectDrawable(int)" index="0" target-position="argument"></direct><direct subsignature="boolean setVisible(boolean,boolean)" index="0" target-position="argument"></direct><direct subsignature="void jumpToCurrentState()" index="0" target-position="argument"></direct><direct subsignature="boolean getPadding(android.graphics.Rect)" index="0" target-position="argument"></direct><direct subsignature="void setHotspot(float,float)" index="0" target-position="argument"></direct><direct subsignature="int[] getState()" index="0" target-position="argument"></direct><direct subsignature="android.graphics.drawable.Drawable getCurrent()" index="0" target-position="argument"></direct><direct subsignature="android.graphics.drawable.Drawable$Callback getCallback()" index="0" target-position="argument"></direct><direct subsignature="void setBounds(android.graphics.Rect)" index="0" target-position="argument"></direct><direct subsignature="void onBoundsChange(android.graphics.Rect)" index="0" target-position="argument"></direct><direct subsignature="boolean isAutoMirrored()" index="0" target-position="argument"></direct><direct subsignature="boolean isStateful()" index="0" target-position="argument"></direct><direct subsignature="boolean setState(int[])" index="0" target-position="argument"></direct><direct subsignature="boolean onStateChange(int[])" index="0" target-position="argument"></direct><direct subsignature="int getLayoutDirection()" index="0" target-position="argument"></direct><direct subsignature="android.graphics.Rect getDirtyBounds()" index="0" target-position="argument"></direct><direct subsignature="void setBounds(int,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setWakeMode(android.content.Context,int)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.security.Provider,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.Map)"></source><targets><direct subsignature="java.lang.Object[] toArray()" index="4" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,int,int,java.lang.Object[])"></source><targets><direct subsignature="void sendOrderedBroadcast(android.content.Intent,java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean register(android.os.IInterface,java.lang.Object)"></source><targets><direct subsignature="android.os.IBinder asBinder()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.String getHead(java.util.logging.Handler)"></source><targets><direct subsignature="java.lang.String getEncoding()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void execute(android.os.AsyncTask)"></source><targets><direct subsignature="java.lang.Object doInBackground(java.lang.Object[])" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.OutputStream,java.lang.String)"></source><targets><direct subsignature="void flush()" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.net.sip.SipProfile)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.animation.AnimatorInflater: android.animation.Animator loadAnimator(android.content.Context,int)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void store(java.io.OutputStream,java.lang.String)"></source><targets><direct subsignature="void flush()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.security.PublicKey generatePublic(java.security.spec.KeySpec)"></source><targets><direct subsignature="byte[] getEncoded()" index="0" target-position="argument"></direct><direct subsignature="java.math.BigInteger getModulus()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.ArrayList list(java.util.Enumeration)&gt;"></source><targets><direct subsignature="boolean hasMoreElements()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.pm.ApplicationInfo getApplicationInfo()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)&gt;"></source><targets><direct subsignature="org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.io.PrintStream)&gt;"></source><targets><direct subsignature="int getPosition()" index="0" target-position="argument"></direct><direct subsignature="boolean moveToNext()" index="0" target-position="argument"></direct><direct subsignature="boolean moveToPosition(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.Context getApplicationContext()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.util.Xml: void parse(java.lang.String,org.xml.sax.ContentHandler)&gt;"></source><targets><direct subsignature="void startDocument()" index="1" target-position="argument"></direct><direct subsignature="void setDocumentLocator(org.xml.sax.Locator)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.Intent putExtra(java.lang.String,int)"></source><targets><direct subsignature="void writeToParcel(android.os.Parcel,int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.Map$Entry)"></source><targets><direct subsignature="java.lang.Object getValue()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object getKey()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.String escapeHtml(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int compareTo(java.util.Calendar)"></source><targets><direct subsignature="java.lang.Object clone()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.Runnable,java.lang.String)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(org.xml.sax.Locator)"></source><targets><direct subsignature="int getLineNumber()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getSystemId()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPublicId()" index="0" target-position="argument"></direct><direct subsignature="int getColumnNumber()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnPageChangeListener(androidx.viewpager.widget.ViewPager$OnPageChangeListener)"></source><targets><direct subsignature="void onPageScrolled(int,float,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setTextOff(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.appwidget.AppWidgetManager: android.appwidget.AppWidgetManager getInstance(android.content.Context)&gt;"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(rx.Observable,rx.functions.Func1)"></source><targets><direct subsignature="java.lang.Object call(java.lang.Object)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct><direct subsignature="char charAt(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.opengl.GLU: void gluOrtho2D(javax.microedition.khronos.opengles.GL10,float,float,float,float)&gt;"></source><targets><direct subsignature="void glOrthof(float,float,float,float,float,float)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setThumb(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="boolean isStateful()" index="0" target-position="argument"></direct><direct subsignature="int getIntrinsicHeight()" index="0" target-position="argument"></direct><direct subsignature="void setBounds(int,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setInput(java.io.Reader)"></source><targets><direct subsignature="int read(char[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.InputStream,javax.crypto.Cipher)"></source><targets><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="int read(byte[])" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnLoadCompleteListener(android.media.SoundPool$OnLoadCompleteListener)"></source><targets><direct subsignature="void onLoadComplete(android.media.SoundPool,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance(java.lang.String,java.lang.ClassLoader)&gt;"></source><targets><direct subsignature="java.lang.Class loadClass(java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void startDrag(androidx.recyclerview.widget.RecyclerView$ViewHolder)"></source><targets><indirect subsignature="void &lt;init&gt;(androidx.recyclerview.widget.ItemTouchHelper$Callback)" index="-1" target-position="base"><direct subsignature="int getMovementFlags(androidx.recyclerview.widget.RecyclerView,androidx.recyclerview.widget.RecyclerView$ViewHolder)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener)"></source><targets><direct subsignature="void onDrawerClosed(android.view.View)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.String readText(java.io.Reader)"></source><targets><direct subsignature="int read(char[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct><direct subsignature="int read(char[])" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float[])&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: boolean moveUp(android.text.Spannable,android.text.Layout)&gt;"></source><targets><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)"></source><targets><direct subsignature="java.lang.String getMethod()" index="0" target-position="argument"></direct><direct subsignature="java.net.URI getURI()" index="0" target-position="argument"></direct><direct subsignature="void abort()" index="0" target-position="argument"></direct><indirect subsignature="void &lt;init&gt;(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)" index="-1" target-position="base"><direct subsignature="void closeExpiredConnections()" index="0" target-position="argument"></direct></indirect><direct subsignature="org.apache.http.Header[] getAllHeaders()" index="0" target-position="argument"></direct><direct subsignature="org.apache.http.params.HttpParams getParams()" index="0" target-position="argument"></direct><indirect subsignature="void &lt;init&gt;(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)" index="-1" target-position="base"><direct subsignature="org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)" index="-1" target-position="base"><direct subsignature="void closeIdleConnections(long,java.util.concurrent.TimeUnit)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.DownloadManager$Request setDestinationInExternalFilesDir(android.content.Context,java.lang.String,java.lang.String)"></source><targets><direct subsignature="java.io.File getExternalFilesDir(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct><direct sourceIdx="2" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.Set toSet(java.lang.Iterable)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.Browser: void sendString(android.content.Context,java.lang.String)&gt;"></source><targets><direct subsignature="void startActivity(android.content.Intent)" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAdapter(android.support.v7.widget.RecyclerView$Adapter)"></source><targets><direct subsignature="android.support.v7.widget.RecyclerView$ViewHolder onCreateViewHolder(android.view.ViewGroup,int)" index="0" target-position="argument"></direct><direct subsignature="void onAttachedToRecyclerView(android.support.v7.widget.RecyclerView)" index="0" target-position="argument"></direct><direct subsignature="long getItemId(int)" index="0" target-position="argument"></direct><direct subsignature="void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)" index="0" target-position="argument"></direct><direct subsignature="int getItemCount()" index="0" target-position="argument"></direct><direct subsignature="int getItemViewType(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.admin.DevicePolicyManager getManager(android.content.Context)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.net.ProxySelector: void setDefault(java.net.ProxySelector)&gt;"></source><targets><direct subsignature="java.util.List select(java.net.URI)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.google.android.gms.common.api.GoogleApiClient$Builder addConnectionCallbacks(com.google.android.gms.common.api.GoogleApiClient$ConnectionCallbacks)"></source><targets><direct subsignature="void onConnected(android.os.Bundle)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeObject(java.lang.Object)"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.Runnable,java.lang.Object)"></source><targets><direct subsignature="void done()" index="0" target-position="argument"></direct><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.Contacts$People: android.graphics.Bitmap loadContactPhoto(android.content.Context,android.net.Uri,int,android.graphics.BitmapFactory$Options)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.Enumeration)"></source><targets><direct subsignature="boolean hasMoreElements()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.List toList(java.lang.Iterable)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="boolean remove(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray(java.lang.Object[])" index="0" target-position="argument"></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(boolean,java.util.Set,java.util.Set,java.util.Set)"></source><targets><direct subsignature="java.lang.Object[] toArray()" index="3" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setBackground(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="int getAlpha()" index="0" target-position="argument"></direct><direct subsignature="void draw(android.graphics.Canvas)" index="0" target-position="argument"></direct><direct subsignature="void setColor(int)" index="0" target-position="argument"></direct><direct subsignature="void jumpToCurrentState()" index="0" target-position="argument"></direct><direct subsignature="boolean getPadding(android.graphics.Rect)" index="0" target-position="argument"></direct><direct subsignature="void setHotspot(float,float)" index="0" target-position="argument"></direct><direct subsignature="void invalidateSelf()" index="0" target-position="argument"></direct><direct subsignature="android.graphics.drawable.Drawable getDrawable(int)" index="0" target-position="argument"></direct><direct subsignature="void onBoundsChange(android.graphics.Rect)" index="0" target-position="argument"></direct><direct subsignature="int getIntrinsicWidth()" index="0" target-position="argument"></direct><direct subsignature="boolean setState(int[])" index="0" target-position="argument"></direct><direct subsignature="boolean onStateChange(int[])" index="0" target-position="argument"></direct><direct subsignature="void setBounds(int,int,int,int)" index="0" target-position="argument"></direct><direct subsignature="int getMinimumWidth()" index="0" target-position="argument"></direct><direct subsignature="void setStroke(int,int)" index="0" target-position="argument"></direct><direct subsignature="boolean setVisible(boolean,boolean)" index="0" target-position="argument"></direct><direct subsignature="int getOpacity()" index="0" target-position="argument"></direct><direct subsignature="android.graphics.drawable.Drawable getCurrent()" index="0" target-position="argument"></direct><direct subsignature="android.graphics.drawable.Drawable$Callback getCallback()" index="0" target-position="argument"></direct><direct subsignature="void getOutline(android.graphics.Outline)" index="0" target-position="argument"></direct><direct subsignature="int getMinimumHeight()" index="0" target-position="argument"></direct><direct subsignature="boolean isStateful()" index="0" target-position="argument"></direct><direct subsignature="int getLayoutDirection()" index="0" target-position="argument"></direct><direct subsignature="int getIntrinsicHeight()" index="0" target-position="argument"></direct><direct subsignature="void startTransition(int)" index="0" target-position="argument"></direct><direct subsignature="android.graphics.Rect getDirtyBounds()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setProgressDrawable(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="int getMinimumHeight()" index="0" target-position="argument"></direct><direct subsignature="boolean setVisible(boolean,boolean)" index="0" target-position="argument"></direct><direct subsignature="void setBounds(int,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setInterpolator(android.animation.TimeInterpolator)"></source><targets><direct subsignature="float getInterpolation(float)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void schedule(java.util.TimerTask,long,long)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void flush()"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.OutputStream,java.lang.String)" index="-1" target-position="base"><direct subsignature="void flush()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Writer)" index="-1" target-position="base"><direct subsignature="void write(char[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.OutputStream,java.nio.charset.Charset)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Writer)" index="-1" target-position="base"><direct subsignature="void flush()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Writer,int)" index="-1" target-position="base"><direct subsignature="void flush()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Writer,int)" index="-1" target-position="base"><direct subsignature="void write(char[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void deflate()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.OutputStream,java.lang.String)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.OutputStream,java.nio.charset.Charset)" index="-1" target-position="base"><direct subsignature="void flush()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Writer,boolean)" index="-1" target-position="base"><direct subsignature="void flush()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)"></source><targets><direct subsignature="android.content.Context getApplicationContext()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void startConnection(com.android.billingclient.api.BillingClientStateListener)"></source><targets><direct subsignature="void onBillingSetupFinished(com.android.billingclient.api.BillingResult)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.Object callInTransaction(com.j256.ormlite.support.ConnectionSource,java.util.concurrent.Callable)"></source><targets><direct subsignature="java.lang.Object call()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void beforeExecute(java.lang.Thread,java.lang.Runnable)"></source><targets><direct subsignature="void run()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(int,java.util.concurrent.ThreadFactory)"></source><targets><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void appendWhere(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: boolean extendDown(android.text.Spannable,android.text.Layout)&gt;"></source><targets><direct subsignature="void removeSpan(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="io.reactivex.Completable fromRunnable(java.lang.Runnable)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void createSession(android.view.inputmethod.InputMethod$SessionCallback)"></source><targets><direct subsignature="void sessionCreated(android.view.inputmethod.InputMethodSession)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setPageTransformer(boolean,android.support.v4.view.ViewPager$PageTransformer)"></source><targets><direct subsignature="void transformPage(android.view.View,float)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.media.MediaScannerConnection: void scanFile(android.content.Context,java.lang.String[],java.lang.String[],android.media.MediaScannerConnection$OnScanCompletedListener)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.OutputStream,java.util.zip.Deflater)"></source><targets><direct subsignature="byte[] toByteArray()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void readTypedList(java.util.List,android.os.Parcelable$Creator)"></source><targets><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object createFromParcel(android.os.Parcel)" index="1" target-position="argument"></direct><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.Notification$BigTextStyle setSummaryText(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.Collection)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean removeAll(java.util.Collection)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="java.lang.Object peek()" index="0" target-position="argument"></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int indexOf(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean remove(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean addAll(int,java.util.Collection)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct><direct subsignature="boolean contains(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="boolean addAll(java.util.Collection)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.List filterNotNull(java.lang.Iterable)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.Set synchronizedSet(java.util.Set)&gt;"></source><targets><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="boolean addAll(java.util.Collection)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)"></source><targets><direct subsignature="void uncaughtException(java.lang.Thread,java.lang.Throwable)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])&gt;"></source><targets><direct subsignature="int length()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: void shuffle(java.util.List,java.util.Random)&gt;"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void playSequentially(java.util.List)"></source><targets><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.ContactsContract$CommonDataKinds$Relation: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setFactory2(android.view.LayoutInflater$Factory2)"></source><targets><direct subsignature="android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.concurrent.Future submit(java.util.concurrent.Callable)"></source><targets><direct subsignature="java.lang.Object call()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)&gt;"></source><targets><direct subsignature="boolean isNull(int)" index="0" target-position="argument"></direct><direct subsignature="long getLong(int)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndex(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct><direct sourceIdx="3" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.io.PrintStream)&gt;"></source><targets><direct subsignature="int getPosition()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String[] getColumnNames()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)&gt;"></source><targets><direct subsignature="android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.method.MetaKeyKeyListener: void resetMetaState(android.text.Spannable)&gt;"></source><targets><direct subsignature="void removeSpan(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.util.Linkify: boolean addLinks(android.text.Spannable,int)&gt;"></source><targets><direct subsignature="java.lang.Object[] getSpans(int,int,java.lang.Class)" index="0" target-position="argument"></direct><direct subsignature="void setSpan(java.lang.Object,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.client.utils.URLEncodedUtils: java.lang.String format(java.util.List,java.lang.String)&gt;"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setButtonDrawable(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="void draw(android.graphics.Canvas)" index="0" target-position="argument"></direct><direct subsignature="boolean setVisible(boolean,boolean)" index="0" target-position="argument"></direct><direct subsignature="int getIntrinsicHeight()" index="0" target-position="argument"></direct><direct subsignature="void setBounds(int,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setImeActionLabel(java.lang.CharSequence,int)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.String,java.util.Collection)"></source><targets><direct subsignature="int size()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.Notification$InboxStyle setBigContentTitle(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="char charAt(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(java.io.InputStream)&gt;"></source><targets><direct subsignature="boolean markSupported()" index="0" target-position="argument"></direct><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)"></source><targets><direct subsignature="boolean onPreferenceChange(android.preference.Preference,java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnQueryTextListener(android.support.v7.widget.SearchView$OnQueryTextListener)"></source><targets><direct subsignature="boolean onQueryTextChange(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.os.AsyncTask generate(android.support.v7.graphics.Palette$PaletteAsyncListener)"></source><targets><direct subsignature="void onGenerated(android.support.v7.graphics.Palette)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.speech.RecognizerIntent: android.content.Intent getVoiceDetailsIntent(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.pm.PackageManager getPackageManager()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setCharacterStream(java.io.Reader)"></source><targets><direct subsignature="int read(char[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.view.inputmethod.BaseInputConnection: void removeComposingSpans(android.text.Spannable)&gt;"></source><targets><direct subsignature="void removeSpan(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int getTextWidths(java.lang.CharSequence,int,int,float[])"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setTokenizer(android.widget.MultiAutoCompleteTextView$Tokenizer)"></source><targets><direct subsignature="int findTokenEnd(java.lang.CharSequence,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,int[])&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.Reader)"></source><targets><direct subsignature="int read(char[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct><direct subsignature="boolean ready()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.TaskStackBuilder create(android.content.Context)"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct><direct subsignature="android.content.pm.PackageManager getPackageManager()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void schedule(java.util.TimerTask,long)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setEvaluator(android.animation.TypeEvaluator)"></source><targets><direct subsignature="java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setMeteringAreas(java.util.List)"></source><targets><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setDataSource(java.lang.String,java.util.Map)"></source><targets><direct subsignature="java.util.Set entrySet()" index="1" target-position="argument"></direct><direct subsignature="int size()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.ActionMode startActionMode(android.view.ActionMode$Callback)"></source><targets><direct subsignature="boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: void setSelection(android.text.Spannable,int,int)&gt;"></source><targets><direct subsignature="void removeSpan(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct><direct subsignature="void setSpan(java.lang.Object,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean)&gt;"></source><targets><direct subsignature="java.security.Principal getUserPrincipal()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPassword()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: void extendSelection(android.text.Spannable,int)&gt;"></source><targets><direct subsignature="java.lang.Object[] getSpans(int,int,java.lang.Class)" index="0" target-position="argument"></direct><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="void setSpan(java.lang.Object,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedAction)&gt;"></source><targets><direct subsignature="java.lang.Object run()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.io.PrintStream append(java.lang.CharSequence,int,int)"></source><targets><direct subsignature="java.lang.CharSequence subSequence(int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.os.RecoverySystem: void rebootWipeUserData(android.content.Context)&gt;"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.String readUTF()"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="void close()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="int read()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="void fill()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void logInWithReadPermissions(androidx.fragment.app.Fragment,java.util.Collection)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="1" target-position="argument"></direct><direct subsignature="int size()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: void swap(java.util.List,int,int)&gt;"></source><targets><direct subsignature="java.lang.Object set(int,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setValidator(android.widget.AutoCompleteTextView$Validator)"></source><targets><direct subsignature="java.lang.CharSequence fixText(java.lang.CharSequence)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.view.animation.Interpolator,float,float,boolean)"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addLevel(int,int,android.graphics.drawable.Drawable)"></source><targets><direct subsignature="boolean setVisible(boolean,boolean)" index="2" target-position="argument"></direct><direct subsignature="android.graphics.drawable.Drawable$Callback getCallback()" index="2" target-position="argument"></direct><direct subsignature="void setBounds(android.graphics.Rect)" index="2" target-position="argument"></direct><direct subsignature="void setDither(boolean)" index="2" target-position="argument"></direct><direct subsignature="boolean setState(int[])" index="2" target-position="argument"></direct><direct subsignature="int getChangingConfigurations()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void save(java.io.OutputStream,java.lang.String)"></source><targets><direct subsignature="void flush()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)"></source><targets><direct subsignature="boolean isStateful()" index="2" target-position="argument"></direct><direct subsignature="void draw(android.graphics.Canvas)" index="2" target-position="argument"></direct><direct subsignature="void setBounds(int,int,int,int)" index="3" target-position="argument"></direct><direct subsignature="int getIntrinsicHeight()" index="3" target-position="argument"></direct><direct subsignature="void setBounds(int,int,int,int)" index="2" target-position="argument"></direct><direct subsignature="boolean setState(int[])" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct><direct subsignature="char charAt(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)"></source><targets><indirect subsignature="void &lt;init&gt;(android.content.Context,java.util.List,int,java.lang.String[],int[],java.util.List,int,java.lang.String[],int[])" index="-1" target-position="base"><direct subsignature="java.lang.Object get(int)" index="5" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean performItemAction(android.view.MenuItem,android.support.v7.view.menu.MenuPresenter,int)"></source><targets><direct subsignature="void updateMenuView(boolean)" index="1" target-position="argument"></direct><direct subsignature="int getId()" index="1" target-position="argument"></direct><direct subsignature="android.os.Parcelable onSaveInstanceState()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.MenuItem setTitle(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setIssuers(java.util.Collection)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)&gt;"></source><targets><direct subsignature="void finish()" index="0" target-position="argument"></direct><direct subsignature="boolean onTouchEvent(android.view.MotionEvent)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="2" target-position="argument"></direct><direct subsignature="int length()" index="2" target-position="argument"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.os.RecoverySystem: void installPackage(android.content.Context,java.io.File)&gt;"></source><targets><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.support.v4.widget.ScrollerCompat create(android.content.Context,android.view.animation.Interpolator)"></source><targets><direct subsignature="float getInterpolation(float)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.view.animation.Animation,float,float)"></source><targets><direct subsignature="void setFillBefore(boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void createNotificationChannels(java.util.List)"></source><targets><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)"></source><targets><direct subsignature="void onClick(android.content.DialogInterface,int)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)&gt;"></source><targets><direct subsignature="java.lang.Object run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)"></source><targets><direct subsignature="org.apache.http.HttpEntity getEntity()" index="1" target-position="argument"></direct><direct subsignature="org.apache.http.Header[] getAllHeaders()" index="1" target-position="argument"></direct><direct subsignature="org.apache.http.ProtocolVersion getProtocolVersion()" index="1" target-position="argument"></direct><direct subsignature="org.apache.http.RequestLine getRequestLine()" index="1" target-position="argument"></direct><direct subsignature="org.apache.http.params.HttpParams getParams()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: int getOffsetAfter(java.lang.CharSequence,int)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.content.ContentResolver: java.lang.Object addStatusChangeListener(int,android.content.SyncStatusObserver)&gt;"></source><targets><direct subsignature="void onStatusChanged(int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.MenuItem setIcon(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="int getChangingConfigurations()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(org.xml.sax.Attributes)"></source><targets><direct subsignature="int getLength()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: void sort(java.util.List)&gt;"></source><targets><direct subsignature="java.util.ListIterator listIterator()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object set(int,java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="org.w3c.dom.Document parse(java.io.InputStream)"></source><targets><direct subsignature="int read()" index="0" target-position="argument"></direct><direct subsignature="int available()" index="0" target-position="argument"></direct><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="bolts.Task whenAll(java.util.Collection)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)"></source><targets><direct subsignature="void onSystemUiVisibilityChange(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(android.util.Property,int[])&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)&gt;"></source><targets><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="androidx.recyclerview.widget.h$c calculateDiff(androidx.recyclerview.widget.h$b)"></source><targets><direct subsignature="int getOldListSize()" index="0" target-position="argument"></direct><direct subsignature="int getNewListSize()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void execute(java.lang.Runnable)"></source><targets><direct subsignature="void done()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><indirect subsignature="void &lt;init&gt;(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)" index="-1" target-position="base"><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="5" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect><indirect subsignature="void &lt;init&gt;(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)" index="-1" target-position="base"><direct subsignature="boolean offer(java.lang.Object)" index="4" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)" index="-1" target-position="base"><direct subsignature="boolean offer(java.lang.Object)" index="4" target-position="argument"></direct></indirect><direct subsignature="void run()" index="0" target-position="argument"></direct><indirect subsignature="void &lt;init&gt;(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)" index="-1" target-position="base"><direct subsignature="java.lang.Thread decorate(java.lang.Thread)" index="5" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)" index="-1" target-position="base"><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect><direct subsignature="void set(java.lang.Object)" index="0" target-position="argument"></direct><indirect subsignature="void &lt;init&gt;(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)" index="-1" target-position="base"><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="5" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect><indirect subsignature="void &lt;init&gt;(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)" index="-1" target-position="base"><direct subsignature="boolean offer(java.lang.Object)" index="4" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void enqueue(okhttp3.Callback)"></source><targets><direct subsignature="void onFailure(okhttp3.Call,java.io.IOException)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAdListener(com.google.android.gms.ads.a)"></source><targets><direct subsignature="void onAdFailedToLoad(int)" index="0" target-position="argument"></direct><direct subsignature="void onAdLoaded()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction)&gt;"></source><targets><direct subsignature="java.lang.Object run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.String join(java.lang.Iterable,java.lang.String)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorStringToInsertHelper(android.database.Cursor,java.lang.String,android.database.DatabaseUtils$InsertHelper,int)&gt;"></source><targets><direct subsignature="int getColumnIndexOrThrow(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="java.lang.String getString(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)&gt;"></source><targets><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.graphics.drawable.Drawable,int,int)"></source><targets><direct subsignature="android.graphics.drawable.Drawable$ConstantState getConstantState()" index="0" target-position="argument"></direct><direct subsignature="boolean setState(int[])" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.facebook.ads.AudienceNetworkAds$InitSettingsBuilder withInitListener(com.facebook.ads.AudienceNetworkAds$InitListener)"></source><targets><direct subsignature="void onInitialized(com.facebook.ads.AudienceNetworkAds$InitResult)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.webkit.WebViewDatabase: android.webkit.WebViewDatabase getInstance(android.content.Context)&gt;"></source><targets><direct subsignature="android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void transform(javax.xml.transform.Source,javax.xml.transform.Result)"></source><targets><direct subsignature="java.lang.String getSystemId()" index="0" target-position="argument"></direct><direct subsignature="java.io.Writer getWriter()" index="1" target-position="argument"></direct><direct subsignature="org.w3c.dom.Node getNode()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)"></source><targets><direct subsignature="android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="2"></direct><direct sourceIdx="3" targetIdx="2"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)"></source><targets><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Calendar)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)&gt;"></source><targets><direct subsignature="int size()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.StringBuffer append(java.lang.CharSequence,int,int)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)&gt;"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="okio.BufferedSource buffer(okio.Source)"></source><targets><direct subsignature="long read(okio.Buffer,long)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnCameraChangeListener(com.google.android.gms.maps.GoogleMap$OnCameraChangeListener)"></source><targets><direct subsignature="void onCameraChange(com.google.android.gms.maps.model.CameraPosition)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setCurrentItem(int,boolean)"></source><targets><indirect subsignature="void setAdapter(androidx.viewpager.widget.PagerAdapter)" index="-1" target-position="base"><direct subsignature="java.lang.Object instantiateItem(android.view.ViewGroup,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void setAdapter(androidx.viewpager.widget.PagerAdapter)" index="-1" target-position="base"><direct subsignature="androidx.fragment.app.Fragment getItem(int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void addOnPageChangeListener(androidx.viewpager.widget.ViewPager$OnPageChangeListener)" index="-1" target-position="base"><direct subsignature="void onPageSelected(int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void setAdapter(androidx.viewpager.widget.PagerAdapter)" index="-1" target-position="base"><direct subsignature="boolean isViewFromObject(android.view.View,java.lang.Object)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void setAdapter(android.support.v4.view.PagerAdapter)" index="-1" target-position="base"><direct subsignature="int getCount()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setEndTextElementListener(android.sax.EndTextElementListener)"></source><targets><direct subsignature="void end(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: void rotate(java.util.List,int)&gt;"></source><targets><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.Set toMutableSet(java.lang.Iterable)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.Writer,boolean)"></source><targets><direct subsignature="void write(java.lang.String,int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setSubjectAlternativeNames(java.util.Collection)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void close()"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.Reader,int)" index="-1" target-position="base"><direct subsignature="void close()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="void close()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Reader)" index="-1" target-position="base"><direct subsignature="void close()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="b.c.b.o.m.k$a fetch(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.util.Map,java.lang.String,java.util.Map,java.util.Date)"></source><targets><direct subsignature="java.util.Set entrySet()" index="3" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void dispatchKeyEvent(int,android.view.KeyEvent,android.view.inputmethod.InputMethodSession$EventCallback)"></source><targets><direct subsignature="void finishedEvent(int,boolean)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void write(byte[],int,int)"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)&gt;"></source><targets><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void println(java.lang.String)"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.Writer)" index="-1" target-position="base"><direct subsignature="void write(java.lang.String,int,int)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.OutputStream,boolean,java.lang.String)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Writer)" index="-1" target-position="base"><direct subsignature="void write(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)&gt;"></source><targets><direct subsignature="java.lang.Object get(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean containsKey(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.opengl.GLU: void gluLookAt(javax.microedition.khronos.opengles.GL10,float,float,float,float,float,float,float,float,float)&gt;"></source><targets><direct subsignature="void glMultMatrixf(float[],int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)&gt;"></source><targets><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.graphics.drawable.Drawable,int,int,int,int)"></source><targets><direct subsignature="android.graphics.drawable.Drawable$ConstantState getConstantState()" index="0" target-position="argument"></direct><direct subsignature="boolean setState(int[])" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)&gt;"></source><targets><direct subsignature="boolean acceptMatch(java.lang.CharSequence,int,int)" index="3" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean postAtTime(java.lang.Runnable,long)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean addAll(int,java.util.Collection)"></source><targets><direct subsignature="java.lang.Object[] toArray()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.view.animation.Interpolator,boolean)"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.style.CharacterStyle: android.text.style.CharacterStyle wrap(android.text.style.CharacterStyle)&gt;"></source><targets><direct subsignature="android.text.style.CharacterStyle getUnderlying()" index="0" target-position="argument"></direct><direct subsignature="void updateDrawState(android.text.TextPaint)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void start()"></source><targets><indirect subsignature="void setInterpolator(android.animation.TimeInterpolator)" index="-1" target-position="base"><direct subsignature="float getInterpolation(float)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)" index="-1" target-position="base"><direct subsignature="void onAnimationUpdate(android.animation.ValueAnimator)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void addListener(android.animation.Animator$AnimatorListener)" index="-1" target-position="base"><direct subsignature="void onAnimationStart(android.animation.Animator)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setTitle(java.lang.CharSequence)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] getSpans(int,int,java.lang.Class)" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setCurrentItem(int)"></source><targets><indirect subsignature="void setAdapter(androidx.viewpager.widget.PagerAdapter)" index="-1" target-position="base"><direct subsignature="java.lang.Object instantiateItem(android.view.ViewGroup,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener)" index="-1" target-position="base"><direct subsignature="void onPageSelected(int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void setAdapter(androidx.viewpager.widget.PagerAdapter)" index="-1" target-position="base"><direct subsignature="boolean isViewFromObject(android.view.View,java.lang.Object)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void setAdapter(android.support.v4.view.PagerAdapter)" index="-1" target-position="base"><direct subsignature="int getCount()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)"></source><targets><direct subsignature="void onImageAvailable(android.media.ImageReader)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.SpannedString: android.text.SpannedString valueOf(java.lang.CharSequence)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void $default$onDestroy(androidx.lifecycle.DefaultLifecycleObserver,androidx.lifecycle.LifecycleOwner)"></source><targets><direct subsignature="void onDestroy(androidx.lifecycle.LifecycleOwner)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setDataSource(android.content.Context,android.net.Uri)"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.EnumSet: java.util.EnumSet copyOf(java.util.Collection)&gt;"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void initialize(android.content.Context,com.google.android.gms.ads.initialization.OnInitializationCompleteListener)"></source><targets><direct subsignature="void onInitializationComplete(com.google.android.gms.ads.initialization.InitializationStatus)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: boolean extendLeft(android.text.Spannable,android.text.Layout)&gt;"></source><targets><direct subsignature="void removeSpan(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.support.v7.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)"></source><targets><direct subsignature="void onClick(android.content.DialogInterface,int)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(com.google.firebase.FirebaseApp,k.h.g.l.r,java.util.concurrent.Executor,java.util.concurrent.Executor,k.h.g.j.d,k.h.g.r.f,k.h.g.k.c,k.h.g.o.h)"></source><targets><direct subsignature="void execute(java.lang.Runnable)" index="3" target-position="argument"></direct><direct subsignature="java.util.concurrent.ThreadFactory getThreadFactory()" index="3" target-position="argument"></direct><direct subsignature="void beforeExecute(java.lang.Thread,java.lang.Runnable)" index="3" target-position="argument"></direct><direct subsignature="void afterExecute(java.lang.Runnable,java.lang.Throwable)" index="3" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)"></source><targets><direct subsignature="void onLocationChanged(android.location.Location)" index="3" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: void fill(java.util.List,java.lang.Object)&gt;"></source><targets><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void storeToXML(java.io.OutputStream,java.lang.String)"></source><targets><direct subsignature="void flush()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.net.CookieHandler)"></source><targets><direct subsignature="java.util.Map get(java.net.URI,java.util.Map)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void init(int,int,int,android.widget.DatePicker$OnDateChangedListener)"></source><targets><direct subsignature="void onDateChanged(android.widget.DatePicker,int,int,int)" index="3" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean containsAll(java.util.Collection)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="int hashCode()" index="0" target-position="argument"></direct><direct subsignature="boolean contains(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="1" target-position="argument"></direct><direct subsignature="android.content.res.Resources getResources()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.speech.SpeechRecognizer: boolean isRecognitionAvailable(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.pm.PackageManager getPackageManager()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setControlStatusListener(android.media.audiofx.AudioEffect$OnControlStatusChangeListener)"></source><targets><direct subsignature="void onControlStatusChange(android.media.audiofx.AudioEffect,boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOverscrollFooter(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="void draw(android.graphics.Canvas)" index="0" target-position="argument"></direct><direct subsignature="int getMinimumHeight()" index="0" target-position="argument"></direct><direct subsignature="void setBounds(android.graphics.Rect)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.opengl.ETC1Util: android.opengl.ETC1Util$ETC1Texture createTexture(java.io.InputStream)&gt;"></source><targets><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,java.lang.String)"></source><targets><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setSummary(java.lang.CharSequence)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: void copy(java.util.List,java.util.List)&gt;"></source><targets><direct subsignature="int size()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: int indexOf(java.lang.CharSequence,char)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="kotlin.Lazy lazy(kotlin.jvm.functions.Function0)"></source><targets><direct subsignature="java.lang.Object invoke()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.List synchronizedList(java.util.List)&gt;"></source><targets><direct subsignature="boolean contains(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int indexOf(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.DownloadManager: java.lang.Long getRecommendedMaxBytesOverMobile(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: void setSelection(android.text.Spannable,int)&gt;"></source><targets><direct subsignature="void removeSpan(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.nio.channels.Channels: java.io.Reader newReader(java.nio.channels.ReadableByteChannel,java.nio.charset.CharsetDecoder,int)&gt;"></source><targets><direct subsignature="int read(java.nio.ByteBuffer)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setScreen(com.badlogic.gdx.Screen)"></source><targets><direct subsignature="void render(float)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.graphics.drawable.Drawable,int)"></source><targets><direct subsignature="android.graphics.drawable.Drawable$ConstantState getConstantState()" index="0" target-position="argument"></direct><direct subsignature="boolean setState(int[])" index="0" target-position="argument"></direct><direct subsignature="void setBounds(android.graphics.Rect)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setFocusAreas(java.util.List)"></source><targets><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void load(java.io.InputStream,char[])"></source><targets><direct subsignature="int read()" index="0" target-position="argument"></direct><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.CharSequence)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="int getSpanFlags(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct><direct subsignature="int getSpanEnd(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.security.KeyChain: void choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,java.lang.String[],java.security.Principal[],java.lang.String,int,java.lang.String)&gt;"></source><targets><direct subsignature="void alias(java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="4" targetIdx="0"></direct><direct sourceIdx="6" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void dispatchGenericMotionEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession$EventCallback)"></source><targets><direct subsignature="void finishedEvent(int,boolean)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void removeSessionCookies(android.webkit.ValueCallback)"></source><targets><direct subsignature="void onReceiveValue(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeToStream(java.io.OutputStream)"></source><targets><direct subsignature="void flush()" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: java.lang.String dumpCurrentRowToString(android.database.Cursor)&gt;"></source><targets><direct subsignature="int getPosition()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String[] getColumnNames()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.xml.datatype.DatatypeFactory: javax.xml.datatype.DatatypeFactory newInstance(java.lang.String,java.lang.ClassLoader)&gt;"></source><targets><direct subsignature="java.lang.Class loadClass(java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void openDrawer(int)"></source><targets><indirect subsignature="void setDrawerListener(androidx.drawerlayout.widget.DrawerLayout$DrawerListener)" index="-1" target-position="base"><direct subsignature="void onDrawerStateChanged(int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void setDrawerListener(androidx.drawerlayout.widget.DrawerLayout$DrawerListener)" index="-1" target-position="base"><direct subsignature="void onDrawerOpened(android.view.View)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)"></source><targets><direct subsignature="void onClick(android.content.DialogInterface,int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setRewardedVideoAdListener(com.google.android.gms.ads.reward.RewardedVideoAdListener)"></source><targets><direct subsignature="void onRewardedVideoAdLoaded()" index="0" target-position="argument"></direct><direct subsignature="void onRewardedVideoAdFailedToLoad(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int collectionSizeOrDefault(java.lang.Iterable,int)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)"></source><targets><indirect subsignature="org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="void setOutput(java.io.OutputStream,java.lang.String)" index="-1" target-position="base"><direct subsignature="void close()" index="0" target-position="argument"></direct></indirect></indirect></indirect><indirect subsignature="org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="void setOutput(java.io.OutputStream,java.lang.String)" index="-1" target-position="base"><direct subsignature="void flush()" index="0" target-position="argument"></direct></indirect></indirect></indirect></indirect><indirect subsignature="org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="void setOutput(java.io.OutputStream,java.lang.String)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect></indirect></indirect></indirect><indirect subsignature="org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="void setOutput(java.io.OutputStream,java.lang.String)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect></indirect></indirect><indirect subsignature="org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="void setOutput(java.io.OutputStream,java.lang.String)" index="-1" target-position="base"><direct subsignature="void close()" index="0" target-position="argument"></direct></indirect></indirect></indirect></indirect><indirect subsignature="org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)" index="-1" target-position="base"><indirect subsignature="void setOutput(java.io.OutputStream,java.lang.String)" index="-1" target-position="base"><direct subsignature="void flush()" index="0" target-position="argument"></direct></indirect></indirect></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener)"></source><targets><direct subsignature="void onFocusChange(android.view.View,boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void run()"></source><targets><indirect subsignature="void &lt;init&gt;(java.util.concurrent.Callable)" index="-1" target-position="base"><direct subsignature="java.lang.Object call()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)"></source><targets><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.Notification$BigPictureStyle setSummaryText(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory)"></source><targets><direct subsignature="com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: void sort(java.util.List,java.util.Comparator)&gt;"></source><targets><direct subsignature="void sort(java.util.Comparator)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,int)"></source><targets><direct subsignature="void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)" index="0" target-position="argument"></direct><direct subsignature="java.lang.ClassLoader getClassLoader()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct><direct subsignature="android.os.Looper getMainLooper()" index="0" target-position="argument"></direct><direct subsignature="android.content.pm.ApplicationInfo getApplicationInfo()" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getSystemServiceName(java.lang.Class)" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct><direct subsignature="boolean isRestricted()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)"></source><targets><direct subsignature="boolean onKeyDown(int,android.view.KeyEvent)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)&gt;"></source><targets><direct subsignature="java.lang.Object run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)"></source><targets><direct subsignature="void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnKeyListener(android.view.View$OnKeyListener)"></source><targets><direct subsignature="boolean onKey(android.view.View,int,android.view.KeyEvent)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void runOnUiThread(java.lang.Runnable)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.SortedSet)"></source><targets><direct subsignature="java.util.Comparator comparator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: boolean moveToLeftEdge(android.text.Spannable,android.text.Layout)&gt;"></source><targets><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)&gt;"></source><targets><direct subsignature="java.lang.Class loadClass(java.lang.String)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="java.io.InputStream getResourceAsStream(java.lang.String)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void postFrameCallback(android.view.Choreographer$FrameCallback)"></source><targets><direct subsignature="void doFrame(long)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setText(java.lang.CharSequence,android.widget.TextView$BufferType)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void layout(int,int,int,int)"></source><targets><indirect subsignature="void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)" index="-1" target-position="base"><direct subsignature="void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.google.android.gms.tasks.Task addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener)"></source><targets><direct subsignature="void onSuccess(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,int,android.database.Cursor,int)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndexOrThrow(java.lang.String)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection)&gt;"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="boolean remove(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean contains(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray(java.lang.Object[])" index="0" target-position="argument"></direct><direct subsignature="boolean removeAll(java.util.Collection)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="boolean containsAll(java.util.Collection)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="boolean addAll(java.util.Collection)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct><direct subsignature="boolean retainAll(java.util.Collection)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct><indirect subsignature="void &lt;init&gt;(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)" index="-1" target-position="base"><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setDividerDrawable(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="int getIntrinsicHeight()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.ComponentName resolveActivity(android.content.pm.PackageManager)"></source><targets><direct subsignature="android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.util.Rfc822Tokenizer: android.text.util.Rfc822Token[] tokenize(java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.support.v7.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)"></source><targets><direct subsignature="void onClick(android.content.DialogInterface,int)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setPreviewDisplay(android.view.SurfaceHolder)"></source><targets><direct subsignature="android.view.Surface getSurface()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.util.Xml: void parse(java.io.Reader,org.xml.sax.ContentHandler)&gt;"></source><targets><direct subsignature="int read(char[])" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)&gt;"></source><targets><direct subsignature="android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="2"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)"></source><targets><direct subsignature="void onAnimationUpdate(android.animation.ValueAnimator)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void readFromXml(org.xmlpull.v1.XmlPullParser)"></source><targets><direct subsignature="java.lang.String getName()" index="0" target-position="argument"></direct><direct subsignature="int getDepth()" index="0" target-position="argument"></direct><direct subsignature="int next()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getAttributeValue(java.lang.String,java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.telephony.gsm.SmsMessage: int[] calculateLength(java.lang.CharSequence,boolean)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)&gt;"></source><targets><direct subsignature="int read(byte[],int,int)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnRatingBarChangeListener(android.widget.RatingBar$OnRatingBarChangeListener)"></source><targets><direct subsignature="void onRatingChanged(android.widget.RatingBar,float,boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)"></source><targets><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener)"></source><targets><direct subsignature="boolean onSingleTapConfirmed(android.view.MotionEvent)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])&gt;"></source><targets><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)"></source><targets><direct subsignature="java.util.List getCertificates()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)&gt;"></source><targets><direct subsignature="int getOffset(long)" index="0" target-position="argument"></direct><direct subsignature="boolean inDaylightTime(java.util.Date)" index="0" target-position="argument"></direct><direct subsignature="int getRawOffset()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object clone()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.Notification$Builder setTicker(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean registerGnssStatusCallback(android.location.GnssStatus$Callback)"></source><targets><direct subsignature="void onStarted()" index="0" target-position="argument"></direct><direct subsignature="void onSatelliteStatusChanged(android.location.GnssStatus)" index="0" target-position="argument"></direct><direct subsignature="void onFirstFix(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)"></source><targets><direct subsignature="android.content.Loader onCreateLoader(int,android.os.Bundle)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: boolean moveLeft(android.text.Spannable,android.text.Layout)&gt;"></source><targets><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.concurrent.Future submit(java.lang.Runnable)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct><indirect subsignature="void &lt;init&gt;(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)" index="-1" target-position="base"><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.os.AsyncTask: void execute(java.lang.Runnable)&gt;"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: int indexOfSubList(java.util.List,java.util.List)&gt;"></source><targets><direct subsignature="int size()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)"></source><targets><direct subsignature="int size()" index="4" target-position="argument"></direct><direct subsignature="boolean offer(java.lang.Object)" index="4" target-position="argument"></direct><direct subsignature="boolean isEmpty()" index="4" target-position="argument"></direct><direct subsignature="java.lang.Object takeFirst()" index="4" target-position="argument"></direct><direct subsignature="java.lang.Object poll(long,java.util.concurrent.TimeUnit)" index="4" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="4" target-position="argument"></direct><direct subsignature="java.lang.Object take()" index="4" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.preference.PreferenceManager: void setDefaultValues(android.content.Context,int,boolean)&gt;"></source><targets><direct subsignature="android.content.SharedPreferences getSharedPreferences(java.lang.String,int)" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int show(android.app.FragmentTransaction,java.lang.String)"></source><targets><direct subsignature="int commit()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)&gt;"></source><targets><direct subsignature="boolean getBooleanParameter(java.lang.String,boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,int,int)"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.security.auth.Subject: java.lang.Object doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedAction,java.security.AccessControlContext)&gt;"></source><targets><direct subsignature="java.lang.Object run()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener,java.lang.String)"></source><targets><direct subsignature="android.content.pm.PackageManager getPackageManager()" index="0" target-position="argument"></direct><direct subsignature="void onInit(int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,int,android.database.Cursor,boolean)"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndexOrThrow(java.lang.String)" index="2" target-position="argument"></direct><direct subsignature="void registerDataSetObserver(android.database.DataSetObserver)" index="2" target-position="argument"></direct><direct subsignature="void registerContentObserver(android.database.ContentObserver)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean initSession(io.branch.referral.Branch$BranchReferralInitListener,android.net.Uri,android.app.Activity)"></source><targets><direct subsignature="void onInitFinished(org.json.JSONObject,io.branch.referral.BranchError)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)"></source><targets><direct subsignature="java.lang.String toString()" index="1" target-position="argument"></direct><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.prefs.Preferences: void importPreferences(java.io.InputStream)&gt;"></source><targets><direct subsignature="int read()" index="0" target-position="argument"></direct><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.concurrent.Executors: java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService)&gt;"></source><targets><direct subsignature="void beforeExecute(java.lang.Thread,java.lang.Runnable)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)"></source><targets><direct subsignature="float getInterpolation(float)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnKeyListener(android.content.DialogInterface$OnKeyListener)"></source><targets><direct subsignature="boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)"></source><targets><direct subsignature="void sendOrderedBroadcast(android.content.Intent,java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="android.content.Intent getIntent()" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.text.Editable insert(int,java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnLongClickListener(android.view.View$OnLongClickListener)"></source><targets><direct subsignature="boolean onLongClick(android.view.View)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setIssuerNames(java.util.Collection)"></source><targets><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="0" target-position="argument"></direct><direct subsignature="int getAttributeCount()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String nextText()" index="0" target-position="argument"></direct><direct subsignature="int next()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getAttributeName(int)" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getAttributeValue(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addHandler(java.util.logging.Handler)"></source><targets><direct subsignature="void publish(java.util.logging.LogRecord)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)&gt;"></source><targets><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.zip.ZipEntry getNextEntry()"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.Set newSetFromMap(java.util.Map)&gt;"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object put(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct><direct subsignature="java.util.Set keySet()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.Thread newThread(java.lang.Runnable)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)&gt;"></source><targets><direct subsignature="int compare(java.lang.Object,java.lang.Object)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setThumbDrawable(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="int getIntrinsicWidth()" index="0" target-position="argument"></direct><direct subsignature="void draw(android.graphics.Canvas)" index="0" target-position="argument"></direct><direct subsignature="boolean isStateful()" index="0" target-position="argument"></direct><direct subsignature="void jumpToCurrentState()" index="0" target-position="argument"></direct><direct subsignature="boolean getPadding(android.graphics.Rect)" index="0" target-position="argument"></direct><direct subsignature="int getIntrinsicHeight()" index="0" target-position="argument"></direct><direct subsignature="void setBounds(int,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeShort(int)"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void init(int,java.security.Key)"></source><targets><direct subsignature="byte[] getEncoded()" index="1" target-position="argument"></direct><direct subsignature="java.lang.String getFormat()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAdapter(android.widget.SpinnerAdapter)"></source><targets><direct subsignature="int getViewTypeCount()" index="0" target-position="argument"></direct><direct subsignature="long getItemId(int)" index="0" target-position="argument"></direct><direct subsignature="void unregisterDataSetObserver(android.database.DataSetObserver)" index="0" target-position="argument"></direct><direct subsignature="boolean hasStableIds()" index="0" target-position="argument"></direct><direct subsignature="int getCount()" index="0" target-position="argument"></direct><direct subsignature="android.view.View getView(int,android.view.View,android.view.ViewGroup)" index="0" target-position="argument"></direct><direct subsignature="int getItemViewType(int)" index="0" target-position="argument"></direct><direct subsignature="void registerDataSetObserver(android.database.DataSetObserver)" index="0" target-position="argument"></direct><direct subsignature="android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object getItem(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)"></source><targets><direct subsignature="void onChange(boolean,android.net.Uri)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct><direct subsignature="void onChange(boolean)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.CalendarContract$EventsEntity: android.content.EntityIterator newEntityIterator(android.database.Cursor,android.content.ContentProviderClient)&gt;"></source><targets><direct subsignature="boolean moveToFirst()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])"></source><targets><direct subsignature="void afterExecute(java.lang.Runnable,java.lang.Throwable)" index="0" target-position="argument"></direct><direct subsignature="void execute(java.lang.Runnable)" index="0" target-position="argument"></direct><direct subsignature="void beforeExecute(java.lang.Thread,java.lang.Runnable)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.google.protobuf.GeneratedMessageLite build()"></source><targets><indirect subsignature="void &lt;init&gt;(com.google.protobuf.GeneratedMessageLite)" index="-1" target-position="base"><direct subsignature="java.lang.Object dynamicMethod(com.google.protobuf.GeneratedMessageLite$MethodToInvoke,java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int setDataCaptureListener(android.media.audiofx.Visualizer$OnDataCaptureListener,int,boolean,boolean)"></source><targets><direct subsignature="void onFftDataCapture(android.media.audiofx.Visualizer,byte[],int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int drainTo(java.util.Collection)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object[] toArray()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeValue(java.io.OutputStream,java.lang.Object)"></source><targets><direct subsignature="byte[] toByteArray()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.concurrent.Callable)"></source><targets><direct subsignature="java.lang.Object call()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.os.Handler$Callback)"></source><targets><direct subsignature="boolean handleMessage(android.os.Message)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory,javax.net.ssl.X509TrustManager)"></source><targets><direct subsignature="java.security.cert.X509Certificate[] getAcceptedIssuers()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setValues(java.util.Set)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setStartElementListener(android.sax.StartElementListener)"></source><targets><direct subsignature="void start(org.xml.sax.Attributes)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)"></source><targets><direct subsignature="void onFocusChange(android.view.View,boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: boolean replaceAll(java.util.List,java.lang.Object,java.lang.Object)&gt;"></source><targets><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void beginObject()"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.Reader)" index="-1" target-position="base"><direct subsignature="int read(char[],int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.KeyStore$Builder: java.security.KeyStore$Builder newInstance(java.lang.String,java.security.Provider,java.security.KeyStore$ProtectionParameter)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="1" target-position="argument"></direct><direct subsignature="java.security.Provider$Service getService(java.lang.String,java.lang.String)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct><direct sourceIdx="0" targetIdx="1"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)"></source><targets><direct subsignature="kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)" index="3" target-position="argument"><parameterMappings><direct sourceIdx="5" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.Notification$Builder setSubText(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAdListener(com.google.ads.AdListener)"></source><targets><direct subsignature="void onFailedToReceiveAd(com.google.ads.Ad,com.google.ads.AdRequest$ErrorCode)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.OutputStream,java.util.jar.Manifest)"></source><targets><direct subsignature="void write(int)" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)"></source><targets><direct subsignature="void accept(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.lang.Character: int codePointAt(java.lang.CharSequence,int)&gt;"></source><targets><direct subsignature="char charAt(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean unregister(android.os.IInterface)"></source><targets><direct subsignature="android.os.IBinder asBinder()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.content.pm.ResolveInfo)"></source><targets><direct subsignature="android.content.pm.PackageManager getPackageManager()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addCompletionCallback(java.lang.Runnable)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addAll(java.util.Collection)"></source><targets><direct subsignature="java.lang.Object[] toArray()" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)&gt;"></source><targets><direct subsignature="void uncaughtException(java.lang.Thread,java.lang.Throwable)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater)"></source><targets><direct subsignature="void updateQuota(long)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.security.cert.X509Certificate)"></source><targets><direct subsignature="java.security.Principal getSubjectDN()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)"></source><targets><direct subsignature="void onItemClick(android.widget.AdapterView,android.view.View,int,long)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)"></source><targets><direct subsignature="java.lang.Object[] newArray(int)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object createFromParcel(android.os.Parcel)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorLongToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)&gt;"></source><targets><direct subsignature="boolean isNull(int)" index="0" target-position="argument"></direct><direct subsignature="long getLong(int)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndex(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="2" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"></source><targets><indirect subsignature="void &lt;init&gt;(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)" index="-1" target-position="base"><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="5" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect><direct subsignature="void run()" index="0" target-position="argument"></direct><indirect subsignature="void &lt;init&gt;(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)" index="-1" target-position="base"><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect><indirect subsignature="void &lt;init&gt;(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)" index="-1" target-position="base"><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="5" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="0"></direct></parameterMappings></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context)"></source><targets><direct subsignature="java.lang.ClassLoader getClassLoader()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object getSystemService(java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="android.content.Context getBaseContext()" index="0" target-position="argument"></direct><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct><direct subsignature="boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)" index="0" target-position="argument"></direct><direct subsignature="void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="java.io.File getDir(java.lang.String,int)" index="0" target-position="argument"></direct><direct subsignature="boolean onPrepareOptionsMenu(android.view.Menu)" index="0" target-position="argument"></direct><direct subsignature="java.io.File getObbDir()" index="0" target-position="argument"></direct><direct subsignature="void onNewIntent(android.content.Intent)" index="0" target-position="argument"></direct><direct subsignature="boolean onCreateOptionsMenu(android.view.Menu)" index="0" target-position="argument"></direct><direct subsignature="android.content.pm.ApplicationInfo getApplicationInfo()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String getPackageName()" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct><direct subsignature="void onBackPressed()" index="0" target-position="argument"></direct><direct subsignature="boolean onTouchEvent(android.view.MotionEvent)" index="0" target-position="argument"></direct><direct subsignature="boolean onOptionsItemSelected(android.view.MenuItem)" index="0" target-position="argument"></direct><direct subsignature="android.content.Context getApplicationContext()" index="0" target-position="argument"></direct><direct subsignature="android.content.pm.PackageManager getPackageManager()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setKeyListener(android.text.method.KeyListener)"></source><targets><direct subsignature="int getInputType()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int computeMessageSize(int,com.google.protobuf.MessageLite)"></source><targets><direct subsignature="int getSerializedSize()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorRowToContentValues(android.database.Cursor,android.content.ContentValues)&gt;"></source><targets><direct subsignature="java.lang.String[] getColumnNames()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void store(java.io.Writer,java.lang.String)"></source><targets><direct subsignature="void flush()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setEndElementListener(android.sax.EndElementListener)"></source><targets><direct subsignature="void end()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnQueryTextListener(android.widget.SearchView$OnQueryTextListener)"></source><targets><direct subsignature="boolean onQueryTextSubmit(java.lang.String)" index="0" target-position="argument"></direct><direct subsignature="boolean onQueryTextChange(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.OutputStream,java.nio.charset.Charset)"></source><targets><direct subsignature="void flush()" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)"></source><targets><direct subsignature="boolean isStateful()" index="3" target-position="argument"></direct><direct subsignature="void setBounds(int,int,int,int)" index="3" target-position="argument"></direct><direct subsignature="int getIntrinsicHeight()" index="3" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void load(java.io.InputStream)"></source><targets><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct><direct subsignature="int read(byte[])" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)"></source><targets><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.BoringLayout$Metrics)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.Runnable)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void createDbFromSqlStatements(android.content.Context,java.lang.String,int,java.lang.String)&gt;"></source><targets><direct subsignature="android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct><direct sourceIdx="3" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeEvaluator,java.lang.Object[])&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.google.android.gms.tasks.Task addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener)"></source><targets><direct subsignature="void onComplete(com.google.android.gms.tasks.Task)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)"></source><targets><direct subsignature="void flush()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable,java.lang.Object)&gt;"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.net.VpnService: android.content.Intent prepare(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.pm.PackageManager getPackageManager()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="io.reactivex.Observable filter(io.reactivex.functions.Predicate)"></source><targets><direct subsignature="boolean test(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)"></source><targets><direct subsignature="android.content.ContentResolver getContentResolver()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.ClipData newHtmlText(java.lang.CharSequence,java.lang.CharSequence,java.lang.String)"></source><targets><direct subsignature="java.lang.String toString()" index="1" target-position="argument"></direct><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setAdapter(androidx.recyclerview.widget.RecyclerView$Adapter)"></source><targets><direct subsignature="void onBindViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder,int)" index="0" target-position="argument"></direct><direct subsignature="androidx.recyclerview.widget.RecyclerView$ViewHolder onCreateViewHolder(android.view.ViewGroup,int)" index="0" target-position="argument"></direct><direct subsignature="long getItemId(int)" index="0" target-position="argument"></direct><direct subsignature="void registerAdapterDataObserver(androidx.recyclerview.widget.RecyclerView$AdapterDataObserver)" index="0" target-position="argument"></direct><direct subsignature="void onBindViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder,int,java.util.List)" index="0" target-position="argument"></direct><direct subsignature="void unregisterAdapterDataObserver(androidx.recyclerview.widget.RecyclerView$AdapterDataObserver)" index="0" target-position="argument"></direct><direct subsignature="int getItemCount()" index="0" target-position="argument"></direct><direct subsignature="int getItemViewType(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void append(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)&gt;"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)"></source><targets><direct subsignature="void finish()" index="0" target-position="argument"></direct><direct subsignature="boolean onTouchEvent(android.view.MotionEvent)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener)"></source><targets><direct subsignature="void onPageScrollStateChanged(int)" index="0" target-position="argument"></direct><direct subsignature="void onPageScrolled(int,float,int)" index="0" target-position="argument"></direct><direct subsignature="void onPageSelected(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)"></source><targets><direct subsignature="java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.graphics.Rect getDefaultPaddingForWidget(android.content.Context,android.content.ComponentName,android.graphics.Rect)"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean postAtTime(java.lang.Runnable,java.lang.Object,long)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)&gt;"></source><targets><direct subsignature="boolean isNull(int)" index="0" target-position="argument"></direct><direct subsignature="int getInt(int)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndex(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)&gt;"></source><targets><direct subsignature="int next()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.security.KeyChain: java.security.PrivateKey getPrivateKey(android.content.Context,java.lang.String)&gt;"></source><targets><direct subsignature="android.content.Context getApplicationContext()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void save(java.io.OutputStream,boolean)"></source><targets><direct subsignature="void flush()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.method.TextKeyListener: void clear(android.text.Editable)&gt;"></source><targets><direct subsignature="void clear()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.Map)"></source><targets><direct subsignature="boolean isEmpty()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object put(java.lang.Object,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Set entrySet()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object remove(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="boolean containsKey(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Comparator comparator()" index="0" target-position="argument"></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct><direct subsignature="java.util.Set keySet()" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.security.Security: int addProvider(java.security.Provider)&gt;"></source><targets><direct subsignature="java.lang.String getName()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.io.OutputStream,java.security.MessageDigest)"></source><targets><direct subsignature="byte[] engineDigest()" index="1" target-position="argument"></direct><direct subsignature="void write(int)" index="0" target-position="argument"></direct><direct subsignature="byte[] toByteArray()" index="0" target-position="argument"></direct><direct subsignature="void flush()" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.List,java.lang.String)"></source><targets><direct subsignature="boolean add(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.util.Iterator iterator()" index="0" target-position="argument"></direct><direct subsignature="void clear()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.google.protobuf.GeneratedMessageLite$Builder createBuilder()"></source><targets><indirect subsignature="void registerDefaultInstance(java.lang.Class,com.google.protobuf.GeneratedMessageLite)" index="-1" target-position="base"><direct subsignature="java.lang.Object dynamicMethod(com.google.protobuf.GeneratedMessageLite$MethodToInvoke,java.lang.Object,java.lang.Object)" index="1" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(org.w3c.dom.Node)"></source><targets><direct subsignature="org.w3c.dom.Node getFirstChild()" index="0" target-position="argument"></direct><direct subsignature="short getNodeType()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)&gt;"></source><targets><direct subsignature="org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)"></source><targets><direct subsignature="void onTabChanged(java.lang.String)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.telephony.SmsMessage: int[] calculateLength(java.lang.CharSequence,boolean)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeInt(int)"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.OutputStream)" index="-1" target-position="base"><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="com.bumptech.glide.request.target.Target into(com.bumptech.glide.request.target.Target)"></source><targets><direct subsignature="void onResourceReady(java.lang.Object,com.bumptech.glide.request.transition.Transition)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void createNotificationChannelGroups(java.util.List)"></source><targets><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)"></source><targets><direct subsignature="java.lang.String getPackageName()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.TimeZone: void setDefault(java.util.TimeZone)&gt;"></source><targets><direct subsignature="java.lang.Object clone()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)&gt;"></source><targets><direct subsignature="android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)" index="1" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="2"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addOnScrollListener(androidx.recyclerview.widget.RecyclerView$OnScrollListener)"></source><targets><direct subsignature="void onScrollStateChanged(androidx.recyclerview.widget.RecyclerView,int)" index="0" target-position="argument"></direct><direct subsignature="void onScrolled(androidx.recyclerview.widget.RecyclerView,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setThreadFactory(java.util.concurrent.ThreadFactory)"></source><targets><direct subsignature="java.lang.Thread newThread(java.lang.Runnable)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.view.animation.AnimationUtils: android.view.animation.Animation makeInAnimation(android.content.Context,boolean)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setBackgroundDrawable(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="int getAlpha()" index="0" target-position="argument"></direct><direct subsignature="void draw(android.graphics.Canvas)" index="0" target-position="argument"></direct><direct subsignature="void setColor(int)" index="0" target-position="argument"></direct><direct subsignature="void jumpToCurrentState()" index="0" target-position="argument"></direct><direct subsignature="boolean getPadding(android.graphics.Rect)" index="0" target-position="argument"></direct><direct subsignature="void invalidateSelf()" index="0" target-position="argument"></direct><direct subsignature="void onBoundsChange(android.graphics.Rect)" index="0" target-position="argument"></direct><direct subsignature="int getIntrinsicWidth()" index="0" target-position="argument"></direct><direct subsignature="void onDraw(android.graphics.drawable.shapes.Shape,android.graphics.Canvas,android.graphics.Paint)" index="0" target-position="argument"></direct><direct subsignature="boolean setState(int[])" index="0" target-position="argument"></direct><direct subsignature="boolean onStateChange(int[])" index="0" target-position="argument"></direct><direct subsignature="boolean onLevelChange(int)" index="0" target-position="argument"></direct><direct subsignature="void setBounds(int,int,int,int)" index="0" target-position="argument"></direct><direct subsignature="int getMinimumWidth()" index="0" target-position="argument"></direct><direct subsignature="boolean setVisible(boolean,boolean)" index="0" target-position="argument"></direct><direct subsignature="int getOpacity()" index="0" target-position="argument"></direct><direct subsignature="android.graphics.drawable.Drawable getCurrent()" index="0" target-position="argument"></direct><direct subsignature="android.graphics.drawable.Drawable$Callback getCallback()" index="0" target-position="argument"></direct><direct subsignature="void setColorFilter(android.graphics.ColorFilter)" index="0" target-position="argument"></direct><direct subsignature="void setBounds(android.graphics.Rect)" index="0" target-position="argument"></direct><direct subsignature="void getOutline(android.graphics.Outline)" index="0" target-position="argument"></direct><direct subsignature="int getMinimumHeight()" index="0" target-position="argument"></direct><direct subsignature="android.graphics.drawable.Drawable$ConstantState getConstantState()" index="0" target-position="argument"></direct><direct subsignature="boolean isStateful()" index="0" target-position="argument"></direct><direct subsignature="android.graphics.drawable.Drawable mutate()" index="0" target-position="argument"></direct><direct subsignature="int getColor()" index="0" target-position="argument"></direct><direct subsignature="int getLayoutDirection()" index="0" target-position="argument"></direct><direct subsignature="void setGravity(int)" index="0" target-position="argument"></direct><direct subsignature="int getIntrinsicHeight()" index="0" target-position="argument"></direct><direct subsignature="android.graphics.Rect getDirtyBounds()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)"></source><targets><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct><direct subsignature="int read(byte[])" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])&gt;"></source><targets><direct subsignature="java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)" index="2" target-position="argument"><parameterMappings><direct sourceIdx="0" targetIdx="1"></direct><direct sourceIdx="0" targetIdx="2"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeBundle(android.os.Bundle)"></source><targets><indirect subsignature="void writeStrongBinder(android.os.IBinder)" index="-1" target-position="base"><direct subsignature="boolean dispatchTransaction(int,android.os.Parcel,android.os.Parcel,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: boolean extendToRightEdge(android.text.Spannable,android.text.Layout)&gt;"></source><targets><direct subsignature="java.lang.Object[] getSpans(int,int,java.lang.Class)" index="0" target-position="argument"></direct><direct subsignature="void removeSpan(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="void setSpan(java.lang.Object,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)&gt;"></source><targets><direct subsignature="java.lang.ClassLoader getClassLoader()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)"></source><targets><direct subsignature="void onCompletion(android.media.MediaPlayer)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.util.concurrent.Executor)"></source><targets><direct subsignature="void execute(java.lang.Runnable)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean post(java.lang.Runnable)"></source><targets><direct subsignature="void done()" index="0" target-position="argument"></direct><direct subsignature="void run()" index="0" target-position="argument"></direct><direct subsignature="void set(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: boolean extendToLeftEdge(android.text.Spannable,android.text.Layout)&gt;"></source><targets><direct subsignature="void removeSpan(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setText(java.lang.CharSequence)"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="int getSpanFlags(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int getSpanEnd(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="void getChars(int,int,char[],int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor)&gt;"></source><targets><direct subsignature="int getPosition()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String[] getColumnNames()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)"></source><targets><direct subsignature="void onClick(android.content.DialogInterface,int)" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)"></source><targets><direct subsignature="android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.provider.ContactsContract$CommonDataKinds$Email: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="2" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void putParcelable(java.lang.String,android.os.Parcelable)"></source><targets><direct subsignature="void writeToParcel(android.os.Parcel,int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOutput(java.io.OutputStream,java.lang.String)"></source><targets><direct subsignature="void flush()" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.content.ClipData: android.content.ClipData newRawUri(java.lang.CharSequence,android.net.Uri)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="0" target-position="argument"></direct><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.security.KeyChain: java.security.cert.X509Certificate[] getCertificateChain(android.content.Context,java.lang.String)&gt;"></source><targets><direct subsignature="android.content.Context getApplicationContext()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean contentEquals(java.lang.CharSequence)"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="int read(char[],int,int)"></source><targets><indirect subsignature="void &lt;init&gt;(java.io.Reader,int)" index="-1" target-position="base"><direct subsignature="int read(char[],int,int)" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.Reader,int)" index="-1" target-position="base"><direct subsignature="boolean ready()" index="0" target-position="argument"></direct></indirect><indirect subsignature="void &lt;init&gt;(java.io.InputStream)" index="-1" target-position="base"><direct subsignature="int available()" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.view.animation.AnimationUtils: android.view.animation.Animation makeInChildBottomAnimation(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorDoubleToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)&gt;"></source><targets><direct subsignature="boolean isNull(int)" index="0" target-position="argument"></direct><direct subsignature="double getDouble(int)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndex(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="2" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.appwidget.AppWidgetHostView createView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: void reverse(java.util.List)&gt;"></source><targets><direct subsignature="java.lang.Object set(int,java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object get(int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)&gt;"></source><targets><direct subsignature="int read(byte[],int,int)" index="0" target-position="argument"></direct><direct subsignature="void close()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)"></source><targets><direct subsignature="int length()" index="1" target-position="argument"></direct><direct subsignature="java.lang.Object[] getSpans(int,int,java.lang.Class)" index="1" target-position="argument"></direct><direct subsignature="void setSpan(java.lang.Object,int,int,int)" index="1" target-position="argument"></direct><direct subsignature="void getChars(int,int,char[],int)" index="1" target-position="argument"></direct><direct subsignature="int nextSpanTransition(int,int,java.lang.Class)" index="1" target-position="argument"></direct><direct subsignature="char charAt(int)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.lang.StringBuilder)&gt;"></source><targets><direct subsignature="int getPosition()" index="0" target-position="argument"></direct><direct subsignature="java.lang.String[] getColumnNames()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void verify(java.lang.String,javax.net.ssl.SSLSocket)"></source><targets><direct subsignature="javax.net.ssl.SSLSession getSession()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)&gt;"></source><targets><direct subsignature="org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: boolean extendRight(android.text.Spannable,android.text.Layout)&gt;"></source><targets><direct subsignature="void removeSpan(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct><direct subsignature="void setSpan(java.lang.Object,int,int,int)" index="0" target-position="argument"></direct><direct subsignature="int nextSpanTransition(int,int,java.lang.Class)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(org.xml.sax.AttributeList)"></source><targets><direct subsignature="int getLength()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.TextUtils: boolean isGraphic(java.lang.CharSequence)&gt;"></source><targets><direct subsignature="int length()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorFloatToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)&gt;"></source><targets><direct subsignature="boolean isNull(int)" index="0" target-position="argument"></direct><direct subsignature="float getFloat(int)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndex(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="2" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)"></source><targets><direct subsignature="void run()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setWallpaper(java.io.InputStream)"></source><targets><direct subsignature="int read(byte[])" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)&gt;"></source><targets><direct subsignature="void onNewIntent(android.content.Intent)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void &lt;init&gt;(android.content.Context,android.view.GestureDetector$OnGestureListener)"></source><targets><direct subsignature="void onLongPress(android.view.MotionEvent)" index="1" target-position="argument"></direct><direct subsignature="boolean onSingleTapUp(android.view.MotionEvent)" index="1" target-position="argument"></direct><direct subsignature="void onShowPress(android.view.MotionEvent)" index="1" target-position="argument"></direct><direct subsignature="boolean onDown(android.view.MotionEvent)" index="1" target-position="argument"></direct><direct subsignature="boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void save(java.io.OutputStream)"></source><targets><direct subsignature="void flush()" index="0" target-position="argument"></direct><direct subsignature="void write(byte[],int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)"></source><targets><direct subsignature="void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addAnimation(android.view.animation.Animation)"></source><targets><direct subsignature="boolean getTransformation(long,android.view.animation.Transformation,float)" index="0" target-position="argument"></direct><direct subsignature="void reset()" index="0" target-position="argument"></direct><direct subsignature="void setStartTime(long)" index="0" target-position="argument"></direct><direct subsignature="void setFillAfter(boolean)" index="0" target-position="argument"></direct><direct subsignature="void initialize(int,int,int,int)" index="0" target-position="argument"></direct><direct subsignature="boolean willChangeBounds()" index="0" target-position="argument"></direct><direct subsignature="boolean hasStarted()" index="0" target-position="argument"></direct><direct subsignature="boolean hasEnded()" index="0" target-position="argument"></direct><direct subsignature="void setDuration(long)" index="0" target-position="argument"></direct><direct subsignature="boolean isFillEnabled()" index="0" target-position="argument"></direct><direct subsignature="long getStartOffset()" index="0" target-position="argument"></direct><direct subsignature="long getDuration()" index="0" target-position="argument"></direct><direct subsignature="boolean willChangeTransformationMatrix()" index="0" target-position="argument"></direct><direct subsignature="void setInterpolator(android.view.animation.Interpolator)" index="0" target-position="argument"></direct><direct subsignature="float resolveSize(int,float,int,int)" index="0" target-position="argument"></direct><direct subsignature="void applyTransformation(float,android.view.animation.Transformation)" index="0" target-position="argument"></direct><direct subsignature="float getScaleFactor()" index="0" target-position="argument"></direct><direct subsignature="boolean getTransformation(long,android.view.animation.Transformation)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="boolean register(android.os.IInterface)"></source><targets><direct subsignature="android.os.IBinder asBinder()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void addTextChangedListener(android.text.TextWatcher)"></source><targets><direct subsignature="void afterTextChanged(android.text.Editable)" index="0" target-position="argument"></direct><direct subsignature="void beforeTextChanged(java.lang.CharSequence,int,int,int)" index="0" target-position="argument"></direct><direct subsignature="void onTextChanged(java.lang.CharSequence,int,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnTimeChangedListener(android.widget.TimePicker$OnTimeChangedListener)"></source><targets><direct subsignature="void onTimeChanged(android.widget.TimePicker,int,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)&gt;"></source><targets><direct subsignature="boolean isNull(int)" index="0" target-position="argument"></direct><direct subsignature="int getInt(int)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndex(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="1" targetIdx="0"></direct><direct sourceIdx="3" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)&gt;"></source><targets><direct subsignature="android.content.res.Resources getResources()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setDivider(android.graphics.drawable.Drawable)"></source><targets><direct subsignature="int getOpacity()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.database.DatabaseUtils: void cursorIntToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)&gt;"></source><targets><direct subsignature="boolean isNull(int)" index="0" target-position="argument"></direct><direct subsignature="int getInt(int)" index="0" target-position="argument"></direct><direct subsignature="int getColumnIndex(java.lang.String)" index="0" target-position="argument"><parameterMappings><direct sourceIdx="2" targetIdx="0"></direct></parameterMappings></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.text.Selection: boolean moveDown(android.text.Spannable,android.text.Layout)&gt;"></source><targets><direct subsignature="int getSpanStart(java.lang.Object)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)&gt;"></source><targets><direct subsignature="int getOffset(long)" index="0" target-position="argument"></direct><direct subsignature="boolean inDaylightTime(java.util.Date)" index="0" target-position="argument"></direct><direct subsignature="int getRawOffset()" index="0" target-position="argument"></direct><direct subsignature="java.lang.Object clone()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="java.io.StringWriter append(java.lang.CharSequence,int,int)"></source><targets><indirect subsignature="java.io.StringWriter append(java.lang.CharSequence,int,int)" index="-1" target-position="base"><direct subsignature="java.lang.CharSequence subSequence(int,int)" index="0" target-position="argument"></direct></indirect></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean,android.content.DialogInterface$OnCancelListener)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="2" target-position="argument"></direct><direct subsignature="int length()" index="2" target-position="argument"></direct><direct subsignature="android.content.res.Resources$Theme getTheme()" index="0" target-position="argument"></direct><direct subsignature="void onCancel(android.content.DialogInterface)" index="5" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void writeParcelable(android.os.Parcelable,int)"></source><targets><direct subsignature="void writeToParcel(android.os.Parcel,int)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;java.util.Collections: void shuffle(java.util.List)&gt;"></source><targets><direct subsignature="int size()" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="static" signature="&lt;android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)&gt;"></source><targets><direct subsignature="java.lang.String toString()" index="1" target-position="argument"></direct><direct subsignature="int length()" index="1" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)"></source><targets><direct subsignature="void onCancel(android.content.DialogInterface)" index="0" target-position="argument"></direct></targets></edge><edge type="GENERIC_FAKE"><source invoketype="instance" subsignature="void setOnScrollListener(android.support.v7.widget.RecyclerView$OnScrollListener)"></source><targets><direct subsignature="void onScrollStateChanged(android.support.v7.widget.RecyclerView,int)" index="0" target-position="argument"></direct><direct subsignature="void onScrolled(android.support.v7.widget.RecyclerView,int,int)" index="0" target-position="argument"></direct></targets></edge></virtualedges>