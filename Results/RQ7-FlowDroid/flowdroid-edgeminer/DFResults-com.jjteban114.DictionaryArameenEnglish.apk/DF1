Source: $i1 = virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: int read()>()
$i1 = virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: int read()>() in <gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $i1 = virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: int read()>()
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>($i1, 80, $r4)
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: i2 = $i0
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: return
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r6 = $r2.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: specialinvoke $r26.<java.lang.String: void <init>(char[],int,int)>($r6, $i0, $i1)
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r5 = virtualinvoke $r26.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r7 = staticinvoke <gnu.expr.Keyword: gnu.expr.Keyword make(java.lang.String)>($r5)
<gnu.expr.Keyword: gnu.expr.Keyword make(java.lang.String)>: specialinvoke $r3.<gnu.expr.Keyword: void <init>(java.lang.String)>($r0)
<gnu.expr.Keyword: void <init>(java.lang.String)>: specialinvoke r0.<gnu.mapping.Symbol: void <init>(gnu.mapping.Namespace,java.lang.String)>($r2, $r1)
<gnu.mapping.Symbol: void <init>(gnu.mapping.Namespace,java.lang.String)>: r0.<gnu.mapping.Symbol: java.lang.String name> = $r2
<gnu.mapping.Symbol: void <init>(gnu.mapping.Namespace,java.lang.String)>: return
<gnu.expr.Keyword: void <init>(java.lang.String)>: return
<gnu.expr.Keyword: gnu.expr.Keyword make(java.lang.String)>: r4 = $r3
<gnu.expr.Keyword: gnu.expr.Keyword make(java.lang.String)>: return r4
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r7
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r8 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r7, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r6 = <gnu.mapping.Values: gnu.mapping.Values empty>
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r6
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: return $r9
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.ReaderParens: java.lang.Object readList(gnu.kawa.lispexpr.LispReader,int,int,int)>: $r9 = virtualinvoke $r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>($r9, $r4, $i4, i7)
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: r3 = <gnu.mapping.Values: gnu.mapping.Values empty>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: return r3
<gnu.kawa.lispexpr.ReaderParens: java.lang.Object readList(gnu.kawa.lispexpr.LispReader,int,int,int)>: r11 = $r9
<gnu.kawa.lispexpr.ReaderParens: java.lang.Object readList(gnu.kawa.lispexpr.LispReader,int,int,int)>: $r3 = r11
<gnu.kawa.lispexpr.ReaderParens: java.lang.Object readList(gnu.kawa.lispexpr.LispReader,int,int,int)>: return $r3
<gnu.kawa.lispexpr.ReaderParens: java.lang.Object read(gnu.text.Lexer,int,int)>: r4 = $r3
<gnu.kawa.lispexpr.ReaderParens: java.lang.Object read(gnu.text.Lexer,int,int)>: return r4
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r5
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r5
<gnu.mapping.TtyInPort: void lineStart(boolean)>: throw $r6
<gnu.text.LineBufferedReader: int read()>: $r1 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int read()>: $c1 = $r1[$i2]
<gnu.text.LineBufferedReader: int read()>: $i0 = (int) $c1
<gnu.text.LineBufferedReader: int read()>: return $i0
<com.google.appinventor.components.runtime.util.YailDictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>: return $r1
<gnu.kawa.reflect.FieldLocation: java.lang.Object getFieldValue()>: return $r2
<gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>: r0.<gnu.kawa.reflect.FieldLocation: java.lang.Object value> = $r2
<gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>: return $r1
<gnu.kawa.reflect.StaticFieldLocation: java.lang.Object get(java.lang.Object)>: r0 := @this: gnu.kawa.reflect.StaticFieldLocation
<gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>: $r2 = r0.<gnu.mapping.PlainLocation: gnu.mapping.Location base>
<gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>: r0 := @this: gnu.mapping.PlainLocation
<gnu.mapping.Location: java.lang.Object getValue()>: r0 := @this: gnu.mapping.Location
<gnu.mapping.NamedLocation: boolean equals(java.lang.Object)>: r0 := @this: gnu.mapping.NamedLocation
<gnu.mapping.Location: java.lang.String toString()>: $r5 = virtualinvoke r0.<gnu.mapping.Location: java.lang.Object getKeyProperty()>()
<gnu.mapping.NamedLocation: java.lang.Object getKeyProperty()>: $r1 = r0.<gnu.mapping.NamedLocation: java.lang.Object property>
<gnu.mapping.NamedLocation: java.lang.Object getKeyProperty()>: return $r1
<gnu.mapping.Location: java.lang.String toString()>: return $r3
<gnu.kawa.reflect.SlotSet: void apply(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>: throw $r25
<gnu.kawa.reflect.Invoke: java.lang.Object applyN(java.lang.Object[])>: return $r5
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: return $r3
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
