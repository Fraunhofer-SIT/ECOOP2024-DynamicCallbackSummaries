    public final o.FileExtension$RemoteActionCompatParcelizer RemoteActionCompatParcelizer(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r8;
        o.FileExtension$RemoteActionCompatParcelizer $r6;
        java.lang.IllegalStateException $r7;
        java.util.LinkedHashMap $r4;
        o.FileExtension$AudioAttributesCompatParcelizer $r5;
        o.FileExtension r0;
        java.io.Writer $r3;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: o.FileExtension;

        $r2 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = r0.<o.FileExtension: java.io.Writer RemoteActionCompatParcelizer>;

        if $r3 == null goto label6;

        $r4 = r0.<o.FileExtension: java.util.LinkedHashMap RatingCompat>;

        $r1 = virtualinvoke $r4.<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (o.FileExtension$AudioAttributesCompatParcelizer) $r1;

        if $r5 != null goto label2;

        $r5 = new o.FileExtension$AudioAttributesCompatParcelizer;

        specialinvoke $r5.<o.FileExtension$AudioAttributesCompatParcelizer: void <init>(o.FileExtension,java.lang.String,byte)>(r0, $r2, 0);

        $r4 = r0.<o.FileExtension: java.util.LinkedHashMap RatingCompat>;

        virtualinvoke $r4.<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r5);

        goto label4;

     label2:
        $r6 = $r5.<o.FileExtension$AudioAttributesCompatParcelizer: o.FileExtension$RemoteActionCompatParcelizer write>;

     label3:
        if $r6 == null goto label4;

        exitmonitor r0;

        return null;

     label4:
        $r6 = new o.FileExtension$RemoteActionCompatParcelizer;

        specialinvoke $r6.<o.FileExtension$RemoteActionCompatParcelizer: void <init>(o.FileExtension,o.FileExtension$AudioAttributesCompatParcelizer,byte)>(r0, $r5, 0);

        $r5.<o.FileExtension$AudioAttributesCompatParcelizer: o.FileExtension$RemoteActionCompatParcelizer write> = $r6;

        $r3 = r0.<o.FileExtension: java.io.Writer RemoteActionCompatParcelizer>;

        virtualinvoke $r3.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("DIRTY");

        $r3 = r0.<o.FileExtension: java.io.Writer RemoteActionCompatParcelizer>;

        virtualinvoke $r3.<java.io.Writer: java.io.Writer append(char)>(32);

        $r3 = r0.<o.FileExtension: java.io.Writer RemoteActionCompatParcelizer>;

        virtualinvoke $r3.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r2);

        $r3 = r0.<o.FileExtension: java.io.Writer RemoteActionCompatParcelizer>;

        virtualinvoke $r3.<java.io.Writer: java.io.Writer append(char)>(10);

        $r3 = r0.<o.FileExtension: java.io.Writer RemoteActionCompatParcelizer>;

        staticinvoke <o.FileExtension: void AudioAttributesCompatParcelizer(java.io.Writer)>($r3);

     label5:
        exitmonitor r0;

        return $r6;

     label6:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cache is closed");

        throw $r7;

     label7:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }
