    private void read(java.lang.String)
    {
        java.lang.Throwable $r5;
        java.util.HashMap $r1, $r2;
        long $l0;
        java.lang.Integer $r4;
        o.ai r0;
        int $i1, $i2;
        java.lang.String $r3;

        r0 := @this: o.ai;

        $r3 := @parameter0: java.lang.String;

        if $r3 != null goto label1;

        return;

     label1:
        $r1 = r0.<o.ai: java.util.HashMap write>;

        entermonitor $r1;

     label2:
        $r2 = r0.<o.ai: java.util.HashMap write>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = $l0 / 1000L;

        $i1 = (int) $l0;

        $i2 = virtualinvoke r0.<o.ai: int write(java.lang.String,int)>("local_cache_expires_in", 0);

        $i1 = $i1 + $i2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r2.<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

     label3:
        exitmonitor $r1;

        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
    }
