    public final o.FileExtension$IconCompatParcelizer IconCompatParcelizer(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r13;
        java.lang.IllegalStateException $r12;
        java.util.concurrent.ThreadPoolExecutor $r10;
        java.util.concurrent.Callable $r11;
        long $l2;
        java.util.LinkedHashMap $r5;
        o.FileExtension$AudioAttributesCompatParcelizer $r7;
        long[] $r1;
        o.FileExtension r0;
        int $i0, $i1;
        java.lang.String $r3;
        boolean $z0;
        java.io.File $r9;
        o.FileExtension$IconCompatParcelizer $r2;
        java.io.Writer $r4;
        java.lang.Object $r6;
        java.io.File[] $r8;

        r0 := @this: o.FileExtension;

        $r3 := @parameter0: java.lang.String;

        entermonitor r0;

     label01:
        $r4 = r0.<o.FileExtension: java.io.Writer RemoteActionCompatParcelizer>;

        if $r4 == null goto label12;

        $r5 = r0.<o.FileExtension: java.util.LinkedHashMap RatingCompat>;

        $r6 = virtualinvoke $r5.<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>($r3);

        $r7 = (o.FileExtension$AudioAttributesCompatParcelizer) $r6;

     label02:
        if $r7 != null goto label03;

        exitmonitor r0;

        return null;

     label03:
        $z0 = $r7.<o.FileExtension$AudioAttributesCompatParcelizer: boolean AudioAttributesImplBaseParcelizer>;

     label04:
        if $z0 != 0 goto label05;

        exitmonitor r0;

        return null;

     label05:
        $r8 = $r7.<o.FileExtension$AudioAttributesCompatParcelizer: java.io.File[] IconCompatParcelizer>;

        $i0 = lengthof $r8;

        $i1 = 0;

     label06:
        if $i1 >= $i0 goto label09;

        $r9 = $r8[$i1];

        $z0 = virtualinvoke $r9.<java.io.File: boolean exists()>();

     label07:
        if $z0 != 0 goto label08;

        exitmonitor r0;

        return null;

     label08:
        $i1 = $i1 + 1;

        goto label06;

     label09:
        $i0 = r0.<o.FileExtension: int write>;

        $i0 = $i0 + 1;

        r0.<o.FileExtension: int write> = $i0;

        $r4 = r0.<o.FileExtension: java.io.Writer RemoteActionCompatParcelizer>;

        virtualinvoke $r4.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("READ");

        $r4 = r0.<o.FileExtension: java.io.Writer RemoteActionCompatParcelizer>;

        virtualinvoke $r4.<java.io.Writer: java.io.Writer append(char)>(32);

        $r4 = r0.<o.FileExtension: java.io.Writer RemoteActionCompatParcelizer>;

        virtualinvoke $r4.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r3);

        $r4 = r0.<o.FileExtension: java.io.Writer RemoteActionCompatParcelizer>;

        virtualinvoke $r4.<java.io.Writer: java.io.Writer append(char)>(10);

        $z0 = virtualinvoke r0.<o.FileExtension: boolean IconCompatParcelizer()>();

        if $z0 == 0 goto label10;

        $r10 = r0.<o.FileExtension: java.util.concurrent.ThreadPoolExecutor MediaBrowserCompat$ItemReceiver>;

        $r11 = r0.<o.FileExtension: java.util.concurrent.Callable MediaBrowserCompat$CustomActionResultReceiver>;

        virtualinvoke $r10.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r11);

     label10:
        $r2 = new o.FileExtension$IconCompatParcelizer;

        $l2 = $r7.<o.FileExtension$AudioAttributesCompatParcelizer: long MediaBrowserCompat$CustomActionResultReceiver>;

        $r8 = $r7.<o.FileExtension$AudioAttributesCompatParcelizer: java.io.File[] IconCompatParcelizer>;

        $r1 = $r7.<o.FileExtension$AudioAttributesCompatParcelizer: long[] AudioAttributesCompatParcelizer>;

        specialinvoke $r2.<o.FileExtension$IconCompatParcelizer: void <init>(o.FileExtension,java.lang.String,long,java.io.File[],long[])>(r0, $r3, $l2, $r8, $r1);

     label11:
        exitmonitor r0;

        return $r2;

     label12:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cache is closed");

        throw $r12;

     label13:
        $r13 := @caughtexception;

        exitmonitor r0;

        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label07 with label13;
        catch java.lang.Throwable from label09 to label11 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
    }
