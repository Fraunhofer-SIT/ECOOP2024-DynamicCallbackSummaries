[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loading sources and sinks from SourcesSinks/UnconstrainedSourcesSinks.xml...
[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loaded 273 sources and 91 sinks from the XML file
[main] INFO soot.jimple.infoflow.android.SetupApplication - Initializing Soot...
[main] WARN soot.Scene - Android API version '30' not available, using minApkVersion '21' instead
[main] INFO soot.jimple.infoflow.android.SetupApplication - Loading dex files...
[main] INFO soot.jimple.infoflow.android.SetupApplication - ARSC file parsing took 0.0807596 seconds
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230.400 MiB
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 37 components...
[main] WARN soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Cannot generate constructor for phantom class androidx.core.content.FileProvider
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[FlowDroid Timeout Watcher] WARN soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - Timeout reached, stopping the solvers...
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Collecting callbacks in DEFAULT mode...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Callback analysis done.
[main] WARN soot.jimple.infoflow.android.SetupApplication - Aborted callback collection because of low memory
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] WARN soot.jimple.infoflow.android.SetupApplication - Callback analysis aborted early due to time or memory exhaustion
[main] INFO soot.jimple.infoflow.android.SetupApplication - Entry point calculation done.
[main] INFO soot.jimple.infoflow.android.source.AccessPathBasedSourceSinkManager - Created a SourceSinkManager with 273 sources, 91 sinks, and 0 callback methods.
[main] INFO soot.jimple.infoflow.android.SetupApplication - Collecting callbacks and building a callgraph took 1855 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication - Running data flow analysis on storagepath2-data/androidApps/2022-AndroZoo-PlayStore/com.anyhelp24hr.Best_Money_FREE_Online.apk with 273 sources and 91 sinks...
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Implicit flow tracking is NOT enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Exceptional flow tracking is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Running with a maximum access path length of 5
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using path-agnostic result collection
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Recursive access path shortening is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Taint analysis enabled: true
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using alias algorithm FlowSensitive
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230.400 MiB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph construction took 0 seconds
[main] INFO soot.jimple.infoflow.codeOptimization.InterproceduralConstantValuePropagator - Removing side-effect free methods is disabled
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Dead code elimination took 23.30601542 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph has 212449 edges
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Starting Taint Analysis
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] WARN soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Running with limited join point abstractions can break context-sensitive path builders
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Looking for sources and sinks...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Source lookup done, found 171 sources and 337 sinks.
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.IndirectableLocation: gnu.mapping.Location base>, <gnu.kawa.reflect.FieldLocation: java.lang.Object value>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.IndirectableLocation: gnu.mapping.Location base>, <gnu.kawa.reflect.FieldLocation: java.lang.Object value>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.UnboundLocationException: java.lang.Object symbol>, <gnu.mapping.IndirectableLocation: gnu.mapping.Location base>, <gnu.kawa.reflect.FieldLocation: java.lang.Object value>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.UnboundLocationException: java.lang.Object symbol>, <gnu.mapping.IndirectableLocation: gnu.mapping.Location base>, <gnu.kawa.reflect.FieldLocation: java.lang.Object value>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<java.math.BigDecimal: java.lang.Object value>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<java.math.BigDecimal: java.lang.Object value>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.UnboundLocationException: gnu.mapping.Location location>, <gnu.mapping.NamedLocation: java.lang.Object property>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.UnboundLocationException: gnu.mapping.Location location>, <gnu.mapping.NamedLocation: java.lang.Object property>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<java.math.BigDecimal: java.lang.Object value>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.RunnableClosure: java.lang.Object result>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] ERROR soot.jimple.infoflow.data.AccessPathFactory - Access paths cannot be rooted in values of type soot.jimple.NullConstant
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.Future: gnu.mapping.RunnableClosure closure>, <gnu.mapping.RunnableClosure: java.lang.Object result>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid Timeout Watcher] WARN soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - Timeout reached, stopping the solvers...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper hits: 6988261
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper misses: 21623728
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - IFDS problem with 13300567 forward and 32727655 backward edges solved in 899 seconds, processing 50 results...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Current memory consumption: 32656 MB
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after cleanup: 6654 MB
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 1 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 2 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 3 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 4 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 5 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 6 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 7 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 8 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 9 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 10 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after path building: 16506 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Path reconstruction took 611 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r6, 0, $i0) in method <com.startapp.android.publish.ads.video.c: void a(java.io.File,java.io.File)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r6) in method <com.startapp.android.publish.ads.video.c: void a(java.io.File,java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.android.publish.ads.video.c: void a(java.io.File,java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r6)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.android.publish.ads.video.c: void a(java.io.File,java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r6, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r20.<java.io.FileOutputStream: void write(byte[],int,int)>($r19, 0, $i4) in method <com.startapp.android.publish.ads.video.c: java.lang.String a(android.content.Context,java.net.URL,java.lang.String,com.startapp.android.publish.ads.video.c$a)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i4 = virtualinvoke $r18.<java.io.DataInputStream: int read(byte[])>($r19) in method <com.startapp.android.publish.ads.video.c: java.lang.String a(android.content.Context,java.net.URL,java.lang.String,com.startapp.android.publish.ads.video.c$a)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.android.publish.ads.video.c: java.lang.String a(android.content.Context,java.net.URL,java.lang.String,com.startapp.android.publish.ads.video.c$a)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i4 = virtualinvoke $r18.<java.io.DataInputStream: int read(byte[])>($r19)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.android.publish.ads.video.c: java.lang.String a(android.content.Context,java.net.URL,java.lang.String,com.startapp.android.publish.ads.video.c$a)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r20.<java.io.FileOutputStream: void write(byte[],int,int)>($r19, 0, $i4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.Object)>($r2) in method <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>() in method <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.appinventor.components.runtime.util.YailDictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.SharedLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<gnu.kawa.reflect.FieldLocation: java.lang.Object value> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.PlainLocation: gnu.mapping.Location base>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Location: java.lang.Object getValue()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.Location
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.NamedLocation: boolean equals(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.NamedLocation
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.expr.ReferenceExp: java.lang.Object symbol>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.expr.ReferenceExp: java.lang.Object symbol>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.Object)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in method <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object yailDictionarySetPair(java.lang.Object,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c1 = $r1[$i2]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = (int) $c1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.appinventor.components.runtime.util.YailDictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.SharedLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<gnu.kawa.reflect.FieldLocation: java.lang.Object value> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.PlainLocation: gnu.mapping.Location base>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Location: java.lang.Object getValue()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.Location
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.NamedLocation: boolean equals(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.NamedLocation
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.expr.ReferenceExp: java.lang.Object symbol>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.expr.ReferenceExp: java.lang.Object symbol>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.Object)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>() in method <gnu.mapping.TtyInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.appinventor.components.runtime.util.YailDictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.reflect.FieldLocation: java.lang.Object getFieldValue()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<gnu.kawa.reflect.FieldLocation: java.lang.Object value> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.PlainLocation: gnu.mapping.Location base>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Location: java.lang.Object getValue()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.Location
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.NamedLocation: boolean equals(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.NamedLocation
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.expr.ReferenceExp: java.lang.Object symbol>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.expr.ReferenceExp: java.lang.Object symbol>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.Object)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in method <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object yailDictionarySetPair(java.lang.Object,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c1 = $r1[$i2]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = (int) $c1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.appinventor.components.runtime.util.YailDictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.SharedLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<gnu.kawa.reflect.FieldLocation: java.lang.Object value> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.PlainLocation: gnu.mapping.Location base>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Location: java.lang.Object getValue()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.Location
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.NamedLocation: boolean equals(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.NamedLocation
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.expr.ReferenceExp: java.lang.Object symbol>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.expr.ReferenceExp: java.lang.Object symbol>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.Object)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>() in method <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.appinventor.components.runtime.util.YailDictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.SharedLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<gnu.kawa.reflect.FieldLocation: java.lang.Object value> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.PlainLocation: gnu.mapping.Location base>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Location: java.lang.Object getValue()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.Location
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.NamedLocation: boolean equals(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.NamedLocation
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.expr.ReferenceExp: java.lang.Object symbol>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.expr.ReferenceExp: java.lang.Object symbol>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.Object)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>() in method <gnu.mapping.CharArrayInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CharArrayInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CharArrayInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.appinventor.components.runtime.util.YailDictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.SharedLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<gnu.kawa.reflect.FieldLocation: java.lang.Object value> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.PlainLocation: gnu.mapping.Location base>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Location: java.lang.Object getValue()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.Location
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.NamedLocation: boolean equals(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.NamedLocation
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.expr.ReferenceExp: java.lang.Object symbol>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.expr.ReferenceExp: java.lang.Object symbol>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ReferenceExp: void print(gnu.mapping.OutPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.Object)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r13.<java.io.Writer: void write(char[],int,int)>($r14, 0, $i1) in method <com.startapp.common.a.g: java.lang.String a(java.lang.String,byte[],java.lang.String,boolean,java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i1 = virtualinvoke $r15.<java.io.Reader: int read(char[])>($r14) in method <com.startapp.common.a.g: java.lang.String a(java.lang.String,byte[],java.lang.String,boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.common.a.g: java.lang.String a(java.lang.String,byte[],java.lang.String,boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = virtualinvoke $r15.<java.io.Reader: int read(char[])>($r14)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.common.a.g: java.lang.String a(java.lang.String,byte[],java.lang.String,boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r13.<java.io.Writer: void write(char[],int,int)>($r14, 0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r9.<java.io.Writer: void write(char[],int,int)>($r10, 0, $i2) in method <com.startapp.common.a.g: com.startapp.common.a.g$a a(java.lang.String,java.lang.String,boolean)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i2 = virtualinvoke $r11.<java.io.Reader: int read(char[])>($r10) in method <com.startapp.common.a.g: com.startapp.common.a.g$a a(java.lang.String,java.lang.String,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.common.a.g: com.startapp.common.a.g$a a(java.lang.String,java.lang.String,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i2 = virtualinvoke $r11.<java.io.Reader: int read(char[])>($r10)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.common.a.g: com.startapp.common.a.g$a a(java.lang.String,java.lang.String,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r9.<java.io.Writer: void write(char[],int,int)>($r10, 0, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, $i0) in method <com.adcolony.sdk.l: boolean a(java.io.InputStream,java.io.OutputStream)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r14.<java.io.BufferedInputStream: int read(byte[],int,int)>($r4, 0, 4096) in method <com.adcolony.sdk.l: boolean a(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.adcolony.sdk.l: boolean a(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r14.<java.io.BufferedInputStream: int read(byte[],int,int)>($r4, 0, 4096)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.adcolony.sdk.l: boolean a(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r8.<java.io.FileOutputStream: void write(byte[],int,int)>($r2, 0, $i0) in method <com.startapp.android.publish.adsCommon.a.g: void a(android.content.Context,java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r5.<java.util.zip.ZipInputStream: int read(byte[],int,int)>($r2, 0, 1024) in method <com.startapp.android.publish.adsCommon.a.g: void a(android.content.Context,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.android.publish.adsCommon.a.g: void a(android.content.Context,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r5.<java.util.zip.ZipInputStream: int read(byte[],int,int)>($r2, 0, 1024)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.android.publish.adsCommon.a.g: void a(android.content.Context,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r8.<java.io.FileOutputStream: void write(byte[],int,int)>($r2, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r9.<java.io.Writer: void write(char[],int,int)>($r10, 0, $i1) in method <com.startapp.common.a.g: com.startapp.common.a.g$a a(java.lang.String,java.lang.String,boolean)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i1 = virtualinvoke $r11.<java.io.Reader: int read(char[])>($r10) in method <com.startapp.common.a.g: com.startapp.common.a.g$a a(java.lang.String,java.lang.String,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.common.a.g: com.startapp.common.a.g$a a(java.lang.String,java.lang.String,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = virtualinvoke $r11.<java.io.Reader: int read(char[])>($r10)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.common.a.g: com.startapp.common.a.g$a a(java.lang.String,java.lang.String,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r9.<java.io.Writer: void write(char[],int,int)>($r10, 0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r12.<java.io.FileOutputStream: void write(byte[],int,int)>($r13, 0, $i0) in method <com.startapp.android.publish.adsCommon.a.g: boolean a(java.lang.String,java.lang.String,java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r11.<java.io.InputStream: int read(byte[])>($r13) in method <com.startapp.android.publish.adsCommon.a.g: boolean a(java.lang.String,java.lang.String,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.android.publish.adsCommon.a.g: boolean a(java.lang.String,java.lang.String,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r11.<java.io.InputStream: int read(byte[])>($r13)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.android.publish.adsCommon.a.g: boolean a(java.lang.String,java.lang.String,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r12.<java.io.FileOutputStream: void write(byte[],int,int)>($r13, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r14.<java.io.FileOutputStream: void write(byte[],int,int)>($r13, 0, $i0) in method <com.startapp.android.publish.ads.video.j: java.lang.String a(android.content.Context,java.net.URL,java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r12.<java.io.DataInputStream: int read(byte[])>($r13) in method <com.startapp.android.publish.ads.video.j: java.lang.String a(android.content.Context,java.net.URL,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.android.publish.ads.video.j: java.lang.String a(android.content.Context,java.net.URL,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r12.<java.io.DataInputStream: int read(byte[])>($r13)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.android.publish.ads.video.j: java.lang.String a(android.content.Context,java.net.URL,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r14.<java.io.FileOutputStream: void write(byte[],int,int)>($r13, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r13.<java.io.Writer: void write(char[],int,int)>($r14, 0, $i1) in method <com.startapp.common.a.g: java.lang.String a(java.lang.String,byte[],java.lang.String,boolean,java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i1 = virtualinvoke $r15.<java.io.Reader: int read(char[])>($r14) in method <com.startapp.common.a.g: java.lang.String a(java.lang.String,byte[],java.lang.String,boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.common.a.g: java.lang.String a(java.lang.String,byte[],java.lang.String,boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = virtualinvoke $r15.<java.io.Reader: int read(char[])>($r14)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.startapp.common.a.g: java.lang.String a(java.lang.String,byte[],java.lang.String,boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r13.<java.io.Writer: void write(char[],int,int)>($r14, 0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Data flow solver took 1562 seconds. Maximum memory consumption: 32656 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication - Found 11 leaks
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'SummaryStatistics'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Telemetry'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'Telemetry_sha256Hash_idx' for table 'Telemetry
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Callbacks'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallbackSummaries'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'CallbackSummaries_sha256Hash_idx' for table 'CallbackSummaries
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'AppSizes'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'AppSizes_sha256Hash_idx' for table 'AppSizes
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallgraphSizes'
