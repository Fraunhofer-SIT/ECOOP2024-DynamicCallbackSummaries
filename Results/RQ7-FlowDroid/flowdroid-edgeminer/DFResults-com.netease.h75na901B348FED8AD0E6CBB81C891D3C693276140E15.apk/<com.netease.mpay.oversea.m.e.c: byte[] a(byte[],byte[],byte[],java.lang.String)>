    private static byte[] a(byte[], byte[], byte[], java.lang.String)
    {
        java.lang.Throwable $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        byte[] $r0, $r1, $r2;
        javax.crypto.spec.SecretKeySpec $r4;
        javax.crypto.Cipher $r5;
        javax.crypto.spec.IvParameterSpec $r6;
        int $i0;
        java.lang.String $r3;
        java.lang.Exception $r7;

        $r1 := @parameter0: byte[];

        $r0 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: java.lang.String;

        if $r1 == null goto label19;

        $i0 = lengthof $r1;

        if $i0 == 0 goto label19;

        if $r0 == null goto label19;

        $i0 = lengthof $r0;

        if $i0 != 0 goto label01;

        return null;

     label01:
        $r4 = new javax.crypto.spec.SecretKeySpec;

     label02:
        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "AES");

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

     label03:
        if $r2 != null goto label07;

        $r6 = new javax.crypto.spec.IvParameterSpec;

        $r1 = newarray (byte)[16];

     label04:
        $r1[0] = 0;

        $r1[1] = 0;

        $r1[2] = 0;

        $r1[3] = 0;

        $r1[4] = 0;

        $r1[5] = 0;

        $r1[6] = 0;

        $r1[7] = 0;

        $r1[8] = 0;

        $r1[9] = 0;

        $r1[10] = 0;

        $r1[11] = 0;

        $r1[12] = 0;

        $r1[13] = 0;

        $r1[14] = 0;

        $r1[15] = 0;

     label05:
        specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1);

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r4, $r6);

     label06:
        goto label09;

     label07:
        $r6 = new javax.crypto.spec.IvParameterSpec;

     label08:
        specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r2);

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r4, $r6);

     label09:
        $r1 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

     label10:
        return $r1;

     label11:
        $r7 := @caughtexception;

        staticinvoke <com.netease.mpay.oversea.widget.q.b: void a(java.lang.Throwable)>($r7);

        return null;

     label12:
        $r8 := @caughtexception;

        staticinvoke <com.netease.mpay.oversea.widget.q.b: void a(java.lang.Throwable)>($r8);

        return null;

     label13:
        $r9 := @caughtexception;

        staticinvoke <com.netease.mpay.oversea.widget.q.b: void a(java.lang.Throwable)>($r9);

        return null;

     label14:
        $r10 := @caughtexception;

        staticinvoke <com.netease.mpay.oversea.widget.q.b: void a(java.lang.Throwable)>($r10);

        return null;

     label15:
        $r11 := @caughtexception;

        staticinvoke <com.netease.mpay.oversea.widget.q.b: void a(java.lang.Throwable)>($r11);

        return null;

     label16:
        $r12 := @caughtexception;

        staticinvoke <com.netease.mpay.oversea.widget.q.b: void a(java.lang.Throwable)>($r12);

        return null;

     label17:
        $r13 := @caughtexception;

        staticinvoke <com.netease.mpay.oversea.widget.q.b: void a(java.lang.Throwable)>($r13);

        return null;

     label18:
        $r14 := @caughtexception;

        staticinvoke <com.netease.mpay.oversea.widget.q.b: void a(java.lang.Throwable)>($r14);

     label19:
        return null;

        catch java.security.NoSuchAlgorithmException from label02 to label03 with label18;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label18;
        catch java.security.NoSuchAlgorithmException from label08 to label10 with label18;
        catch javax.crypto.NoSuchPaddingException from label02 to label03 with label17;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label17;
        catch javax.crypto.NoSuchPaddingException from label08 to label10 with label17;
        catch java.security.InvalidKeyException from label02 to label03 with label16;
        catch java.security.InvalidKeyException from label05 to label06 with label16;
        catch java.security.InvalidKeyException from label08 to label10 with label16;
        catch javax.crypto.IllegalBlockSizeException from label02 to label03 with label15;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label15;
        catch javax.crypto.IllegalBlockSizeException from label08 to label10 with label15;
        catch javax.crypto.BadPaddingException from label02 to label03 with label14;
        catch javax.crypto.BadPaddingException from label05 to label06 with label14;
        catch javax.crypto.BadPaddingException from label08 to label10 with label14;
        catch java.security.InvalidAlgorithmParameterException from label02 to label03 with label13;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label13;
        catch java.security.InvalidAlgorithmParameterException from label08 to label10 with label13;
        catch java.lang.IllegalArgumentException from label02 to label03 with label12;
        catch java.lang.IllegalArgumentException from label05 to label06 with label12;
        catch java.lang.IllegalArgumentException from label08 to label10 with label12;
        catch java.lang.Exception from label02 to label03 with label11;
        catch java.lang.Exception from label04 to label06 with label11;
        catch java.lang.Exception from label08 to label10 with label11;
    }
