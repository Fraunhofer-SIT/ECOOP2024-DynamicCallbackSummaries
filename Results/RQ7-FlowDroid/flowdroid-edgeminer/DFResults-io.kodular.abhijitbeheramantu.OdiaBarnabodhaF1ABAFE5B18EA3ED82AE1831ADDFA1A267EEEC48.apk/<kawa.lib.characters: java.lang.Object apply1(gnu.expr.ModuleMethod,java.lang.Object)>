    public java.lang.Object apply1(gnu.expr.ModuleMethod, java.lang.Object)
    {
        kawa.lib.characters r0;
        gnu.expr.ModuleMethod $r1;
        java.lang.Integer $r5;
        java.lang.ClassCastException $r7, $r9;
        gnu.mapping.WrongType $r8;
        gnu.text.Char $r4;
        int $i0;
        java.lang.Boolean $r3;
        java.lang.Object $r2;
        java.lang.Number $r6;
        boolean $z0;

        r0 := @this: kawa.lib.characters;

        $r1 := @parameter0: gnu.expr.ModuleMethod;

        $r2 := @parameter1: java.lang.Object;

        $i0 = $r1.<gnu.expr.ModuleMethod: int selector>;

        lookupswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label07;
            default: goto label01;
        };

     label01:
        $r2 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>($r1, $r2);

        return $r2;

     label02:
        $z0 = staticinvoke <kawa.lib.characters: boolean isChar(java.lang.Object)>($r2);

        if $z0 == 0 goto label04;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label03:
        return $r3;

     label04:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label03;

     label05:
        $r4 = (gnu.text.Char) $r2;

     label06:
        $i0 = staticinvoke <kawa.lib.characters: int char$To$Integer(gnu.text.Char)>($r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r5;

     label07:
        $r6 = (java.lang.Number) $r2;

        $i0 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

     label08:
        $r4 = staticinvoke <kawa.lib.characters: gnu.text.Char integer$To$Char(int)>($i0);

        return $r4;

     label09:
        $r7 := @caughtexception;

        $r8 = new gnu.mapping.WrongType;

        specialinvoke $r8.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r7, "char->integer", 1, $r2);

        throw $r8;

     label10:
        $r9 := @caughtexception;

        $r8 = new gnu.mapping.WrongType;

        specialinvoke $r8.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r9, "integer->char", 1, $r2);

        throw $r8;

        catch java.lang.ClassCastException from label05 to label06 with label09;
        catch java.lang.ClassCastException from label07 to label08 with label10;
    }
