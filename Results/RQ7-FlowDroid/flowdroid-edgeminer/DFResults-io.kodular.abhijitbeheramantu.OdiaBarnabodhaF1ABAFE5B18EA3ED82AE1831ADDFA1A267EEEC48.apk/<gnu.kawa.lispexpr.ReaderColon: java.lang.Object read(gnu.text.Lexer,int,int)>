    public java.lang.Object read(gnu.text.Lexer, int, int) throws java.io.IOException, gnu.text.SyntaxException
    {
        gnu.kawa.lispexpr.ReadTable $r3;
        gnu.kawa.lispexpr.ReaderColon r0;
        gnu.kawa.lispexpr.LispReader $r2;
        char $c3;
        int $i0, $i1, i2, $i4;
        java.lang.Object $r4;
        gnu.text.Lexer $r1;

        r0 := @this: gnu.kawa.lispexpr.ReaderColon;

        $r1 := @parameter0: gnu.text.Lexer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = $i0;

        $r2 = (gnu.kawa.lispexpr.LispReader) $r1;

        $r3 = staticinvoke <gnu.kawa.lispexpr.ReadTable: gnu.kawa.lispexpr.ReadTable getCurrent()>();

        $i1 = $r2.<gnu.kawa.lispexpr.LispReader: int tokenBufferLength>;

        $c3 = $r3.<gnu.kawa.lispexpr.ReadTable: char postfixLookupOperator>;

        $i4 = (int) $c3;

        if $i0 != $i4 goto label2;

        i2 = virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: int read()>();

        if i2 != 58 goto label1;

        $r4 = virtualinvoke $r3.<gnu.kawa.lispexpr.ReadTable: java.lang.Object makeSymbol(java.lang.String)>("::");

        return $r4;

     label1:
        virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>($i0);

     label2:
        $r4 = virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>(i2, $i1, $r3);

        return $r4;
    }
