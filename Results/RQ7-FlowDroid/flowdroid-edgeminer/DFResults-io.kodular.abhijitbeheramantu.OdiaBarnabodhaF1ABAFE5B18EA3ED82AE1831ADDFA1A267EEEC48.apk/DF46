Source: $i0 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
$i0 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>() in <gnu.kawa.lispexpr.LispReader: int readEscape()>
Sink: interfaceinvoke $r1.<gnu.lists.Consumer: void write(java.lang.String)>($r2) in <gnu.text.ReportFormat: void print(java.lang.Object,gnu.lists.Consumer)>

<gnu.kawa.lispexpr.LispReader: int readEscape()>: $i0 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
<gnu.kawa.lispexpr.LispReader: int readEscape()>: $i0 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int readEscape(int)>($i0)
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: i1 = $i0
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: return i1
<gnu.kawa.lispexpr.LispReader: int readEscape()>: return $i0
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: virtualinvoke $r0.<gnu.text.Lexer: void tokenBufferAppend(int)>(i3)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r3 = $r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>($r3, $i1, $i0)
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r4 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: return $r4
<gnu.kawa.lispexpr.ReaderString: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r2
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r8 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r7, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke $r1.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>(r0, $i0, -1)
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r9 = <java.lang.Boolean: java.lang.Boolean TRUE>
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r9
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: return $r9
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: throw $r6
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<kawa.lib.ports: java.lang.Object inputPortLineNumber(gnu.text.LineBufferedReader)>: $r4 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r1, $r4)
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r3)
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: $r2 = virtualinvoke $r3.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>(r0, $r1)
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>($r1, $r4)
<kawa.lib.characters: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>
<kawa.lib.characters: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r3
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.ports: java.lang.Object inputPortLineNumber(gnu.text.LineBufferedReader)>: return $r4
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: throw $r6
<gnu.text.LineBufferedReader: int read()>: $r1 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int read()>: $c1 = $r1[$i2]
<gnu.text.LineBufferedReader: int read()>: $i0 = (int) $c1
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.text.Lexer: int read()>: return $i0
<com.google.appinventor.components.runtime.util.YailDictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>: return $r1
<gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>: return $r1
<gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>: r0.<gnu.kawa.reflect.FieldLocation: java.lang.Object value> = $r2
<gnu.kawa.reflect.FieldLocation: java.lang.Object get(java.lang.Object)>: r0 := @this: gnu.kawa.reflect.FieldLocation
<gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>: $r2 = r0.<gnu.mapping.PlainLocation: gnu.mapping.Location base>
<gnu.mapping.PlainLocation: java.lang.Object get(java.lang.Object)>: return $r1
<gnu.mapping.Location: java.lang.Object getValue()>: return $r1
<gnu.mapping.NamedLocation: int hashCode()>: return $i1
<com.google.appinventor.components.runtime.util.YailDictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>: $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>()
<com.google.appinventor.components.runtime.util.YailDictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>: $r1 = specialinvoke r0.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4)
<com.google.appinventor.components.runtime.util.YailDictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>: return $r1
<gnu.expr.QuoteExp: java.lang.String toString()>: $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]")
<gnu.expr.QuoteExp: java.lang.String toString()>: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
<gnu.expr.QuoteExp: java.lang.String toString()>: return $r3
<gnu.text.ReportFormat: void print(java.lang.Object,gnu.lists.Consumer)>: interfaceinvoke $r1.<gnu.lists.Consumer: void write(java.lang.String)>($r2)
