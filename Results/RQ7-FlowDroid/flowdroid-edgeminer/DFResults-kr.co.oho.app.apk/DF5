Source: $i0 = virtualinvoke $r5.<java.io.BufferedInputStream: int read(byte[])>($r3)
$i0 = virtualinvoke $r5.<java.io.BufferedInputStream: int read(byte[])>($r3) in <com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>
Sink: specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r3) in <com.facebook.ProgressOutputStream: void <init>(java.io.OutputStream,com.facebook.GraphRequestBatch,java.util.Map,long)>

<com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>: $i0 = virtualinvoke $r5.<java.io.BufferedInputStream: int read(byte[])>($r3)
<com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i0)
<com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>: throw $r4
<com.facebook.GraphRequest$Serializer: void writeFile(java.lang.String,android.os.ParcelFileDescriptor,java.lang.String)>: $r5 = r0.<com.facebook.GraphRequest$Serializer: java.io.OutputStream outputStream>
<com.facebook.GraphRequest$Serializer: void writeFile(java.lang.String,android.os.ParcelFileDescriptor,java.lang.String)>: return
<com.facebook.GraphRequest$Serializer: void writeObject(java.lang.String,java.lang.Object,com.facebook.GraphRequest)>: return
<com.facebook.GraphRequest$Companion: void serializeParameters(android.os.Bundle,com.facebook.GraphRequest$Serializer,com.facebook.GraphRequest)>: r0 := @this: com.facebook.GraphRequest$Companion
<com.facebook.GraphRequest$Companion: void processRequest(com.facebook.GraphRequestBatch,com.facebook.internal.Logger,int,java.net.URL,java.io.OutputStream,boolean)>: specialinvoke $r5.<com.facebook.GraphRequest$Serializer: void <init>(java.io.OutputStream,com.facebook.internal.Logger,boolean)>($r4, $r2, $z0)
<com.facebook.GraphRequest$Serializer: void <init>(java.io.OutputStream,com.facebook.internal.Logger,boolean)>: r0.<com.facebook.GraphRequest$Serializer: java.io.OutputStream outputStream> = $r2
<com.facebook.GraphRequest$Serializer: void <init>(java.io.OutputStream,com.facebook.internal.Logger,boolean)>: return
<com.facebook.GraphRequest$Companion: void processRequest(com.facebook.GraphRequestBatch,com.facebook.internal.Logger,int,java.net.URL,java.io.OutputStream,boolean)>: r0 := @this: com.facebook.GraphRequest$Companion
<com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>: $r5 = $r12
<com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>: $r12 = (java.io.OutputStream) $r11
<com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>: specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12)
<com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>: $r12 = (java.io.OutputStream) $r11
<com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>: specialinvoke $r17.<com.facebook.ProgressOutputStream: void <init>(java.io.OutputStream,com.facebook.GraphRequestBatch,java.util.Map,long)>($r12, $r1, $r16, $l2)
<com.facebook.ProgressOutputStream: void <init>(java.io.OutputStream,com.facebook.GraphRequestBatch,java.util.Map,long)>: specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r3)
