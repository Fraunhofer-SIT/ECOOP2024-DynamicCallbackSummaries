    public static void <clinit>()
    {
        byte[] $r5;
        java.io.ByteArrayOutputStream $r4;
        java.util.HashMap $r6;
        o.d.d.b$a $r1;
        java.lang.Exception $r0;
        int $i0;
        java.lang.Class $r2;
        java.io.InputStream $r3;

        $r1 = new o.d.d.b$a;

        specialinvoke $r1.<o.d.d.b$a: void <init>()>();

        <o.d.d.b: java.util.List o> = $r1;

        staticinvoke <o.d.a.a.d: java.util.Map e()>();

        $r2 = class "Lo/d/d/b;";

     label01:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/LICENSE.txt");

     label02:
        $r4 = new java.io.ByteArrayOutputStream;

     label03:
        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

     label04:
        $r5 = newarray (byte)[1024];

     label05:
        $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r5);

     label06:
        if $i0 < 0 goto label09;

     label07:
        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r5, 0, $i0);

     label08:
        goto label05;

     label09:
        virtualinvoke $r4.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>("UTF-8");

     label10:
        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        <o.d.d.b: java.util.Map p> = $r6;

        return;

     label11:
        $r0 := @caughtexception;

        goto label10;

        catch java.lang.Exception from label01 to label02 with label11;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.lang.Exception from label05 to label06 with label11;
        catch java.lang.Exception from label07 to label08 with label11;
        catch java.lang.Exception from label09 to label10 with label11;
    }
