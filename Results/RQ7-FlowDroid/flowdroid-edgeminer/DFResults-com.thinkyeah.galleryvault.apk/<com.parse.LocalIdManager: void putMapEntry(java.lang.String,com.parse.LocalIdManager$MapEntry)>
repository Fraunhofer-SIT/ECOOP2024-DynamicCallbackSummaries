    public final void putMapEntry(java.lang.String, com.parse.LocalIdManager$MapEntry)
    {
        java.lang.Throwable $r1, $r11;
        java.lang.IllegalStateException $r9;
        com.parse.LocalIdManager$MapEntry $r3;
        java.io.File $r6, $r7;
        com.parse.LocalIdManager r0;
        org.json.JSONException $r8;
        org.json.JSONObject $r4;
        int $i0;
        java.lang.StringBuilder $r10;
        java.lang.String $r2, $r5;
        boolean $z0;

        r0 := @this: com.parse.LocalIdManager;

        $r2 := @parameter0: java.lang.String;

        $r3 := @parameter1: com.parse.LocalIdManager$MapEntry;

        entermonitor r0;

     label01:
        $z0 = virtualinvoke r0.<com.parse.LocalIdManager: boolean isLocalId(java.lang.String)>($r2);

        if $z0 == 0 goto label11;

        $r4 = new org.json.JSONObject;

        specialinvoke $r4.<org.json.JSONObject: void <init>()>();

     label02:
        $i0 = $r3.<com.parse.LocalIdManager$MapEntry: int retainCount>;

     label03:
        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("retainCount", $i0);

     label04:
        $r5 = $r3.<com.parse.LocalIdManager$MapEntry: java.lang.String objectId>;

        if $r5 == null goto label06;

        $r5 = $r3.<com.parse.LocalIdManager$MapEntry: java.lang.String objectId>;

     label05:
        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("objectId", $r5);

     label06:
        $r6 = new java.io.File;

        $r7 = r0.<com.parse.LocalIdManager: java.io.File diskPath>;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, $r2);

        $r7 = r0.<com.parse.LocalIdManager: java.io.File diskPath>;

        $z0 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label07;

        $r7 = r0.<com.parse.LocalIdManager: java.io.File diskPath>;

        virtualinvoke $r7.<java.io.File: boolean mkdirs()>();

     label07:
        staticinvoke <i.o.f.b.k: void writeJSONObjectToFile(java.io.File,org.json.JSONObject)>($r6, $r4);

     label08:
        exitmonitor r0;

        return;

     label09:
        $r8 := @caughtexception;

     label10:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error creating local id map entry.", $r8);

        throw $r9;

     label11:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to get invalid local id: \"");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r9;

     label12:
        $r11 := @caughtexception;

        exitmonitor r0;

        throw $r11;

     label13:
        $r1 := @caughtexception;

        goto label08;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch org.json.JSONException from label03 to label04 with label09;
        catch org.json.JSONException from label05 to label06 with label09;
        catch java.lang.Throwable from label02 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label12 with label12;
    }
