[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loading sources and sinks from SourcesSinks/UnconstrainedSourcesSinks.xml...
[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loaded 273 sources and 91 sinks from the XML file
[main] INFO soot.jimple.infoflow.android.SetupApplication - Initializing Soot...
[main] WARN soot.Scene - Android API version '30' not available, using minApkVersion '19' instead
[main] INFO soot.jimple.infoflow.android.SetupApplication - Loading dex files...
[main] INFO soot.jimple.infoflow.android.SetupApplication - ARSC file parsing took 0.089176802 seconds
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230.400 MiB
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 195 components...
[main] WARN soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Cannot generate constructor for phantom class androidx.core.content.FileProvider
[main] WARN soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Cannot generate constructor for phantom class androidx.multidex.MultiDexApplication
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[main] WARN soot.jimple.toolkits.typing.fast.UseChecker - Could not find any indication on the array type of $u14#51 = $u4#37[$u5#50] in <com.itextpdf.text.pdf.codec.TIFFDirectory: void initialize(com.itextpdf.text.pdf.RandomAccessFileOrArray)>
[main] WARN soot.jimple.toolkits.typing.fast.UseChecker - Could not find any indication on the array type of $u14#54 = $u4#37[$u5#50] in <com.itextpdf.text.pdf.codec.TIFFDirectory: void initialize(com.itextpdf.text.pdf.RandomAccessFileOrArray)>
[main] WARN soot.jimple.toolkits.typing.fast.UseChecker - Could not find any indication on the array type of $u14#69 = $u4#37[$u5#68] in <com.itextpdf.text.pdf.codec.TIFFDirectory: void initialize(com.itextpdf.text.pdf.RandomAccessFileOrArray)>
[main] WARN soot.jimple.toolkits.typing.fast.UseChecker - Could not find any indication on the array type of $u14#72 = $u4#37[$u5#68] in <com.itextpdf.text.pdf.codec.TIFFDirectory: void initialize(com.itextpdf.text.pdf.RandomAccessFileOrArray)>
[main] WARN soot.jimple.toolkits.typing.fast.UseChecker - Could not find any indication on the array type of $u14#51 = $u4#37[$u5#50] in <com.itextpdf.text.pdf.codec.TIFFDirectory: void initialize(com.itextpdf.text.pdf.RandomAccessFileOrArray)>
[main] WARN soot.jimple.toolkits.typing.fast.UseChecker - Could not find any indication on the array type of $u14#54 = $u4#37[$u5#50] in <com.itextpdf.text.pdf.codec.TIFFDirectory: void initialize(com.itextpdf.text.pdf.RandomAccessFileOrArray)>
[main] WARN soot.jimple.toolkits.typing.fast.UseChecker - Could not find any indication on the array type of $u14#69 = $u4#37[$u5#68] in <com.itextpdf.text.pdf.codec.TIFFDirectory: void initialize(com.itextpdf.text.pdf.RandomAccessFileOrArray)>
[main] WARN soot.jimple.toolkits.typing.fast.UseChecker - Could not find any indication on the array type of $u14#72 = $u4#37[$u5#68] in <com.itextpdf.text.pdf.codec.TIFFDirectory: void initialize(com.itextpdf.text.pdf.RandomAccessFileOrArray)>
[main] WARN soot.jimple.toolkits.typing.fast.UseChecker - Could not find any indication on the array type of $u14#51 = $u4#37[$u5#50] in <com.itextpdf.text.pdf.codec.TIFFDirectory: void initialize(com.itextpdf.text.pdf.RandomAccessFileOrArray)>
[main] WARN soot.jimple.toolkits.typing.fast.UseChecker - Could not find any indication on the array type of $u14#54 = $u4#37[$u5#50] in <com.itextpdf.text.pdf.codec.TIFFDirectory: void initialize(com.itextpdf.text.pdf.RandomAccessFileOrArray)>
[main] WARN soot.jimple.toolkits.typing.fast.UseChecker - Could not find any indication on the array type of $u14#69 = $u4#37[$u5#68] in <com.itextpdf.text.pdf.codec.TIFFDirectory: void initialize(com.itextpdf.text.pdf.RandomAccessFileOrArray)>
[main] WARN soot.jimple.toolkits.typing.fast.UseChecker - Could not find any indication on the array type of $u14#72 = $u4#37[$u5#68] in <com.itextpdf.text.pdf.codec.TIFFDirectory: void initialize(com.itextpdf.text.pdf.RandomAccessFileOrArray)>
[main] ERROR soot.jimple.toolkits.typing.fast.TypePromotionUseVisitor - Failed Typing in <com.itextpdf.text.pdf.codec.TIFFDirectory: void initialize(com.itextpdf.text.pdf.RandomAccessFileOrArray)> at statement $u4#37 = $r3: Is not cast compatible: null_type <-- java.lang.Object
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Collecting callbacks in DEFAULT mode...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Callback analysis done.
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 196 components...
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.FragmentEntryPointCreator - Cannot generate constructor for phantom class android.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for com.c.a.r, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for com.c.a.j, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for com.c.a.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for com.c.a.l, because it is an interface and cannot substitute with subclass
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[FlowDroid Timeout Watcher] WARN soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - Timeout reached, stopping the solvers...
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Running incremental callback analysis for 196 components...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Incremental callback analysis done.
[main] WARN soot.jimple.infoflow.android.SetupApplication - Aborted callback collection because of low memory
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] WARN soot.jimple.infoflow.android.SetupApplication - Callback analysis aborted early due to time or memory exhaustion
[main] INFO soot.jimple.infoflow.android.SetupApplication - Entry point calculation done.
[main] INFO soot.jimple.infoflow.android.source.AccessPathBasedSourceSinkManager - Created a SourceSinkManager with 273 sources, 91 sinks, and 1037 callback methods.
[main] INFO soot.jimple.infoflow.android.SetupApplication - Collecting callbacks and building a callgraph took 260 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication - Running data flow analysis on storagepath2-data/androidApps/2022-AndroZoo-PlayStore/com.sobatku.mb.apk with 273 sources and 91 sinks...
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Implicit flow tracking is NOT enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Exceptional flow tracking is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Running with a maximum access path length of 5
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using path-agnostic result collection
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Recursive access path shortening is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Taint analysis enabled: true
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using alias algorithm FlowSensitive
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230.400 MiB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph construction took 0 seconds
[main] INFO soot.jimple.infoflow.codeOptimization.InterproceduralConstantValuePropagator - Removing side-effect free methods is disabled
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Dead code elimination took 10.251809385 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph has 152010 edges
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Starting Taint Analysis
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] WARN soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Running with limited join point abstractions can break context-sensitive path builders
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Looking for sources and sinks...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Source lookup done, found 115 sources and 115 sinks.
[FlowDroid Timeout Watcher] WARN soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - Timeout reached, stopping the solvers...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper hits: 8202920
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper misses: 61123099
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - IFDS problem with 85825993 forward and 75053642 backward edges solved in 902 seconds, processing 8 results...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Current memory consumption: 132990 MB
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after cleanup: 50359 MB
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 1 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 2 with 3 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 3 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after path building: 169973 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Path reconstruction took 22242 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[])>($r2) in method <com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[])>($r2) in method <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[])>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r2, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.RandomAccessSourceFactory: com.itextpdf.text.io.RandomAccessSource createByReadingToMemory(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r5.<com.itextpdf.text.io.ArrayRandomAccessSource: void <init>(byte[])>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.ArrayRandomAccessSource: void <init>(byte[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.itextpdf.text.io.ArrayRandomAccessSource: byte[] array> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.ArrayRandomAccessSource: void <init>(byte[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.RandomAccessSourceFactory: com.itextpdf.text.io.RandomAccessSource createByReadingToMemory(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.RandomAccessSourceFactory: com.itextpdf.text.io.RandomAccessSource createBestSource(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(java.lang.String,boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke r0.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(com.itextpdf.text.io.RandomAccessSource)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(com.itextpdf.text.io.RandomAccessSource)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.itextpdf.text.pdf.RandomAccessFileOrArray: com.itextpdf.text.io.RandomAccessSource byteSource> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(com.itextpdf.text.io.RandomAccessSource)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(java.lang.String,boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.itextpdf.text.pdf.TrueTypeFont: com.itextpdf.text.pdf.RandomAccessFileOrArray rf> = $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String readStandardString(int)>(4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: java.lang.String readStandardString(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.itextpdf.text.pdf.TrueTypeFont: com.itextpdf.text.pdf.RandomAccessFileOrArray rf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r3.<com.itextpdf.text.pdf.RandomAccessFileOrArray: int readUnsignedShort()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: int readUnsignedShort()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.itextpdf.text.pdf.TrueTypeFont: com.itextpdf.text.pdf.RandomAccessFileOrArray rf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String readStandardString(int)>(4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: java.lang.String readStandardString(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<com.itextpdf.text.pdf.TrueTypeFont: com.itextpdf.text.pdf.RandomAccessFileOrArray rf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: java.lang.String readStandardString(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<com.itextpdf.text.pdf.RandomAccessFileOrArray: java.lang.String readString(int,java.lang.String)>($i0, "Cp1252")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: java.lang.String readString(int,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void readFully(byte[])>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void readFully(byte[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void readFully(byte[],int,int)>($r1, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void readFully(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i2 = virtualinvoke r0.<com.itextpdf.text.pdf.RandomAccessFileOrArray: int read(byte[],int,int)>($r1, $i4, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: int read(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.itextpdf.text.pdf.RandomAccessFileOrArray: com.itextpdf.text.io.RandomAccessSource byteSource>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: int read(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = interfaceinvoke $r2.<com.itextpdf.text.io.RandomAccessSource: int get(long,byte[],int,int)>($l4, $r1, $i2, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.ArrayRandomAccessSource: int get(long,byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.itextpdf.text.io.ArrayRandomAccessSource: byte[] array>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.ArrayRandomAccessSource: int get(long,byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i4, $r1, $i0, $i3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.ArrayRandomAccessSource: int get(long,byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: int read(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void readFully(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void readFully(byte[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.itextpdf.text.pdf.RandomAccessFileOrArray
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: java.lang.String readString(int,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r3, "Cp1252")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: java.lang.String readString(int,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: java.lang.String readStandardString(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.itextpdf.text.pdf.TrueTypeFont: java.util.HashMap tables>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r10
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void <init>(java.lang.String,java.lang.String,boolean,byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r9 = $r16
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r6, $r9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r7 = <com.itextpdf.text.pdf.BaseFont: java.util.concurrent.ConcurrentHashMap fontCache>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r7 = <com.itextpdf.text.pdf.BaseFont: java.util.concurrent.ConcurrentHashMap fontCache>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r8 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r6)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r12 = (com.itextpdf.text.pdf.BaseFont) $r8
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r12
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfFont: com.itextpdf.text.pdf.PdfFont getDefaultFont()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r1.<com.itextpdf.text.pdf.PdfFont: void <init>(com.itextpdf.text.pdf.BaseFont,float)>($r0, 12.0F)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfFont: void <init>(com.itextpdf.text.pdf.BaseFont,float)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.itextpdf.text.pdf.PdfFont: com.itextpdf.text.pdf.BaseFont font> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfFont: void <init>(com.itextpdf.text.pdf.BaseFont,float)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfFont: com.itextpdf.text.pdf.PdfFont getDefaultFont()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfChunk: com.itextpdf.text.pdf.PdfChunk truncate(float)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.itextpdf.text.pdf.PdfChunk: com.itextpdf.text.pdf.PdfFont font> = $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfChunk: com.itextpdf.text.pdf.PdfChunk truncate(float)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r6
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfLine: com.itextpdf.text.pdf.PdfChunk add(com.itextpdf.text.pdf.PdfChunk)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $f1 = virtualinvoke $r3.<com.itextpdf.text.pdf.PdfChunk: float width()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfChunk: float width()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $f0 = virtualinvoke r0.<com.itextpdf.text.pdf.PdfChunk: float width(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfChunk: float width(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.itextpdf.text.pdf.PdfChunk: com.itextpdf.text.pdf.PdfFont font>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfChunk: float width(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $f0 = virtualinvoke $r2.<com.itextpdf.text.pdf.PdfFont: float width(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfFont: float width(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.itextpdf.text.pdf.PdfFont: com.itextpdf.text.pdf.BaseFont font>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfFont: float width(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $f0 = virtualinvoke $r2.<com.itextpdf.text.pdf.BaseFont: float getWidthPoint(java.lang.String,float)>($r1, $f0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: float getWidthPoint(java.lang.String,float)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke r0.<com.itextpdf.text.pdf.BaseFont: int getWidth(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: int getWidth(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<com.itextpdf.text.pdf.BaseFont: byte[] convertToBytes(java.lang.String)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke r0.<com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(int)>($i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.itextpdf.text.pdf.CJKFont: com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte cidByte>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r3.<com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte: byte[] lookup(int)>($i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte: byte[] lookup(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = r0.<com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte: byte[] EMPTY>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte: byte[] lookup(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[])>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r8.<com.itextpdf.text.pdf.codec.PngImage$NewByteArrayOutputStream: void write(byte[],int,int)>($r6, 0, $i1) in method <com.itextpdf.text.pdf.codec.PngImage: void readPng()> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r6, 0, $i1) in method <com.itextpdf.text.pdf.codec.PngImage: void readPng()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.codec.PngImage: void readPng()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r6, 0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.codec.PngImage: void readPng()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r8.<com.itextpdf.text.pdf.codec.PngImage$NewByteArrayOutputStream: void write(byte[],int,int)>($r6, 0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[])>($r2) in method <com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[])>($r2) in method <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[])>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r2, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.RandomAccessSourceFactory: com.itextpdf.text.io.RandomAccessSource createByReadingToMemory(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r5.<com.itextpdf.text.io.ArrayRandomAccessSource: void <init>(byte[])>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.ArrayRandomAccessSource: void <init>(byte[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.itextpdf.text.io.ArrayRandomAccessSource: byte[] array> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.ArrayRandomAccessSource: void <init>(byte[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.RandomAccessSourceFactory: com.itextpdf.text.io.RandomAccessSource createByReadingToMemory(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.RandomAccessSourceFactory: com.itextpdf.text.io.RandomAccessSource createBestSource(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(java.lang.String,boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke r0.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(com.itextpdf.text.io.RandomAccessSource)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(com.itextpdf.text.io.RandomAccessSource)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.itextpdf.text.pdf.RandomAccessFileOrArray: com.itextpdf.text.io.RandomAccessSource byteSource> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(com.itextpdf.text.io.RandomAccessSource)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(java.lang.String,boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.itextpdf.text.pdf.TrueTypeFont: com.itextpdf.text.pdf.RandomAccessFileOrArray rf> = $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String readStandardString(int)>(4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: java.lang.String readStandardString(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.itextpdf.text.pdf.TrueTypeFont: com.itextpdf.text.pdf.RandomAccessFileOrArray rf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r3.<com.itextpdf.text.pdf.RandomAccessFileOrArray: int readUnsignedShort()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: int readUnsignedShort()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.itextpdf.text.pdf.TrueTypeFont: com.itextpdf.text.pdf.RandomAccessFileOrArray rf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String readStandardString(int)>(4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: java.lang.String readStandardString(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<com.itextpdf.text.pdf.TrueTypeFont: com.itextpdf.text.pdf.RandomAccessFileOrArray rf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: java.lang.String readStandardString(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<com.itextpdf.text.pdf.RandomAccessFileOrArray: java.lang.String readString(int,java.lang.String)>($i0, "Cp1252")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: java.lang.String readString(int,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void readFully(byte[])>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void readFully(byte[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void readFully(byte[],int,int)>($r1, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void readFully(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i2 = virtualinvoke r0.<com.itextpdf.text.pdf.RandomAccessFileOrArray: int read(byte[],int,int)>($r1, $i4, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: int read(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.itextpdf.text.pdf.RandomAccessFileOrArray: com.itextpdf.text.io.RandomAccessSource byteSource>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: int read(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = interfaceinvoke $r2.<com.itextpdf.text.io.RandomAccessSource: int get(long,byte[],int,int)>($l4, $r1, $i2, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.ArrayRandomAccessSource: int get(long,byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.itextpdf.text.io.ArrayRandomAccessSource: byte[] array>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.ArrayRandomAccessSource: int get(long,byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i4, $r1, $i0, $i3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.ArrayRandomAccessSource: int get(long,byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: int read(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void readFully(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: void readFully(byte[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.itextpdf.text.pdf.RandomAccessFileOrArray
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: java.lang.String readString(int,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r3, "Cp1252")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.RandomAccessFileOrArray: java.lang.String readString(int,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: java.lang.String readStandardString(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.itextpdf.text.pdf.TrueTypeFont: java.util.HashMap tables>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r10
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.TrueTypeFont: void <init>(java.lang.String,java.lang.String,boolean,byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r9 = $r16
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r6, $r9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r7 = <com.itextpdf.text.pdf.BaseFont: java.util.concurrent.ConcurrentHashMap fontCache>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r7 = <com.itextpdf.text.pdf.BaseFont: java.util.concurrent.ConcurrentHashMap fontCache>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r8 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r6)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r12 = (com.itextpdf.text.pdf.BaseFont) $r8
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r12
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfFont: com.itextpdf.text.pdf.PdfFont getDefaultFont()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r1.<com.itextpdf.text.pdf.PdfFont: void <init>(com.itextpdf.text.pdf.BaseFont,float)>($r0, 12.0F)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfFont: void <init>(com.itextpdf.text.pdf.BaseFont,float)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.itextpdf.text.pdf.PdfFont: com.itextpdf.text.pdf.BaseFont font> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfFont: void <init>(com.itextpdf.text.pdf.BaseFont,float)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfFont: com.itextpdf.text.pdf.PdfFont getDefaultFont()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfChunk: com.itextpdf.text.pdf.PdfChunk truncate(float)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.itextpdf.text.pdf.PdfChunk: com.itextpdf.text.pdf.PdfFont font> = $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfChunk: com.itextpdf.text.pdf.PdfChunk truncate(float)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r6
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfLine: com.itextpdf.text.pdf.PdfChunk add(com.itextpdf.text.pdf.PdfChunk)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $f1 = virtualinvoke $r3.<com.itextpdf.text.pdf.PdfChunk: float width()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfChunk: float width()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $f0 = virtualinvoke r0.<com.itextpdf.text.pdf.PdfChunk: float width(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfChunk: float width(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.itextpdf.text.pdf.PdfChunk: com.itextpdf.text.pdf.PdfFont font>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfChunk: float width(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $f0 = virtualinvoke $r2.<com.itextpdf.text.pdf.PdfFont: float width(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfFont: float width(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.itextpdf.text.pdf.PdfFont: com.itextpdf.text.pdf.BaseFont font>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfFont: float width(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $f0 = virtualinvoke $r2.<com.itextpdf.text.pdf.BaseFont: float getWidthPoint(java.lang.String,float)>($r1, $f0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: float getWidthPoint(java.lang.String,float)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke r0.<com.itextpdf.text.pdf.BaseFont: int getWidth(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.BaseFont: int getWidth(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<com.itextpdf.text.pdf.BaseFont: byte[] convertToBytes(java.lang.String)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke r0.<com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(int)>($i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.itextpdf.text.pdf.CJKFont: com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte cidByte>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r3.<com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte: byte[] lookup(int)>($i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte: byte[] lookup(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = r0.<com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte: byte[] EMPTY>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte: byte[] lookup(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.CJKFont: byte[] convertToBytes(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[])>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r22.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r11, 0, $i0) in method <com.itextpdf.text.pdf.Type1Font: void <init>(java.lang.String,java.lang.String,boolean,byte[],byte[],boolean)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r20.<java.io.InputStream: int read(byte[])>($r11) in method <com.itextpdf.text.pdf.Type1Font: void <init>(java.lang.String,java.lang.String,boolean,byte[],byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.Type1Font: void <init>(java.lang.String,java.lang.String,boolean,byte[],byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r20.<java.io.InputStream: int read(byte[])>($r11)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.Type1Font: void <init>(java.lang.String,java.lang.String,boolean,byte[],byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r22.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r11, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i1) in method <com.itextpdf.text.pdf.PdfImage: void transferBytes(java.io.InputStream,java.io.OutputStream,int)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i1 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i1) in method <com.itextpdf.text.pdf.PdfImage: void transferBytes(java.io.InputStream,java.io.OutputStream,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfImage: void transferBytes(java.io.InputStream,java.io.OutputStream,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfImage: void transferBytes(java.io.InputStream,java.io.OutputStream,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r21.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r16, 0, $i0) in method <com.itextpdf.text.pdf.codec.Base64: byte[] decode(java.lang.String,int)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r23.<java.util.zip.GZIPInputStream: int read(byte[])>($r16) in method <com.itextpdf.text.pdf.codec.Base64: byte[] decode(java.lang.String,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.codec.Base64: byte[] decode(java.lang.String,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r23.<java.util.zip.GZIPInputStream: int read(byte[])>($r16)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.codec.Base64: byte[] decode(java.lang.String,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r21.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r16, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r2, 0, $i0) in method <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[])>($r2) in method <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[])>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.io.StreamUtil: byte[] inputStreamToArray(java.io.InputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r2, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, 0, $i1) in method <com.itextpdf.text.pdf.PdfReader: byte[] FlateDecode(byte[],boolean)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i1 = virtualinvoke $r3.<java.util.zip.InflaterInputStream: int read(byte[])>($r1) in method <com.itextpdf.text.pdf.PdfReader: byte[] FlateDecode(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfReader: byte[] FlateDecode(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = virtualinvoke $r3.<java.util.zip.InflaterInputStream: int read(byte[])>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.PdfReader: byte[] FlateDecode(byte[],boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, 0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r9.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r8, 0, $i0) in method <com.itextpdf.text.pdf.GlyphList: void <clinit>()> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>($r8) in method <com.itextpdf.text.pdf.GlyphList: void <clinit>()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.GlyphList: void <clinit>()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>($r8)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.itextpdf.text.pdf.GlyphList: void <clinit>()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r9.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r8, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Data flow solver took 23199 seconds. Maximum memory consumption: 169973 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication - Found 9 leaks
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'SummaryStatistics'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Telemetry'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'Telemetry_sha256Hash_idx' for table 'Telemetry
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Callbacks'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallbackSummaries'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'CallbackSummaries_sha256Hash_idx' for table 'CallbackSummaries
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'AppSizes'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'AppSizes_sha256Hash_idx' for table 'AppSizes
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallgraphSizes'
