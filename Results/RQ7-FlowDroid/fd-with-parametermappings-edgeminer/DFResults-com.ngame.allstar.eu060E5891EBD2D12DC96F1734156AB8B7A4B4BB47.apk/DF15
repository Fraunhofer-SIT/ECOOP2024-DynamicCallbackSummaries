Source: $r1 = interfaceinvoke $r0.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>($r1, "")
$r1 = interfaceinvoke $r0.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>($r1, "") in <com.ljoy.chatbot.utils.ABSharePreferenceUtil: java.lang.String getSPString(java.lang.String)>
Sink: virtualinvoke r0.<org.fusesource.hawtbuf.DataByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1) in <org.fusesource.hawtbuf.DataByteArrayOutputStream: void write(org.fusesource.hawtbuf.Buffer)>

<com.ljoy.chatbot.utils.ABSharePreferenceUtil: java.lang.String getSPString(java.lang.String)>: $r1 = interfaceinvoke $r0.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>($r1, "")
<com.ljoy.chatbot.utils.ABSharePreferenceUtil: java.lang.String getSPString(java.lang.String)>: return $r1
<com.ljoy.chatbot.data.ElvaData: java.lang.String getAppId()>: return $r1
<com.ljoy.chatbot.model.ManufacturerInfo: java.lang.String getAppId()>: virtualinvoke r0.<com.ljoy.chatbot.model.ManufacturerInfo: void setAppId(java.lang.String)>($r1)
<com.ljoy.chatbot.model.ManufacturerInfo: void setAppId(java.lang.String)>: r0.<com.ljoy.chatbot.model.ManufacturerInfo: java.lang.String appId> = $r1
<com.ljoy.chatbot.model.ManufacturerInfo: void setAppId(java.lang.String)>: return
<com.ljoy.chatbot.model.ManufacturerInfo: java.lang.String getAppId()>: $r1 = r0.<com.ljoy.chatbot.model.ManufacturerInfo: java.lang.String appId>
<com.ljoy.chatbot.model.ManufacturerInfo: java.lang.String getAppId()>: return $r1
<com.ljoy.chatbot.core.mqtt.ABFaqNetMQTT: void startConnect(boolean)>: specialinvoke $r9.<com.ljoy.chatbot.core.mqtt.TopicInfo: void <init>(java.lang.String,java.lang.String)>($r7, $r4)
<com.ljoy.chatbot.core.mqtt.TopicInfo: void <init>(java.lang.String,java.lang.String)>: r0.<com.ljoy.chatbot.core.mqtt.TopicInfo: java.lang.String appid> = $r2
<com.ljoy.chatbot.core.mqtt.TopicInfo: void <init>(java.lang.String,java.lang.String)>: return
<com.ljoy.chatbot.core.mqtt.ABFaqNetMQTT: void startConnect(boolean)>: r0.<com.ljoy.chatbot.core.mqtt.ABFaqNetMQTT: com.ljoy.chatbot.core.mqtt.TopicInfo topicInfo> = $r9
<com.ljoy.chatbot.core.mqtt.ABFaqNetMQTT: void startConnect(boolean)>: specialinvoke r0.<com.ljoy.chatbot.core.mqtt.ABFaqNetMQTT: void mqttSubscribe()>()
<com.ljoy.chatbot.core.mqtt.ABFaqNetMQTT: void mqttSubscribe()>: $r5 = r0.<com.ljoy.chatbot.core.mqtt.ABFaqNetMQTT: com.ljoy.chatbot.core.mqtt.TopicInfo topicInfo>
<com.ljoy.chatbot.core.mqtt.ABFaqNetMQTT: void mqttSubscribe()>: $r2 = virtualinvoke $r5.<com.ljoy.chatbot.core.mqtt.TopicInfo: java.lang.String getClientSubPushSdkMessageTopic()>()
<com.ljoy.chatbot.core.mqtt.TopicInfo: java.lang.String getClientSubPushSdkMessageTopic()>: $r2 = virtualinvoke r0.<com.ljoy.chatbot.core.mqtt.TopicInfo: java.lang.String getClientNormalTopic()>()
<com.ljoy.chatbot.core.mqtt.TopicInfo: java.lang.String getClientNormalTopic()>: $r1 = r0.<com.ljoy.chatbot.core.mqtt.TopicInfo: java.lang.String appid>
<com.ljoy.chatbot.core.mqtt.TopicInfo: java.lang.String getClientNormalTopic()>: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1)
<com.ljoy.chatbot.core.mqtt.TopicInfo: java.lang.String getClientNormalTopic()>: $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
<com.ljoy.chatbot.core.mqtt.TopicInfo: java.lang.String getClientNormalTopic()>: return $r1
<com.ljoy.chatbot.core.mqtt.TopicInfo: java.lang.String getClientSubPushSdkMessageTopic()>: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2)
<com.ljoy.chatbot.core.mqtt.TopicInfo: java.lang.String getClientSubPushSdkMessageTopic()>: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
<com.ljoy.chatbot.core.mqtt.TopicInfo: java.lang.String getClientSubPushSdkMessageTopic()>: return $r2
<com.ljoy.chatbot.core.mqtt.ABFaqNetMQTT: void mqttSubscribe()>: specialinvoke $r4.<org.fusesource.mqtt.client.Topic: void <init>(java.lang.String,org.fusesource.mqtt.client.QoS)>($r2, $r1)
<org.fusesource.mqtt.client.Topic: void <init>(java.lang.String,org.fusesource.mqtt.client.QoS)>: specialinvoke $r3.<org.fusesource.hawtbuf.UTF8Buffer: void <init>(java.lang.String)>($r1)
<org.fusesource.hawtbuf.UTF8Buffer: void <init>(java.lang.String)>: $r1 = staticinvoke <org.fusesource.hawtbuf.UTF8Buffer: byte[] encode(java.lang.String)>($r2)
<org.fusesource.hawtbuf.UTF8Buffer: byte[] encode(java.lang.String)>: $r0 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8")
<org.fusesource.hawtbuf.UTF8Buffer: byte[] encode(java.lang.String)>: return $r0
<org.fusesource.hawtbuf.UTF8Buffer: void <init>(java.lang.String)>: specialinvoke r0.<org.fusesource.hawtbuf.Buffer: void <init>(byte[])>($r1)
<org.fusesource.hawtbuf.Buffer: void <init>(byte[])>: specialinvoke r0.<org.fusesource.hawtbuf.Buffer: void <init>(byte[],int,int)>($r1, 0, $i0)
<org.fusesource.hawtbuf.Buffer: void <init>(byte[],int,int)>: r0.<org.fusesource.hawtbuf.Buffer: byte[] data> = $r1
<org.fusesource.hawtbuf.Buffer: void <init>(byte[],int,int)>: return
<org.fusesource.hawtbuf.Buffer: void <init>(byte[])>: return
<org.fusesource.hawtbuf.UTF8Buffer: void <init>(java.lang.String)>: return
<org.fusesource.mqtt.client.Topic: void <init>(java.lang.String,org.fusesource.mqtt.client.QoS)>: specialinvoke r0.<org.fusesource.mqtt.client.Topic: void <init>(org.fusesource.hawtbuf.UTF8Buffer,org.fusesource.mqtt.client.QoS)>($r3, $r2)
<org.fusesource.mqtt.client.Topic: void <init>(org.fusesource.hawtbuf.UTF8Buffer,org.fusesource.mqtt.client.QoS)>: r0.<org.fusesource.mqtt.client.Topic: org.fusesource.hawtbuf.UTF8Buffer name> = $r1
<org.fusesource.mqtt.client.Topic: void <init>(org.fusesource.hawtbuf.UTF8Buffer,org.fusesource.mqtt.client.QoS)>: return
<org.fusesource.mqtt.client.Topic: void <init>(java.lang.String,org.fusesource.mqtt.client.QoS)>: return
<com.ljoy.chatbot.core.mqtt.ABFaqNetMQTT: void mqttSubscribe()>: $r3[0] = $r4
<com.ljoy.chatbot.core.mqtt.ABFaqNetMQTT: void mqttSubscribe()>: virtualinvoke $r6.<org.fusesource.mqtt.client.CallbackConnection: void subscribe(org.fusesource.mqtt.client.Topic[],org.fusesource.mqtt.client.Callback)>($r3, $r7)
<org.fusesource.mqtt.client.CallbackConnection: void subscribe(org.fusesource.mqtt.client.Topic[],org.fusesource.mqtt.client.Callback)>: $r7 = virtualinvoke $r7.<org.fusesource.mqtt.codec.SUBSCRIBE: org.fusesource.mqtt.codec.SUBSCRIBE topics(org.fusesource.mqtt.client.Topic[])>($r1)
<org.fusesource.mqtt.codec.SUBSCRIBE: org.fusesource.mqtt.codec.SUBSCRIBE topics(org.fusesource.mqtt.client.Topic[])>: r0.<org.fusesource.mqtt.codec.SUBSCRIBE: org.fusesource.mqtt.client.Topic[] topics> = $r1
<org.fusesource.mqtt.codec.SUBSCRIBE: org.fusesource.mqtt.codec.SUBSCRIBE topics(org.fusesource.mqtt.client.Topic[])>: return r0
<org.fusesource.mqtt.client.CallbackConnection: void subscribe(org.fusesource.mqtt.client.Topic[],org.fusesource.mqtt.client.Callback)>: specialinvoke r0.<org.fusesource.mqtt.client.CallbackConnection: void send(org.fusesource.mqtt.codec.MessageSupport$Acked,org.fusesource.mqtt.client.Callback)>($r7, $r8)
<org.fusesource.mqtt.client.CallbackConnection: void send(org.fusesource.mqtt.codec.MessageSupport$Acked,org.fusesource.mqtt.client.Callback)>: $r6 = interfaceinvoke $r2.<org.fusesource.mqtt.codec.MessageSupport$Acked: org.fusesource.mqtt.codec.MQTTFrame encode()>()
<org.fusesource.mqtt.codec.SUBSCRIBE: org.fusesource.mqtt.codec.MQTTFrame encode()>: $r4 = r0.<org.fusesource.mqtt.codec.SUBSCRIBE: org.fusesource.mqtt.client.Topic[] topics>
<org.fusesource.mqtt.codec.SUBSCRIBE: org.fusesource.mqtt.codec.MQTTFrame encode()>: $r5 = $r4[$i2]
<org.fusesource.mqtt.codec.SUBSCRIBE: org.fusesource.mqtt.codec.MQTTFrame encode()>: $r6 = virtualinvoke $r5.<org.fusesource.mqtt.client.Topic: org.fusesource.hawtbuf.UTF8Buffer name()>()
<org.fusesource.mqtt.client.Topic: org.fusesource.hawtbuf.UTF8Buffer name()>: r1 = r0.<org.fusesource.mqtt.client.Topic: org.fusesource.hawtbuf.UTF8Buffer name>
<org.fusesource.mqtt.client.Topic: org.fusesource.hawtbuf.UTF8Buffer name()>: return r1
<org.fusesource.mqtt.codec.SUBSCRIBE: org.fusesource.mqtt.codec.MQTTFrame encode()>: staticinvoke <org.fusesource.mqtt.codec.MessageSupport: void writeUTF(org.fusesource.hawtbuf.DataByteArrayOutputStream,org.fusesource.hawtbuf.Buffer)>($r9, $r6)
<org.fusesource.mqtt.codec.MessageSupport: void writeUTF(org.fusesource.hawtbuf.DataByteArrayOutputStream,org.fusesource.hawtbuf.Buffer)>: virtualinvoke $r0.<org.fusesource.hawtbuf.DataByteArrayOutputStream: void write(org.fusesource.hawtbuf.Buffer)>($r1)
<org.fusesource.hawtbuf.DataByteArrayOutputStream: void write(org.fusesource.hawtbuf.Buffer)>: $r1 = $r2.<org.fusesource.hawtbuf.Buffer: byte[] data>
<org.fusesource.hawtbuf.DataByteArrayOutputStream: void write(org.fusesource.hawtbuf.Buffer)>: virtualinvoke r0.<org.fusesource.hawtbuf.DataByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1)
