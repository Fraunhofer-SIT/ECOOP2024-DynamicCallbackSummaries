    public void subscribe(org.fusesource.mqtt.client.Topic[], org.fusesource.mqtt.client.Callback)
    {
        org.fusesource.mqtt.codec.SUBSCRIBE $r7;
        java.lang.IllegalStateException $r4;
        org.fusesource.hawtdispatch.DispatchQueue $r3;
        java.lang.IllegalArgumentException $r9;
        org.fusesource.mqtt.client.CallbackConnection r0;
        org.fusesource.mqtt.client.Callback $r2;
        org.fusesource.mqtt.client.CallbackConnection$11 $r8;
        org.fusesource.mqtt.client.Topic[] $r1;
        boolean $z0;
        org.fusesource.mqtt.client.Listener $r5, $r6;

        r0 := @this: org.fusesource.mqtt.client.CallbackConnection;

        $r1 := @parameter0: org.fusesource.mqtt.client.Topic[];

        $r2 := @parameter1: org.fusesource.mqtt.client.Callback;

        if $r1 == null goto label3;

        $r3 = r0.<org.fusesource.mqtt.client.CallbackConnection: org.fusesource.hawtdispatch.DispatchQueue queue>;

        interfaceinvoke $r3.<org.fusesource.hawtdispatch.DispatchQueue: void assertExecuting()>();

        $z0 = r0.<org.fusesource.mqtt.client.CallbackConnection: boolean disconnected>;

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.fusesource.mqtt.client.CallbackConnection: java.lang.IllegalStateException createDisconnectedError()>();

        interfaceinvoke $r2.<org.fusesource.mqtt.client.Callback: void onFailure(java.lang.Throwable)>($r4);

        return;

     label1:
        $r5 = r0.<org.fusesource.mqtt.client.CallbackConnection: org.fusesource.mqtt.client.Listener listener>;

        $r6 = <org.fusesource.mqtt.client.CallbackConnection: org.fusesource.mqtt.client.Listener DEFAULT_LISTENER>;

        if $r5 != $r6 goto label2;

        $r4 = staticinvoke <org.fusesource.mqtt.client.CallbackConnection: java.lang.IllegalStateException createListenerNotSetError()>();

        interfaceinvoke $r2.<org.fusesource.mqtt.client.Callback: void onFailure(java.lang.Throwable)>($r4);

        return;

     label2:
        $r7 = new org.fusesource.mqtt.codec.SUBSCRIBE;

        specialinvoke $r7.<org.fusesource.mqtt.codec.SUBSCRIBE: void <init>()>();

        $r7 = virtualinvoke $r7.<org.fusesource.mqtt.codec.SUBSCRIBE: org.fusesource.mqtt.codec.SUBSCRIBE topics(org.fusesource.mqtt.client.Topic[])>($r1);

        $r8 = new org.fusesource.mqtt.client.CallbackConnection$11;

        specialinvoke $r8.<org.fusesource.mqtt.client.CallbackConnection$11: void <init>(org.fusesource.mqtt.client.CallbackConnection,org.fusesource.mqtt.client.Callback,org.fusesource.mqtt.client.Topic[])>(r0, $r2, $r1);

        specialinvoke r0.<org.fusesource.mqtt.client.CallbackConnection: void send(org.fusesource.mqtt.codec.MessageSupport$Acked,org.fusesource.mqtt.client.Callback)>($r7, $r8);

        return;

     label3:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("topics must not be null");

        throw $r9;
    }
