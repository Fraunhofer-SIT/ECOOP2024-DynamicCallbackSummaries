[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loading sources and sinks from SourcesSinks/UnconstrainedSourcesSinks.xml...
[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loaded 273 sources and 91 sinks from the XML file
[main] INFO soot.jimple.infoflow.android.SetupApplication - Initializing Soot...
[main] WARN soot.Scene - Android API version '33' not available, using minApkVersion '19' instead
[main] INFO soot.jimple.infoflow.android.SetupApplication - Loading dex files...
[main] INFO soot.jimple.infoflow.android.SetupApplication - ARSC file parsing took 0.074844648 seconds
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230.400 MiB
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 38 components...
[main] WARN soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Cannot generate constructor for phantom class androidx.startup.InitializationProvider
[main] WARN soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Cannot generate constructor for phantom class androidx.lifecycle.ProcessLifecycleOwnerInitializer
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[FlowDroid Timeout Watcher] WARN soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - Timeout reached, stopping the solvers...
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Collecting callbacks in DEFAULT mode...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Callback analysis done.
[main] WARN soot.jimple.infoflow.android.SetupApplication - Aborted callback collection because of low memory
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] WARN soot.jimple.infoflow.android.SetupApplication - Callback analysis aborted early due to time or memory exhaustion
[main] INFO soot.jimple.infoflow.android.SetupApplication - Entry point calculation done.
[main] INFO soot.jimple.infoflow.android.source.AccessPathBasedSourceSinkManager - Created a SourceSinkManager with 273 sources, 91 sinks, and 0 callback methods.
[main] INFO soot.jimple.infoflow.android.SetupApplication - Collecting callbacks and building a callgraph took 351 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication - Running data flow analysis on storagepath2-data/androidApps/2023-AndroZoo-PlayStore/com.liveperson.kasamba.android55E07F76AE68DC7C38FD852DEB6A3A93079A5C74.apk with 273 sources and 91 sinks...
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Implicit flow tracking is NOT enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Exceptional flow tracking is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Running with a maximum access path length of 5
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using path-agnostic result collection
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Recursive access path shortening is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Taint analysis enabled: true
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using alias algorithm FlowSensitive
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230.400 MiB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph construction took 0 seconds
[main] INFO soot.jimple.infoflow.codeOptimization.InterproceduralConstantValuePropagator - Removing side-effect free methods is disabled
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Dead code elimination took 7.364786679 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph has 96501 edges
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Starting Taint Analysis
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] WARN soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Running with limited join point abstractions can break context-sensitive path builders
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Looking for sources and sinks...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Source lookup done, found 236 sources and 117 sinks.
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<cz.msebera.android.httpclient.util.CharArrayBuffer: char[] buffer>]
[FlowDroid Timeout Watcher] WARN soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - Timeout reached, stopping the solvers...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper hits: 15675344
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper misses: 28992378
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - IFDS problem with 41586378 forward and 38882953 backward edges solved in 901 seconds, processing 8 results...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Current memory consumption: 68213 MB
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after cleanup: 30080 MB
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 1 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 2 with 3 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 3 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after path building: 33371 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Path reconstruction took 446 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r2, $i1, $i3) in method <com.bumptech.glide.disklrucache.StrictLineReader: java.lang.String readLine()> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0) in method <com.bumptech.glide.disklrucache.StrictLineReader: void fillBuf()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.bumptech.glide.disklrucache.StrictLineReader: void fillBuf()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.bumptech.glide.disklrucache.StrictLineReader: void fillBuf()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.bumptech.glide.disklrucache.StrictLineReader: byte[] buf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.bumptech.glide.disklrucache.StrictLineReader: void fillBuf()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.bumptech.glide.disklrucache.StrictLineReader: java.lang.String readLine()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.bumptech.glide.disklrucache.StrictLineReader: byte[] buf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.bumptech.glide.disklrucache.StrictLineReader: java.lang.String readLine()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r2, $i1, $i3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r2, $i0, $i1) in method <com.bumptech.glide.disklrucache.StrictLineReader: java.lang.String readLine()> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0) in method <com.bumptech.glide.disklrucache.StrictLineReader: void fillBuf()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.bumptech.glide.disklrucache.StrictLineReader: void fillBuf()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.bumptech.glide.disklrucache.StrictLineReader: void fillBuf()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.bumptech.glide.disklrucache.StrictLineReader: byte[] buf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.bumptech.glide.disklrucache.StrictLineReader: void fillBuf()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.bumptech.glide.disklrucache.StrictLineReader: java.lang.String readLine()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.bumptech.glide.disklrucache.StrictLineReader: byte[] buf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.bumptech.glide.disklrucache.StrictLineReader: java.lang.String readLine()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r2, $i0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r3) in method <com.facebook.ProgressOutputStream: void <init>(java.io.OutputStream,com.facebook.GraphRequestBatch,java.util.Map,long)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r5.<java.io.BufferedInputStream: int read(byte[])>($r3) in method <com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r5.<java.io.BufferedInputStream: int read(byte[])>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Serializer: void writeContentUri(java.lang.String,android.net.Uri,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r5 = r0.<com.facebook.GraphRequest$Serializer: java.io.OutputStream outputStream>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Serializer: void writeContentUri(java.lang.String,android.net.Uri,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.facebook.GraphRequest$Serializer
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Serializer: void writeObject(java.lang.String,java.lang.Object,com.facebook.GraphRequest)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.facebook.GraphRequest$Serializer
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeParameters(android.os.Bundle,com.facebook.GraphRequest$Serializer,com.facebook.GraphRequest)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.facebook.GraphRequest$Companion
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void processRequest(com.facebook.GraphRequestBatch,com.facebook.internal.Logger,int,java.net.URL,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r5.<com.facebook.GraphRequest$Serializer: void <init>(java.io.OutputStream,com.facebook.internal.Logger,boolean)>($r4, $r2, $z0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Serializer: void <init>(java.io.OutputStream,com.facebook.internal.Logger,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.facebook.GraphRequest$Serializer: java.io.OutputStream outputStream> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Serializer: void <init>(java.io.OutputStream,com.facebook.internal.Logger,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void processRequest(com.facebook.GraphRequestBatch,com.facebook.internal.Logger,int,java.net.URL,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.facebook.GraphRequest$Companion
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r12 = $r10
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = (java.io.OutputStream) $r13
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r13.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>($r12)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = (java.io.OutputStream) $r13
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r18.<com.facebook.ProgressOutputStream: void <init>(java.io.OutputStream,com.facebook.GraphRequestBatch,java.util.Map,long)>($r10, $r1, $r17, $l2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.ProgressOutputStream: void <init>(java.io.OutputStream,com.facebook.GraphRequestBatch,java.util.Map,long)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i0) in method <com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r5.<java.io.BufferedInputStream: int read(byte[])>($r3) in method <com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r5.<java.io.BufferedInputStream: int read(byte[])>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r3) in method <com.facebook.ProgressOutputStream: void <init>(java.io.OutputStream,com.facebook.GraphRequestBatch,java.util.Map,long)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r5.<java.io.BufferedInputStream: int read(byte[])>($r3) in method <com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r5.<java.io.BufferedInputStream: int read(byte[])>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.internal.Utility: int copyAndCloseInputStream(java.io.InputStream,java.io.OutputStream)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Serializer: void writeContentUri(java.lang.String,android.net.Uri,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r5 = r0.<com.facebook.GraphRequest$Serializer: java.io.OutputStream outputStream>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Serializer: void writeContentUri(java.lang.String,android.net.Uri,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.facebook.GraphRequest$Serializer
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Serializer: void writeObject(java.lang.String,java.lang.Object,com.facebook.GraphRequest)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.facebook.GraphRequest$Serializer
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeParameters(android.os.Bundle,com.facebook.GraphRequest$Serializer,com.facebook.GraphRequest)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.facebook.GraphRequest$Companion
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void processRequest(com.facebook.GraphRequestBatch,com.facebook.internal.Logger,int,java.net.URL,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r5.<com.facebook.GraphRequest$Serializer: void <init>(java.io.OutputStream,com.facebook.internal.Logger,boolean)>($r4, $r2, $z0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Serializer: void <init>(java.io.OutputStream,com.facebook.internal.Logger,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.facebook.GraphRequest$Serializer: java.io.OutputStream outputStream> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Serializer: void <init>(java.io.OutputStream,com.facebook.internal.Logger,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void processRequest(com.facebook.GraphRequestBatch,com.facebook.internal.Logger,int,java.net.URL,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.facebook.GraphRequest$Companion
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r12 = $r10
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = (java.io.OutputStream) $r13
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r13.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>($r12)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = (java.io.OutputStream) $r13
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r18.<com.facebook.ProgressOutputStream: void <init>(java.io.OutputStream,com.facebook.GraphRequestBatch,java.util.Map,long)>($r10, $r1, $r17, $l2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.ProgressOutputStream: void <init>(java.io.OutputStream,com.facebook.GraphRequestBatch,java.util.Map,long)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12) in method <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r4, $i0, $i1) in method <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r4, $i0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: java.nio.ByteBuffer buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void <init>(java.io.InputStream,boolean,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void <init>(java.io.InputStream,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: com.newrelic.agent.android.instrumentation.io.CountingInputStream errorStream> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: int getResponseCode()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.TransactionStateUtil: void inspectAndInstrumentResponse(com.newrelic.agent.android.instrumentation.TransactionState,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 := @parameter0: com.newrelic.agent.android.instrumentation.TransactionState
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = r0.<com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: java.net.HttpURLConnection impl>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: int getResponseCode()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: int getResponseCode()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrURLConnectionBase: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = r0.<com.google.firebase.perf.network.InstrURLConnectionBase: java.net.HttpURLConnection httpUrlConnection>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrURLConnectionBase: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.google.firebase.perf.network.InstrURLConnectionBase
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrHttpsURLConnection: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.google.firebase.perf.network.InstrHttpsURLConnection: com.google.firebase.perf.network.InstrURLConnectionBase delegate>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrHttpsURLConnection: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.google.firebase.perf.network.InstrHttpsURLConnection
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: javax.net.ssl.HttpsURLConnection impl>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: com.newrelic.agent.android.instrumentation.io.CountingInputStream errorStream>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: int available()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int available()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int available()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: com.newrelic.agent.android.instrumentation.io.CountingInputStream errorStream>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: javax.net.ssl.HttpsURLConnection impl>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r6.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: void <init>(com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension,com.newrelic.agent.android.instrumentation.TransactionState)>(r0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: void <init>(com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension,com.newrelic.agent.android.instrumentation.TransactionState)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension this$0> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: void <init>(com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension,com.newrelic.agent.android.instrumentation.TransactionState)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r5.<com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>($r6)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: java.util.ArrayList streamCompleteListeners>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.io.CountingOutputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i1 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>($r1, $i1, $i2) in method <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int read(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int read(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>($r1, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int read(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: java.nio.ByteBuffer buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void <init>(java.io.InputStream,boolean,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void <init>(java.io.InputStream,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: com.newrelic.agent.android.instrumentation.io.CountingInputStream errorStream> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: int getResponseCode()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.TransactionStateUtil: void inspectAndInstrumentResponse(com.newrelic.agent.android.instrumentation.TransactionState,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 := @parameter0: com.newrelic.agent.android.instrumentation.TransactionState
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = r0.<com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: java.net.HttpURLConnection impl>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: int getResponseCode()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: int getResponseCode()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrURLConnectionBase: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = r0.<com.google.firebase.perf.network.InstrURLConnectionBase: java.net.HttpURLConnection httpUrlConnection>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrURLConnectionBase: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.google.firebase.perf.network.InstrURLConnectionBase
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrHttpsURLConnection: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.google.firebase.perf.network.InstrHttpsURLConnection: com.google.firebase.perf.network.InstrURLConnectionBase delegate>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrHttpsURLConnection: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.google.firebase.perf.network.InstrHttpsURLConnection
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: javax.net.ssl.HttpsURLConnection impl>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: com.newrelic.agent.android.instrumentation.io.CountingInputStream errorStream>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: int available()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int available()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int available()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: com.newrelic.agent.android.instrumentation.io.CountingInputStream errorStream>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: javax.net.ssl.HttpsURLConnection impl>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r6.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: void <init>(com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension,com.newrelic.agent.android.instrumentation.TransactionState)>(r0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: void <init>(com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension,com.newrelic.agent.android.instrumentation.TransactionState)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension this$0> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: void <init>(com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension,com.newrelic.agent.android.instrumentation.TransactionState)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r5.<com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>($r6)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: java.util.ArrayList streamCompleteListeners>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.io.CountingOutputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12) in method <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r4, $i0, $i1) in method <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r4, $i0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: java.nio.ByteBuffer buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void <init>(java.io.InputStream,boolean,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void <init>(java.io.InputStream,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: com.newrelic.agent.android.instrumentation.io.CountingInputStream errorStream> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: int getResponseCode()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.TransactionStateUtil: void inspectAndInstrumentResponse(com.newrelic.agent.android.instrumentation.TransactionState,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 := @parameter0: com.newrelic.agent.android.instrumentation.TransactionState
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = r0.<com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: java.net.HttpURLConnection impl>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: int getResponseCode()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: int getResponseCode()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrURLConnectionBase: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = r0.<com.google.firebase.perf.network.InstrURLConnectionBase: java.net.HttpURLConnection httpUrlConnection>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrURLConnectionBase: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.google.firebase.perf.network.InstrURLConnectionBase
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrHttpsURLConnection: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.google.firebase.perf.network.InstrHttpsURLConnection: com.google.firebase.perf.network.InstrURLConnectionBase delegate>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrHttpsURLConnection: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.google.firebase.perf.network.InstrHttpsURLConnection
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: javax.net.ssl.HttpsURLConnection impl>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: com.newrelic.agent.android.instrumentation.io.CountingInputStream errorStream>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: int available()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int available()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int available()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: com.newrelic.agent.android.instrumentation.io.CountingInputStream errorStream>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: javax.net.ssl.HttpsURLConnection impl>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r6.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: void <init>(com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension,com.newrelic.agent.android.instrumentation.TransactionState)>(r0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: void <init>(com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension,com.newrelic.agent.android.instrumentation.TransactionState)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension this$0> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: void <init>(com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension,com.newrelic.agent.android.instrumentation.TransactionState)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r5.<com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>($r6)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: java.util.ArrayList streamCompleteListeners>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.io.CountingOutputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i1 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>($r1, $i1, $i2) in method <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int read(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int read(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>($r1, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int read(byte[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: java.nio.ByteBuffer buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void fillBuffer()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void <init>(java.io.InputStream,boolean,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void <init>(java.io.InputStream,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: com.newrelic.agent.android.instrumentation.io.CountingInputStream errorStream> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: int getResponseCode()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.TransactionStateUtil: void inspectAndInstrumentResponse(com.newrelic.agent.android.instrumentation.TransactionState,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 := @parameter0: com.newrelic.agent.android.instrumentation.TransactionState
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = r0.<com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: java.net.HttpURLConnection impl>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: int getResponseCode()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension: int getResponseCode()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.HttpURLConnectionExtension
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrURLConnectionBase: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = r0.<com.google.firebase.perf.network.InstrURLConnectionBase: java.net.HttpURLConnection httpUrlConnection>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrURLConnectionBase: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.google.firebase.perf.network.InstrURLConnectionBase
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrHttpsURLConnection: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.google.firebase.perf.network.InstrHttpsURLConnection: com.google.firebase.perf.network.InstrURLConnectionBase delegate>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.firebase.perf.network.InstrHttpsURLConnection: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.google.firebase.perf.network.InstrHttpsURLConnection
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: javax.net.ssl.HttpsURLConnection impl>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: com.newrelic.agent.android.instrumentation.io.CountingInputStream errorStream>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: int available()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int available()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingInputStream: int available()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: com.newrelic.agent.android.instrumentation.io.CountingInputStream errorStream>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.InputStream getErrorStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: void error(java.lang.Exception)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: javax.net.ssl.HttpsURLConnection impl>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r6.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: void <init>(com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension,com.newrelic.agent.android.instrumentation.TransactionState)>(r0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: void <init>(com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension,com.newrelic.agent.android.instrumentation.TransactionState)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension this$0> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension$2: void <init>(com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension,com.newrelic.agent.android.instrumentation.TransactionState)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r5.<com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>($r6)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: java.util.ArrayList streamCompleteListeners>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.newrelic.agent.android.instrumentation.io.CountingOutputStream: com.newrelic.agent.android.instrumentation.io.StreamCompleteListenerManager listenerManager>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.io.CountingOutputStream: void addStreamCompleteListener(com.newrelic.agent.android.instrumentation.io.StreamCompleteListener)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.newrelic.agent.android.instrumentation.HttpsURLConnectionExtension: java.io.OutputStream getOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.facebook.GraphRequest$Companion: void serializeToUrlConnection$facebook_core_release(com.facebook.GraphRequestBatch,java.net.HttpURLConnection)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r12)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Data flow solver took 1429 seconds. Maximum memory consumption: 68213 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication - Found 7 leaks
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'SummaryStatistics'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Telemetry'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'Telemetry_sha256Hash_idx' for table 'Telemetry
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Callbacks'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallbackSummaries'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'CallbackSummaries_sha256Hash_idx' for table 'CallbackSummaries
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'AppSizes'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'AppSizes_sha256Hash_idx' for table 'AppSizes
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallgraphSizes'
