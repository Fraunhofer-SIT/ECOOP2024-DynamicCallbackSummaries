Source: specialinvoke r0.<org.bouncycastle.asn1.LimitedInputStream: void <init>(java.io.InputStream,int)>($r1, $i0)
specialinvoke r0.<org.bouncycastle.asn1.LimitedInputStream: void <init>(java.io.InputStream,int)>($r1, $i0) in <org.bouncycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>
Sink: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, $i0, $i1) in <org.bouncycastle.asn1.ASN1OutputStream: void write(byte[],int,int)>

<org.bouncycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>: specialinvoke r0.<org.bouncycastle.asn1.LimitedInputStream: void <init>(java.io.InputStream,int)>($r1, $i0)
<org.bouncycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>: r0 := @this: org.bouncycastle.asn1.IndefiniteLengthInputStream
<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.ASN1Primitive readObject()>: r0 := @this: org.bouncycastle.asn1.ASN1InputStream
<org.bouncycastle.asn1.LazyConstructionEnumeration: java.lang.Object readObject()>: $r4 = r0.<org.bouncycastle.asn1.LazyConstructionEnumeration: org.bouncycastle.asn1.ASN1InputStream aIn>
<org.bouncycastle.asn1.LazyConstructionEnumeration: java.lang.Object readObject()>: r0 := @this: org.bouncycastle.asn1.LazyConstructionEnumeration
<org.bouncycastle.asn1.LazyConstructionEnumeration: void <init>(byte[])>: r0.<org.bouncycastle.asn1.LazyConstructionEnumeration: org.bouncycastle.asn1.ASN1InputStream aIn> = $r2
<org.bouncycastle.asn1.LazyConstructionEnumeration: void <init>(byte[])>: specialinvoke $r2.<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[],boolean)>($r1, 1)
<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[],boolean)>: specialinvoke r0.<org.bouncycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream,int,boolean)>($r2, $i0, 1)
<org.bouncycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream,int,boolean)>: specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>($r1)
<org.bouncycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream,int,boolean)>: return
<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[],boolean)>: specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1)
<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[],boolean)>: r0 := @this: org.bouncycastle.asn1.ASN1InputStream
<org.bouncycastle.asn1.LazyConstructionEnumeration: void <init>(byte[])>: r0 := @this: org.bouncycastle.asn1.LazyConstructionEnumeration
<org.bouncycastle.asn1.LazyEncodedSequence: void force()>: $r3 = r0.<org.bouncycastle.asn1.LazyEncodedSequence: byte[] encoded>
<org.bouncycastle.asn1.LazyEncodedSequence: void force()>: r0 := @this: org.bouncycastle.asn1.LazyEncodedSequence
<org.bouncycastle.asn1.LazyEncodedSequence: org.bouncycastle.asn1.ASN1Primitive toDERObject()>: r0 := @this: org.bouncycastle.asn1.LazyEncodedSequence
<org.bouncycastle.asn1.DERSequence: void encode(org.bouncycastle.asn1.ASN1OutputStream,boolean)>: $r6 = interfaceinvoke $r5.<org.bouncycastle.asn1.ASN1Encodable: org.bouncycastle.asn1.ASN1Primitive toASN1Primitive()>()
<org.bouncycastle.asn1.ASN1Primitive: org.bouncycastle.asn1.ASN1Primitive toASN1Primitive()>: r0 := @this: org.bouncycastle.asn1.ASN1Primitive
<org.bouncycastle.asn1.DERSequence: void encode(org.bouncycastle.asn1.ASN1OutputStream,boolean)>: $r5 = $r4[$i1]
<org.bouncycastle.asn1.DERSequence: void encode(org.bouncycastle.asn1.ASN1OutputStream,boolean)>: $r4 = r0.<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Encodable[] elements>
<org.bouncycastle.asn1.DERSequence: void encode(org.bouncycastle.asn1.ASN1OutputStream,boolean)>: $r4 = r0.<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Encodable[] elements>
<org.bouncycastle.asn1.DERSequence: void encode(org.bouncycastle.asn1.ASN1OutputStream,boolean)>: $r5 = $r4[$i1]
<org.bouncycastle.asn1.DERSequence: void encode(org.bouncycastle.asn1.ASN1OutputStream,boolean)>: $r6 = interfaceinvoke $r5.<org.bouncycastle.asn1.ASN1Encodable: org.bouncycastle.asn1.ASN1Primitive toASN1Primitive()>()
<org.bouncycastle.asn1.ASN1Primitive: org.bouncycastle.asn1.ASN1Primitive toASN1Primitive()>: return r0
<org.bouncycastle.asn1.DERSequence: void encode(org.bouncycastle.asn1.ASN1OutputStream,boolean)>: $r2[$i1] = $r6
<org.bouncycastle.asn1.DERSequence: void encode(org.bouncycastle.asn1.ASN1OutputStream,boolean)>: $r6 = $r2[$i2]
<org.bouncycastle.asn1.DERSequence: void encode(org.bouncycastle.asn1.ASN1OutputStream,boolean)>: virtualinvoke $r6.<org.bouncycastle.asn1.ASN1Primitive: void encode(org.bouncycastle.asn1.ASN1OutputStream,boolean)>($r3, 1)
<org.bouncycastle.asn1.LazyEncodedSequence: void encode(org.bouncycastle.asn1.ASN1OutputStream,boolean)>: $r2 = r0.<org.bouncycastle.asn1.LazyEncodedSequence: byte[] encoded>
<org.bouncycastle.asn1.LazyEncodedSequence: void encode(org.bouncycastle.asn1.ASN1OutputStream,boolean)>: virtualinvoke $r1.<org.bouncycastle.asn1.ASN1OutputStream: void writeEncoded(boolean,int,byte[])>($z0, 48, $r2)
<org.bouncycastle.asn1.ASN1OutputStream: void writeEncoded(boolean,int,byte[])>: virtualinvoke r0.<org.bouncycastle.asn1.ASN1OutputStream: void write(byte[],int,int)>($r1, 0, $i0)
<org.bouncycastle.asn1.ASN1OutputStream: void write(byte[],int,int)>: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, $i0, $i1)
