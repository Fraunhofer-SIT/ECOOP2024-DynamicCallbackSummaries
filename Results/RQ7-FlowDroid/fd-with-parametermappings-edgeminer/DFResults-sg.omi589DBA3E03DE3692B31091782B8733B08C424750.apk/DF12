Source: $i1 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r1)
$i1 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r1) in <l.scheduleWithFixedDelay: int read(byte[])>
Sink: virtualinvoke $r4.<com.facebook.common.memory.PooledByteBufferOutputStream: void write(byte[],int,int)>($r7, 0, $i1) in <com.facebook.imagepipeline.producers.NetworkFetchProducer: void onResponse(com.facebook.imagepipeline.producers.FetchState,java.io.InputStream,int)>

<l.scheduleWithFixedDelay: int read(byte[])>: $i1 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r1)
<l.scheduleWithFixedDelay: int read(byte[])>: throw $r7
<com.facebook.imagepipeline.producers.NetworkFetchProducer: void onResponse(com.facebook.imagepipeline.producers.FetchState,java.io.InputStream,int)>: virtualinvoke $r4.<com.facebook.common.memory.PooledByteBufferOutputStream: void write(byte[],int,int)>($r7, 0, $i1)
