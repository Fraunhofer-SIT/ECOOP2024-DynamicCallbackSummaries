    public static java.lang.String unzip(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r10, $r11, $r12, $r13, $r14, $r15;
        byte[] $r9;
        java.util.zip.ZipInputStream $r5, $r18;
        java.io.BufferedInputStream $r17;
        long $l0;
        int $i1;
        java.lang.String $r2, $r3, $r4, $r7, $r8;
        java.util.zip.ZipEntry $r6;
        boolean $z0;
        java.io.FileOutputStream $r21;
        java.io.IOException $r22;
        java.io.FileInputStream $r16;
        java.lang.Exception $r0, $r1;
        java.io.File $r20;
        java.lang.StringBuilder $r19;

        $r2 := @parameter0: java.lang.String;

        $r3 := @parameter1: java.lang.String;

        $r4 := @parameter2: java.lang.String;

     label01:
        $r18 = new java.util.zip.ZipInputStream;

     label02:
        $r5 = $r18;

     label03:
        $r17 = new java.io.BufferedInputStream;

     label04:
        $r16 = new java.io.FileInputStream;

     label05:
        specialinvoke $r16.<java.io.FileInputStream: void <init>(java.lang.String)>($r2);

        specialinvoke $r17.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r16, 1024);

        specialinvoke $r18.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r17);

     label06:
        $r6 = virtualinvoke $r18.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

     label07:
        if $r6 == null goto label40;

     label08:
        $r7 = virtualinvoke $r6.<java.util.zip.ZipEntry: java.lang.String getName()>();

     label09:
        $r19 = new java.lang.StringBuilder;

     label10:
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unzip, name:");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size:");

        $l0 = virtualinvoke $r6.<java.util.zip.ZipEntry: long getSize()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r8 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.netease.ntunisdk.ngplugin.common.PluginLogger: void detail(java.lang.String)>($r8);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("AndroidManifest.xml");

     label11:
        if $z0 != 0 goto label37;

     label12:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

     label13:
        if $z0 != 0 goto label37;

     label14:
        $z0 = virtualinvoke $r6.<java.util.zip.ZipEntry: boolean isDirectory()>();

     label15:
        if $z0 != 0 goto label06;

     label16:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r7);

     label17:
        if $z0 != 0 goto label06;

     label18:
        $z0 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>($r4);

     label19:
        if $z0 == 0 goto label06;

     label20:
        $r20 = new java.io.File;

     label21:
        specialinvoke $r20.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r3, $r4);

        $z0 = virtualinvoke $r20.<java.io.File: boolean exists()>();

     label22:
        if $z0 == 0 goto label26;

     label23:
        $z0 = virtualinvoke $r20.<java.io.File: boolean delete()>();

     label24:
        $r19 = new java.lang.StringBuilder;

     label25:
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("delete result: ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r2 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.netease.ntunisdk.ngplugin.common.PluginLogger: void detail(java.lang.String)>($r2);

     label26:
        $r9 = newarray (byte)[1024];

     label27:
        $r21 = new java.io.FileOutputStream;

     label28:
        specialinvoke $r21.<java.io.FileOutputStream: void <init>(java.io.File)>($r20);

     label29:
        $i1 = virtualinvoke $r18.<java.util.zip.ZipInputStream: int read(byte[],int,int)>($r9, 0, 1024);

     label30:
        if $i1 <= 0 goto label33;

     label31:
        virtualinvoke $r21.<java.io.OutputStream: void write(byte[],int,int)>($r9, 0, $i1);

     label32:
        goto label29;

     label33:
        virtualinvoke $r21.<java.io.OutputStream: void flush()>();

        virtualinvoke $r21.<java.io.OutputStream: void close()>();

        $r2 = virtualinvoke $r20.<java.io.File: java.lang.String getAbsolutePath()>();

     label34:
        virtualinvoke $r18.<java.util.zip.ZipInputStream: void close()>();

     label35:
        return $r2;

     label36:
        $r10 := @caughtexception;

        $r22 = (java.io.IOException) $r10;

        virtualinvoke $r22.<java.io.IOException: void printStackTrace()>();

        return $r2;

     label37:
        virtualinvoke $r18.<java.util.zip.ZipInputStream: void close()>();

     label38:
        return $r2;

     label39:
        $r11 := @caughtexception;

        $r22 = (java.io.IOException) $r11;

        virtualinvoke $r22.<java.io.IOException: void printStackTrace()>();

        return $r2;

     label40:
        virtualinvoke $r18.<java.util.zip.ZipInputStream: void close()>();

     label41:
        return null;

     label42:
        $r12 := @caughtexception;

        $r22 = (java.io.IOException) $r12;

        virtualinvoke $r22.<java.io.IOException: void printStackTrace()>();

        return null;

     label43:
        $r13 := @caughtexception;

        goto label45;

     label44:
        $r13 := @caughtexception;

        $r5 = null;

     label45:
        if $r5 == null goto label49;

     label46:
        virtualinvoke $r5.<java.util.zip.ZipInputStream: void close()>();

     label47:
        goto label49;

     label48:
        $r14 := @caughtexception;

        $r22 = (java.io.IOException) $r14;

        virtualinvoke $r22.<java.io.IOException: void printStackTrace()>();

     label49:
        throw $r13;

     label50:
        $r5 = null;

     label51:
        if $r5 == null goto label57;

     label52:
        virtualinvoke $r5.<java.util.zip.ZipInputStream: void close()>();

     label53:
        return null;

     label54:
        $r15 := @caughtexception;

        $r22 = (java.io.IOException) $r15;

        virtualinvoke $r22.<java.io.IOException: void printStackTrace()>();

        return null;

     label55:
        $r0 := @caughtexception;

        goto label50;

     label56:
        $r1 := @caughtexception;

        goto label51;

     label57:
        return null;

        catch java.lang.Exception from label05 to label06 with label55;
        catch java.lang.Throwable from label01 to label02 with label44;
        catch java.lang.Throwable from label03 to label04 with label44;
        catch java.lang.Throwable from label04 to label05 with label44;
        catch java.lang.Throwable from label05 to label06 with label44;
        catch java.lang.Exception from label06 to label07 with label56;
        catch java.lang.Exception from label08 to label09 with label56;
        catch java.lang.Exception from label10 to label11 with label56;
        catch java.lang.Exception from label12 to label13 with label56;
        catch java.lang.Exception from label14 to label15 with label56;
        catch java.lang.Exception from label16 to label17 with label56;
        catch java.lang.Exception from label18 to label19 with label56;
        catch java.lang.Exception from label21 to label22 with label56;
        catch java.lang.Exception from label23 to label24 with label56;
        catch java.lang.Exception from label25 to label26 with label56;
        catch java.lang.Exception from label28 to label30 with label56;
        catch java.lang.Exception from label31 to label32 with label56;
        catch java.lang.Exception from label33 to label34 with label56;
        catch java.lang.Throwable from label06 to label07 with label43;
        catch java.lang.Throwable from label08 to label10 with label43;
        catch java.lang.Throwable from label10 to label11 with label43;
        catch java.lang.Throwable from label12 to label13 with label43;
        catch java.lang.Throwable from label14 to label15 with label43;
        catch java.lang.Throwable from label16 to label17 with label43;
        catch java.lang.Throwable from label18 to label19 with label43;
        catch java.lang.Throwable from label20 to label21 with label43;
        catch java.lang.Throwable from label21 to label22 with label43;
        catch java.lang.Throwable from label23 to label25 with label43;
        catch java.lang.Throwable from label25 to label26 with label43;
        catch java.lang.Throwable from label27 to label28 with label43;
        catch java.lang.Throwable from label28 to label30 with label43;
        catch java.lang.Throwable from label31 to label32 with label43;
        catch java.lang.Throwable from label33 to label34 with label43;
        catch java.io.IOException from label34 to label35 with label36;
        catch java.io.IOException from label37 to label38 with label39;
        catch java.io.IOException from label40 to label41 with label42;
        catch java.io.IOException from label46 to label47 with label48;
        catch java.io.IOException from label52 to label53 with label54;
    }
