    private static byte[] read(java.io.InputStream)
    {
        java.lang.Throwable $r2;
        byte[] $r1;
        java.io.ByteArrayOutputStream $r3;
        int $i0, $i1;
        java.io.IOException $r4;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

     label01:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int available()>();

     label02:
        $i1 = 10240;

     label03:
        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(10240, $i0);

     label04:
        if $i0 <= 0 goto label05;

        $i1 = $i0;

     label05:
        $r1 = newarray (byte)[$i1];

     label06:
        $i1 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r1);

     label07:
        if $i1 <= 0 goto label10;

     label08:
        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, 0, $i1);

     label09:
        goto label06;

     label10:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r2 := @caughtexception;

        $r4 = (java.io.IOException) $r2;

        virtualinvoke $r4.<java.io.IOException: void printStackTrace()>();

     label13:
        $r1 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r1;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.io.IOException from label03 to label04 with label12;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.io.IOException from label08 to label09 with label12;
        catch java.io.IOException from label10 to label11 with label12;
    }
