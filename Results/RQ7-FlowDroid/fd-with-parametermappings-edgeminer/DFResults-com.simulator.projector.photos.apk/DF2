Source: $i1 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r2)
$i1 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r2) in <com.parse.ParseIOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,byte[])>
Sink: virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r1) in <com.parse.ParseFileUtils: void writeByteArrayToFile(java.io.File,byte[])>

<com.parse.ParseIOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,byte[])>: $i1 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r2)
<com.parse.ParseIOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,byte[])>: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i1)
<com.parse.ParseIOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream,byte[])>: return l2
<com.parse.ParseIOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>: return $l0
<com.parse.ParseIOUtils: int copy(java.io.InputStream,java.io.OutputStream)>: return -1
<com.parse.ParseIOUtils: byte[] toByteArray(java.io.InputStream)>: $r2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
<com.parse.ParseIOUtils: byte[] toByteArray(java.io.InputStream)>: return $r2
<com.parse.ParseFileUtils: byte[] readFileToByteArray(java.io.File)>: return $r3
<com.parse.ParseFileUtils: java.lang.String readFileToString(java.io.File,java.nio.charset.Charset)>: specialinvoke $r2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r3, $r1)
<com.parse.ParseFileUtils: java.lang.String readFileToString(java.io.File,java.nio.charset.Charset)>: return $r2
<com.parse.ParseFileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>: return $r1
<com.parse.ParseFileUtils: org.json.JSONObject readFileToJSONObject(java.io.File)>: specialinvoke $r2.<org.json.JSONObject: void <init>(java.lang.String)>($r1)
<com.parse.ParseFileUtils: org.json.JSONObject readFileToJSONObject(java.io.File)>: return $r2
<com.parse.LocalIdManager: com.parse.LocalIdManager$MapEntry getMapEntry(java.lang.String)>: $r1 = virtualinvoke $r7.<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>("objectId", null)
<com.parse.LocalIdManager: com.parse.LocalIdManager$MapEntry getMapEntry(java.lang.String)>: r8.<com.parse.LocalIdManager$MapEntry: java.lang.String objectId> = $r1
<com.parse.LocalIdManager: com.parse.LocalIdManager$MapEntry getMapEntry(java.lang.String)>: return r8
<com.parse.LocalIdManager: void releaseLocalIdOnDisk(java.lang.String)>: specialinvoke r0.<com.parse.LocalIdManager: void putMapEntry(java.lang.String,com.parse.LocalIdManager$MapEntry)>($r1, $r2)
<com.parse.LocalIdManager: void putMapEntry(java.lang.String,com.parse.LocalIdManager$MapEntry)>: $r9 = $r2.<com.parse.LocalIdManager$MapEntry: java.lang.String objectId>
<com.parse.LocalIdManager: void putMapEntry(java.lang.String,com.parse.LocalIdManager$MapEntry)>: virtualinvoke r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("objectId", $r9)
<com.parse.LocalIdManager: void putMapEntry(java.lang.String,com.parse.LocalIdManager$MapEntry)>: staticinvoke <com.parse.ParseFileUtils: void writeJSONObjectToFile(java.io.File,org.json.JSONObject)>(r3, r5)
<com.parse.ParseFileUtils: void writeJSONObjectToFile(java.io.File,org.json.JSONObject)>: $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String toString()>()
<com.parse.ParseFileUtils: void writeJSONObjectToFile(java.io.File,org.json.JSONObject)>: $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3)
<com.parse.ParseFileUtils: void writeJSONObjectToFile(java.io.File,org.json.JSONObject)>: staticinvoke <com.parse.ParseFileUtils: void writeByteArrayToFile(java.io.File,byte[])>($r0, $r4)
<com.parse.ParseFileUtils: void writeByteArrayToFile(java.io.File,byte[])>: virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r1)
