    public int available() throws java.io.IOException
    {
        java.lang.Throwable $r3;
        com.newrelic.agent.android.instrumentation.io.CountingInputStream r0;
        java.nio.ByteBuffer $r1;
        java.lang.Exception $r4;
        int $i0, $i1;
        boolean $z0;
        java.io.InputStream $r2;

        r0 := @this: com.newrelic.agent.android.instrumentation.io.CountingInputStream;

        $z0 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: boolean enableBuffering>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        $r2 = r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: java.io.InputStream impl>;

     label3:
        $i1 = virtualinvoke $r2.<java.io.InputStream: int available()>();

     label4:
        $i0 = $i0 + $i1;

        return $i0;

     label5:
        $r3 := @caughtexception;

        $r4 = (java.lang.Exception) $r3;

        specialinvoke r0.<com.newrelic.agent.android.instrumentation.io.CountingInputStream: void notifyStreamError(java.lang.Exception)>($r4);

        throw $r3;

        catch java.io.IOException from label3 to label4 with label5;
    }
