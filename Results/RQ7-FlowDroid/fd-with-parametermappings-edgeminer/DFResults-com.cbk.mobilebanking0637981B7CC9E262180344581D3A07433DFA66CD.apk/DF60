Source: $i1 = virtualinvoke $r1.<java.io.InputStream: int read()>()
$i1 = virtualinvoke $r1.<java.io.InputStream: int read()>() in <util.h.xy.ct.rz: int read()>
Sink: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r0, 0, $i0) in <util.h.xy.eh.a: void ˋ(java.io.InputStream,java.io.OutputStream)>

<util.h.xy.ct.rz: int read()>: $i1 = virtualinvoke $r1.<java.io.InputStream: int read()>()
<util.h.xy.ct.rz: int read()>: r0.<util.h.xy.ct.rz: int ˏ> = $i1
<util.h.xy.ct.rz: int read()>: r0 := @this: util.h.xy.ct.rz
<util.h.xy.ct.rz: int read(byte[],int,int)>: $r3 = r0.<util.h.xy.ct.ab: java.io.InputStream ˎ>
<util.h.xy.ct.rz: int read(byte[],int,int)>: r0 := @this: util.h.xy.ct.rz
<util.h.xy.ct.rz: int read(byte[],int,int)>: $r3 = r0.<util.h.xy.ct.ab: java.io.InputStream ˎ>
<util.h.xy.ct.rz: int read(byte[],int,int)>: $i0 = r0.<util.h.xy.ct.rz: int ˏ>
<util.h.xy.ct.rz: int read(byte[],int,int)>: $b4 = (byte) $i0
<util.h.xy.ct.rz: int read(byte[],int,int)>: $r1[$i1] = $b4
<util.h.xy.ct.rz: int read(byte[],int,int)>: throw $r5
<util.h.xy.ct.my: int read(byte[],int,int)>: throw $r3
<util.h.xy.ct.mn: int read(byte[],int,int)>: return $i2
<util.h.xy.eh.a: void ˋ(java.io.InputStream,java.io.OutputStream)>: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r0, 0, $i0)
