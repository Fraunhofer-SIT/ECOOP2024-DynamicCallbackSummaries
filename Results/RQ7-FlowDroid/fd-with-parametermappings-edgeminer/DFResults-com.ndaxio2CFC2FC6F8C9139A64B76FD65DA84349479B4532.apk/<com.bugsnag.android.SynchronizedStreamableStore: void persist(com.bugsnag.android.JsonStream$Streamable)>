    public final void persist(com.bugsnag.android.JsonStream$Streamable) throws java.io.IOException
    {
        java.lang.Throwable $r15, $r16, $r17;
        com.bugsnag.android.JsonStream $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock $r4;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r5;
        java.nio.charset.Charset $r8;
        java.io.OutputStreamWriter $r11;
        java.lang.String $r3;
        boolean $z0;
        java.io.OutputStream $r10;
        java.io.BufferedWriter $r13;
        java.io.FileOutputStream $r9;
        java.io.File $r7;
        java.util.concurrent.locks.Lock $r6;
        java.io.Closeable $r14;
        java.io.Writer $r12;
        com.bugsnag.android.JsonStream$Streamable $r2;
        com.bugsnag.android.SynchronizedStreamableStore r0;

        r0 := @this: com.bugsnag.android.SynchronizedStreamableStore;

        $r2 := @parameter0: com.bugsnag.android.JsonStream$Streamable;

        $r3 = staticinvoke <runtime.Strings.StringIndexer: java.lang.String b08c60020(java.lang.String)>("11285");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)>($r2, $r3);

        $r4 = r0.<com.bugsnag.android.SynchronizedStreamableStore: java.util.concurrent.locks.ReentrantReadWriteLock lock>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        $r3 = staticinvoke <runtime.Strings.StringIndexer: java.lang.String b08c60020(java.lang.String)>("11286");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>($r5, $r3);

        $r6 = (java.util.concurrent.locks.Lock) $r5;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $r7 = r0.<com.bugsnag.android.SynchronizedStreamableStore: java.io.File file>;

        $r8 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

        $r9 = new java.io.FileOutputStream;

        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.io.File)>($r7);

        $r10 = (java.io.OutputStream) $r9;

        $r11 = new java.io.OutputStreamWriter;

        specialinvoke $r11.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r10, $r8);

        $r12 = (java.io.Writer) $r11;

        $z0 = $r12 instanceof java.io.BufferedWriter;

     label02:
        if $z0 == 0 goto label05;

     label03:
        $r13 = (java.io.BufferedWriter) $r12;

     label04:
        goto label06;

     label05:
        $r13 = new java.io.BufferedWriter;

        specialinvoke $r13.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r12, 8192);

     label06:
        $r14 = (java.io.Closeable) $r13;

     label07:
        $r13 = (java.io.BufferedWriter) $r14;

        $r1 = new com.bugsnag.android.JsonStream;

        $r12 = (java.io.Writer) $r13;

        specialinvoke $r1.<com.bugsnag.android.JsonStream: void <init>(java.io.Writer)>($r12);

        interfaceinvoke $r2.<com.bugsnag.android.JsonStream$Streamable: void toStream(com.bugsnag.android.JsonStream)>($r1);

     label08:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r14, null);

     label09:
        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label10:
        $r15 := @caughtexception;

     label11:
        throw $r15;

     label12:
        $r16 := @caughtexception;

     label13:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r14, $r15);

        throw $r16;

     label14:
        $r17 := @caughtexception;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label14;
    }
