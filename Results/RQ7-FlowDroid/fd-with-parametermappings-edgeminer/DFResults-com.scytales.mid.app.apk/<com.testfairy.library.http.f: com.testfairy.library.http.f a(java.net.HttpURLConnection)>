    public static com.testfairy.library.http.f a(java.net.HttpURLConnection)
    {
        java.net.HttpURLConnection $r2;
        byte[] $r7, $r8;
        java.util.zip.GZIPInputStream $r22;
        byte $b3;
        java.util.Map $r6;
        java.lang.Thread $r14;
        java.lang.reflect.Method $r13;
        boolean $z0;
        com.testfairy.library.http.f $r21;
        java.lang.Throwable $r15, $r16, $r17, $r18, $r19;
        java.lang.Object[] $r9;
        java.io.ByteArrayOutputStream $r23;
        long $l2;
        short $s4, $s5;
        int $i0, $i1;
        java.lang.String $r11;
        java.io.IOException $r5, $r20;
        java.lang.IllegalArgumentException $r24;
        java.lang.Object $r4, $r10;
        java.lang.Class $r12;
        java.lang.OutOfMemoryError $r0, $r1;
        java.io.InputStream $r3;

        $r2 := @parameter0: java.net.HttpURLConnection;

        $i0 = <com.testfairy.library.http.f: int valueOf>;

        $i0 = $i0 + 77;

        $i1 = $i0 % 128;

        <com.testfairy.library.http.f: int ComponentActivity$4> = $i1;

        $i0 = $i0 % 2;

        if $i0 != 0 goto label01;

        $z0 = 0;

        goto label02;

     label01:
        $z0 = 1;

     label02:
        if $z0 == 0 goto label05;

     label03:
        $r3 = virtualinvoke $r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

     label04:
        $r4 = $r3;

        if $r3 != null goto label15;

        goto label09;

     label05:
        $r3 = virtualinvoke $r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

     label06:
        $r4 = $r3;

     label07:
        $i0 = 63 / 0;

     label08:
        if $r3 != null goto label15;

     label09:
        virtualinvoke $r2.<java.net.HttpURLConnection: void disconnect()>();

     label10:
        $r20 = new java.io.IOException;

     label11:
        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>("No input stream found");

     label12:
        $r21 = new com.testfairy.library.http.f;

     label13:
        specialinvoke $r21.<com.testfairy.library.http.f: void <init>(java.io.IOException)>($r20);

     label14:
        return $r21;

     label15:
        $r6 = virtualinvoke $r2.<java.net.URLConnection: java.util.Map getHeaderFields()>();

        $l2 = staticinvoke <com.testfairy.library.http.f: long a(java.util.Map)>($r6);

     label16:
        $b3 = $l2 cmp 2147483647L;

        $i0 = (int) $b3;

        if $i0 > 0 goto label70;

        $i0 = <com.testfairy.library.http.f: int valueOf>;

        $i0 = $i0 + 51;

        $i1 = $i0 % 128;

        <com.testfairy.library.http.f: int ComponentActivity$4> = $i1;

        $i0 = $i0 % 2;

        if $i0 != 0 goto label17;

        $b3 = 43;

        goto label18;

     label17:
        $b3 = 25;

     label18:
        if $b3 == 43 goto label21;

     label19:
        $z0 = staticinvoke <com.testfairy.library.http.f: boolean b(java.util.Map)>($r6);

     label20:
        if $z0 == 0 goto label27;

        goto label24;

     label21:
        $z0 = staticinvoke <com.testfairy.library.http.f: boolean b(java.util.Map)>($r6);

     label22:
        $i0 = 97 / 0;

     label23:
        if $z0 == 0 goto label27;

     label24:
        $r22 = new java.util.zip.GZIPInputStream;

        $r3 = (java.io.InputStream) $r4;

     label25:
        specialinvoke $r22.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>($r3);

     label26:
        $r4 = $r22;

     label27:
        $b3 = $l2 cmp 0L;

        $i0 = (int) $b3;

        if $i0 >= 0 goto label31;

        $i0 = <com.testfairy.library.http.f: int ComponentActivity$4>;

        $i0 = $i0 + 59;

        $i1 = $i0 % 128;

        <com.testfairy.library.http.f: int valueOf> = $i1;

        $i0 = $i0 % 2;

        if $i0 == 0 goto label28;

        $b3 = 65;

        goto label29;

     label28:
        $b3 = 35;

     label29:
        if $b3 == 65 goto label30;

        $i0 = 4096;

        goto label32;

     label30:
        $i0 = 2779;

        goto label32;

     label31:
        $i0 = (int) $l2;

     label32:
        $r23 = new java.io.ByteArrayOutputStream;

     label33:
        specialinvoke $r23.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

     label34:
        $r7 = newarray (byte)[4096];

     label35:
        $r3 = (java.io.InputStream) $r4;

     label36:
        $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r7);

     label37:
        if $i0 == -1 goto label57;

        $i1 = <com.testfairy.library.http.f: int ComponentActivity$4>;

        $i1 = $i1 + 95;

        $i1 = $i1 % 128;

        <com.testfairy.library.http.f: int valueOf> = $i1;

     label38:
        $r8 = <com.testfairy.library.http.f: byte[] ModerationWorker>;

        $b3 = $r8[15];

     label39:
        $i1 = (int) $b3;

        $i1 = $i1 - 1;

        $b3 = (byte) $i1;

     label40:
        $r9 = newarray (java.lang.Object)[1];

     label41:
        $s4 = (short) $b3;

        $s5 = (short) $b3;

        $i1 = (int) $b3;

     label42:
        staticinvoke <com.testfairy.library.http.f: void values(short,short,int,java.lang.Object[])>($s4, $s5, $i1, $r9);

        $r10 = $r9[0];

        $r11 = (java.lang.String) $r10;

        $r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r11);

        $r8 = <com.testfairy.library.http.f: byte[] ModerationWorker>;

        $b3 = $r8[15];

     label43:
        $r9 = newarray (java.lang.Object)[1];

     label44:
        $s4 = (short) $b3;

        $s5 = (short) $b3;

        $i1 = (int) $b3;

     label45:
        staticinvoke <com.testfairy.library.http.f: void values(short,short,int,java.lang.Object[])>($s4, $s5, $i1, $r9);

        $r10 = $r9[0];

        $r11 = (java.lang.String) $r10;

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r11, null);

        $r10 = virtualinvoke $r13.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, null);

        $r14 = (java.lang.Thread) $r10;

     label46:
        $z0 = virtualinvoke $r14.<java.lang.Thread: boolean isInterrupted()>();

     label47:
        if $z0 != 0 goto label48;

        $z0 = 1;

        goto label49;

     label48:
        $z0 = 0;

     label49:
        if $z0 == 0 goto label57;

     label50:
        virtualinvoke $r23.<java.io.OutputStream: void write(byte[],int,int)>($r7, 0, $i0);

     label51:
        goto label35;

     label52:
        $r15 := @caughtexception;

     label53:
        $r16 = virtualinvoke $r15.<java.lang.Throwable: java.lang.Throwable getCause()>();

     label54:
        if $r16 == null goto label56;

     label55:
        throw $r16;

     label56:
        throw $r15;

     label57:
        $r3 = (java.io.InputStream) $r4;

     label58:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

        $r7 = virtualinvoke $r23.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i0 = virtualinvoke $r2.<java.net.HttpURLConnection: int getResponseCode()>();

        $r21 = new com.testfairy.library.http.f;

     label59:
        specialinvoke $r21.<com.testfairy.library.http.f: void <init>(int,byte[])>($i0, $r7);

     label60:
        virtualinvoke $r2.<java.net.HttpURLConnection: void disconnect()>();

     label61:
        return $r21;

     label62:
        $r16 := @caughtexception;

        goto label68;

     label63:
        staticinvoke <java.lang.System: void gc()>();

        $r3 = (java.io.InputStream) $r4;

        virtualinvoke $r3.<java.io.InputStream: void close()>();

        $r21 = new com.testfairy.library.http.f;

     label64:
        $r20 = new java.io.IOException;

     label65:
        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>("File too large to fit into available memory");

        specialinvoke $r21.<com.testfairy.library.http.f: void <init>(java.io.IOException)>($r20);

     label66:
        virtualinvoke $r2.<java.net.HttpURLConnection: void disconnect()>();

     label67:
        return $r21;

     label68:
        virtualinvoke $r2.<java.net.HttpURLConnection: void disconnect()>();

        throw $r16;

     label69:
        $r17 := @caughtexception;

        throw $r17;

     label70:
        $r3 = (java.io.InputStream) $r4;

     label71:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

        virtualinvoke $r2.<java.net.HttpURLConnection: void disconnect()>();

     label72:
        $r24 = new java.lang.IllegalArgumentException;

     label73:
        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP entity too large to be buffered in memory");

     label74:
        throw $r24;

     label75:
        $r18 := @caughtexception;

        throw $r18;

     label76:
        $r19 := @caughtexception;

        $r21 = new com.testfairy.library.http.f;

        $r5 = (java.io.IOException) $r19;

        specialinvoke $r21.<com.testfairy.library.http.f: void <init>(java.io.IOException)>($r5);

        return $r21;

     label77:
        $r0 := @caughtexception;

        goto label63;

     label78:
        $r1 := @caughtexception;

        goto label63;

        catch java.io.IOException from label03 to label04 with label76;
        catch java.io.IOException from label05 to label06 with label76;
        catch java.lang.Throwable from label07 to label08 with label75;
        catch java.io.IOException from label09 to label10 with label76;
        catch java.io.IOException from label11 to label12 with label76;
        catch java.io.IOException from label13 to label14 with label76;
        catch java.io.IOException from label15 to label16 with label76;
        catch java.io.IOException from label19 to label20 with label76;
        catch java.io.IOException from label21 to label22 with label76;
        catch java.lang.Throwable from label22 to label23 with label69;
        catch java.io.IOException from label25 to label26 with label76;
        catch java.lang.OutOfMemoryError from label32 to label33 with label77;
        catch java.lang.OutOfMemoryError from label33 to label34 with label77;
        catch java.lang.OutOfMemoryError from label36 to label37 with label77;
        catch java.lang.Throwable from label32 to label33 with label62;
        catch java.lang.Throwable from label33 to label34 with label62;
        catch java.lang.Throwable from label35 to label37 with label62;
        catch java.lang.Throwable from label38 to label39 with label52;
        catch java.lang.Throwable from label40 to label41 with label52;
        catch java.lang.Throwable from label42 to label43 with label52;
        catch java.lang.Throwable from label43 to label44 with label52;
        catch java.lang.Throwable from label45 to label46 with label52;
        catch java.lang.OutOfMemoryError from label46 to label47 with label78;
        catch java.lang.OutOfMemoryError from label50 to label51 with label78;
        catch java.lang.OutOfMemoryError from label53 to label54 with label78;
        catch java.lang.OutOfMemoryError from label55 to label57 with label78;
        catch java.lang.OutOfMemoryError from label58 to label59 with label78;
        catch java.lang.OutOfMemoryError from label59 to label60 with label78;
        catch java.lang.Throwable from label46 to label47 with label62;
        catch java.lang.Throwable from label50 to label51 with label62;
        catch java.lang.Throwable from label53 to label54 with label62;
        catch java.lang.Throwable from label55 to label59 with label62;
        catch java.lang.Throwable from label59 to label60 with label62;
        catch java.io.IOException from label60 to label61 with label76;
        catch java.lang.Throwable from label63 to label64 with label62;
        catch java.lang.Throwable from label64 to label65 with label62;
        catch java.lang.Throwable from label65 to label66 with label62;
        catch java.io.IOException from label66 to label67 with label76;
        catch java.io.IOException from label68 to label69 with label76;
        catch java.io.IOException from label71 to label72 with label76;
        catch java.io.IOException from label73 to label74 with label76;
    }
