Source: $i0 = virtualinvoke $r12.<java.io.InputStream: int read(byte[])>(r2)
$i0 = virtualinvoke $r12.<java.io.InputStream: int read(byte[])>(r2) in <com.vk.sdk.api.httpClient.VKHttpClient$VKHttpResponse: void <init>(java.net.HttpURLConnection,com.vk.sdk.api.httpClient.VKHttpClient$VKHttpProgressCallback)>
Sink: specialinvoke r2.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r5) in <com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: void writeParams(java.io.OutputStream)>

<com.vk.sdk.api.httpClient.VKHttpClient$VKHttpResponse: void <init>(java.net.HttpURLConnection,com.vk.sdk.api.httpClient.VKHttpClient$VKHttpProgressCallback)>: $i0 = virtualinvoke $r12.<java.io.InputStream: int read(byte[])>(r2)
<com.vk.sdk.api.httpClient.VKHttpClient$VKHttpResponse: void <init>(java.net.HttpURLConnection,com.vk.sdk.api.httpClient.VKHttpClient$VKHttpProgressCallback)>: virtualinvoke $r15.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r2, 0, $i0)
<com.vk.sdk.api.httpClient.VKHttpClient$VKHttpResponse: void <init>(java.net.HttpURLConnection,com.vk.sdk.api.httpClient.VKHttpClient$VKHttpProgressCallback)>: r2 = virtualinvoke $r15.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
<com.vk.sdk.api.httpClient.VKHttpClient$VKHttpResponse: void <init>(java.net.HttpURLConnection,com.vk.sdk.api.httpClient.VKHttpClient$VKHttpProgressCallback)>: r0.<com.vk.sdk.api.httpClient.VKHttpClient$VKHttpResponse: byte[] responseBytes> = r2
<com.vk.sdk.api.httpClient.VKHttpClient$VKHttpResponse: void <init>(java.net.HttpURLConnection,com.vk.sdk.api.httpClient.VKHttpClient$VKHttpProgressCallback)>: return
<com.vk.sdk.api.httpClient.VKHttpClient: com.vk.sdk.api.httpClient.VKHttpClient$VKHttpResponse execute(com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest)>: return r2
<com.vk.sdk.api.httpClient.VKHttpOperation: void start(java.util.concurrent.ExecutorService)>: r0.<com.vk.sdk.api.httpClient.VKHttpOperation: com.vk.sdk.api.httpClient.VKHttpClient$VKHttpResponse response> = $r3
<com.vk.sdk.api.httpClient.VKHttpOperation: void start(java.util.concurrent.ExecutorService)>: r0 := @this: com.vk.sdk.api.httpClient.VKHttpOperation
<com.vk.sdk.api.httpClient.VKHttpClient$2: void run()>: $r1 = r0.<com.vk.sdk.api.httpClient.VKHttpClient$2: com.vk.sdk.api.httpClient.VKAbstractOperation val$operation>
<com.vk.sdk.api.httpClient.VKHttpClient$2: void run()>: r0 := @this: com.vk.sdk.api.httpClient.VKHttpClient$2
<com.vk.sdk.api.httpClient.VKHttpClient: void enqueueOperation(com.vk.sdk.api.httpClient.VKAbstractOperation)>: specialinvoke $r2.<com.vk.sdk.api.httpClient.VKHttpClient$2: void <init>(com.vk.sdk.api.httpClient.VKAbstractOperation)>($r0)
<com.vk.sdk.api.httpClient.VKHttpClient$2: void <init>(com.vk.sdk.api.httpClient.VKAbstractOperation)>: r0.<com.vk.sdk.api.httpClient.VKHttpClient$2: com.vk.sdk.api.httpClient.VKAbstractOperation val$operation> = $r1
<com.vk.sdk.api.httpClient.VKHttpClient$2: void <init>(com.vk.sdk.api.httpClient.VKAbstractOperation)>: return
<com.vk.sdk.api.httpClient.VKHttpClient: void enqueueOperation(com.vk.sdk.api.httpClient.VKAbstractOperation)>: $r0 := @parameter0: com.vk.sdk.api.httpClient.VKAbstractOperation
<com.vk.sdk.api.VKRequest: void start()>: $r1 = r0.<com.vk.sdk.api.VKRequest: com.vk.sdk.api.httpClient.VKAbstractOperation mLoadingOperation>
<com.vk.sdk.api.VKRequest: void start()>: return
<com.vk.sdk.api.VKRequest$1$1: void run()>: $r2 = $r1.<com.vk.sdk.api.VKRequest$1: com.vk.sdk.api.VKRequest this$0>
<com.vk.sdk.api.VKRequest$1$1: void run()>: $r1 = r0.<com.vk.sdk.api.VKRequest$1$1: com.vk.sdk.api.VKRequest$1 this$1>
<com.vk.sdk.api.VKRequest$1$1: void run()>: r0 := @this: com.vk.sdk.api.VKRequest$1$1
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>: this := @this: android.os.Handler
<com.tencent.android.tpush.service.XGVipPushService: void c()>: $r2 = r0.<com.tencent.android.tpush.service.XGVipPushService: java.lang.Runnable i>
<com.tencent.android.tpush.service.XGVipPushService: void c()>: r0 := @this: com.tencent.android.tpush.service.XGVipPushService
<com.tencent.android.tpush.service.XGVipPushService: void onCreate()>: specialinvoke r0.<com.tencent.android.tpush.service.XGVipPushService: void d()>()
<com.tencent.android.tpush.service.XGVipPushService: void d()>: specialinvoke $r1.<com.tencent.android.tpush.service.t: void <init>(com.tencent.android.tpush.service.XGVipPushService)>(r0)
<com.tencent.android.tpush.service.t: void <init>(com.tencent.android.tpush.service.XGVipPushService)>: r0.<com.tencent.android.tpush.service.t: com.tencent.android.tpush.service.XGVipPushService a> = $r1
<com.tencent.android.tpush.service.t: void <init>(com.tencent.android.tpush.service.XGVipPushService)>: return
<com.tencent.android.tpush.service.XGVipPushService: void d()>: virtualinvoke $r2.<com.tencent.bigdata.baseapi.base.util.CommonWorkingThread: boolean execute(java.lang.Runnable)>($r1)
<com.tencent.bigdata.baseapi.base.util.CommonWorkingThread: boolean execute(java.lang.Runnable)>: return 0
<com.tencent.android.tpush.service.XGVipPushService: void d()>: specialinvoke $r1.<com.tencent.android.tpush.service.t: void <init>(com.tencent.android.tpush.service.XGVipPushService)>(r0)
<com.tencent.android.tpush.service.t: void <init>(com.tencent.android.tpush.service.XGVipPushService)>: r0.<com.tencent.android.tpush.service.t: com.tencent.android.tpush.service.XGVipPushService a> = $r1
<com.tencent.android.tpush.service.t: void <init>(com.tencent.android.tpush.service.XGVipPushService)>: return
<com.tencent.android.tpush.service.XGVipPushService: void d()>: return
<com.tencent.android.tpush.service.XGVipPushService: void onCreate()>: specialinvoke r0.<com.tencent.android.tpush.service.XGVipPushService: void c()>()
<com.tencent.android.tpush.service.XGVipPushService: void c()>: $r2 = r0.<com.tencent.android.tpush.service.XGVipPushService: java.lang.Runnable i>
<com.tencent.android.tpush.service.XGVipPushService: void c()>: virtualinvoke $r1.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r2, 60000L)
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>: interfaceinvoke param0.<java.lang.Runnable: void run()>()
<com.vk.sdk.api.VKRequest$1$1: void run()>: $r1 = r0.<com.vk.sdk.api.VKRequest$1$1: com.vk.sdk.api.VKRequest$1 this$1>
<com.vk.sdk.api.VKRequest$1$1: void run()>: $r2 = $r1.<com.vk.sdk.api.VKRequest$1: com.vk.sdk.api.VKRequest this$0>
<com.vk.sdk.api.VKRequest$1$1: void run()>: virtualinvoke $r2.<com.vk.sdk.api.VKRequest: void start()>()
<com.vk.sdk.api.VKRequest: void start()>: $r1 = virtualinvoke r0.<com.vk.sdk.api.VKRequest: com.vk.sdk.api.httpClient.VKAbstractOperation getOperation()>()
<com.vk.sdk.api.VKRequest: com.vk.sdk.api.httpClient.VKAbstractOperation getOperation()>: $r4 = r0.<com.vk.sdk.api.VKRequest: com.vk.sdk.api.httpClient.VKAbstractOperation mLoadingOperation>
<com.vk.sdk.api.VKRequest: com.vk.sdk.api.httpClient.VKAbstractOperation getOperation()>: return $r4
<com.vk.sdk.api.VKRequest: void start()>: r0.<com.vk.sdk.api.VKRequest: com.vk.sdk.api.httpClient.VKAbstractOperation mLoadingOperation> = $r1
<com.vk.sdk.api.VKRequest: void start()>: $r1 = r0.<com.vk.sdk.api.VKRequest: com.vk.sdk.api.httpClient.VKAbstractOperation mLoadingOperation>
<com.vk.sdk.api.VKRequest: void start()>: staticinvoke <com.vk.sdk.api.httpClient.VKHttpClient: void enqueueOperation(com.vk.sdk.api.httpClient.VKAbstractOperation)>($r1)
<com.vk.sdk.api.httpClient.VKHttpClient: void enqueueOperation(com.vk.sdk.api.httpClient.VKAbstractOperation)>: specialinvoke $r2.<com.vk.sdk.api.httpClient.VKHttpClient$2: void <init>(com.vk.sdk.api.httpClient.VKAbstractOperation)>($r0)
<com.vk.sdk.api.httpClient.VKHttpClient$2: void <init>(com.vk.sdk.api.httpClient.VKAbstractOperation)>: r0.<com.vk.sdk.api.httpClient.VKHttpClient$2: com.vk.sdk.api.httpClient.VKAbstractOperation val$operation> = $r1
<com.vk.sdk.api.httpClient.VKHttpClient$2: void <init>(com.vk.sdk.api.httpClient.VKAbstractOperation)>: return
<com.vk.sdk.api.httpClient.VKHttpClient: void enqueueOperation(com.vk.sdk.api.httpClient.VKAbstractOperation)>: interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r2)
<com.vk.sdk.api.httpClient.VKHttpClient$2: void run()>: $r1 = r0.<com.vk.sdk.api.httpClient.VKHttpClient$2: com.vk.sdk.api.httpClient.VKAbstractOperation val$operation>
<com.vk.sdk.api.httpClient.VKHttpClient$2: void run()>: virtualinvoke $r1.<com.vk.sdk.api.httpClient.VKAbstractOperation: void start(java.util.concurrent.ExecutorService)>($r2)
<com.vk.sdk.api.httpClient.VKHttpOperation: void start(java.util.concurrent.ExecutorService)>: $r5 = r0.<com.vk.sdk.api.httpClient.VKHttpOperation: com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest mUriRequest>
<com.vk.sdk.api.httpClient.VKHttpOperation: void start(java.util.concurrent.ExecutorService)>: $r3 = staticinvoke <com.vk.sdk.api.httpClient.VKHttpClient: com.vk.sdk.api.httpClient.VKHttpClient$VKHttpResponse execute(com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest)>($r5)
<com.vk.sdk.api.httpClient.VKHttpClient: com.vk.sdk.api.httpClient.VKHttpClient$VKHttpResponse execute(com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest)>: $r1 = virtualinvoke $r0.<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.net.HttpURLConnection createConnection()>()
<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.net.HttpURLConnection createConnection()>: r1 = r0.<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.net.URL methodUrl>
<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.net.HttpURLConnection createConnection()>: $r2 = virtualinvoke r1.<java.net.URL: java.net.URLConnection openConnection()>()
<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.net.HttpURLConnection createConnection()>: $r3 = (java.net.HttpURLConnection) $r2
<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.net.HttpURLConnection createConnection()>: r0.<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.net.HttpURLConnection connection> = $r3
<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.net.HttpURLConnection createConnection()>: virtualinvoke r0.<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: void writeParams(java.io.OutputStream)>($r23)
<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: void writeParams(java.io.OutputStream)>: $r4 = virtualinvoke r0.<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.lang.String getQuery()>()
<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.lang.String getQuery()>: return null
<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: void writeParams(java.io.OutputStream)>: r0 := @this: com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest
<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.net.HttpURLConnection createConnection()>: $r3 = r0.<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.net.HttpURLConnection connection>
<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.net.HttpURLConnection createConnection()>: $r23 = virtualinvoke $r3.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()
<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: java.net.HttpURLConnection createConnection()>: virtualinvoke r0.<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: void writeParams(java.io.OutputStream)>($r23)
<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: void writeParams(java.io.OutputStream)>: specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r1, "UTF-8")
<com.vk.sdk.api.httpClient.VKHttpClient$VKHTTPRequest: void writeParams(java.io.OutputStream)>: specialinvoke r2.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r5)
