    public final java.lang.Object runUntilValue() throws java.lang.Throwable
    {
        java.lang.Throwable $r4;
        gnu.mapping.CallContext r0;
        int i0, i1, $i2;
        gnu.mapping.ValueStack r2;
        java.lang.Object $r3;
        gnu.lists.Consumer r1;

        r0 := @this: gnu.mapping.CallContext;

        r1 = r0.<gnu.mapping.CallContext: gnu.lists.Consumer consumer>;

        r2 = r0.<gnu.mapping.CallContext: gnu.mapping.ValueStack vstack>;

        r0.<gnu.mapping.CallContext: gnu.lists.Consumer consumer> = r2;

        i0 = r2.<gnu.mapping.ValueStack: int gapStart>;

        i1 = r2.<gnu.mapping.ValueStack: int oindex>;

     label1:
        virtualinvoke r0.<gnu.mapping.CallContext: void runUntilDone()>();

        $i2 = r2.<gnu.mapping.ValueStack: int gapStart>;

        $r3 = staticinvoke <gnu.mapping.Values: java.lang.Object make(gnu.lists.TreeList,int,int)>(r2, i0, $i2);

     label2:
        r0.<gnu.mapping.CallContext: gnu.lists.Consumer consumer> = r1;

        r2.<gnu.mapping.ValueStack: int gapStart> = i0;

        r2.<gnu.mapping.ValueStack: int oindex> = i1;

        return $r3;

     label3:
        $r4 := @caughtexception;

        r0.<gnu.mapping.CallContext: gnu.lists.Consumer consumer> = r1;

        r2.<gnu.mapping.ValueStack: int gapStart> = i0;

        r2.<gnu.mapping.ValueStack: int oindex> = i1;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
