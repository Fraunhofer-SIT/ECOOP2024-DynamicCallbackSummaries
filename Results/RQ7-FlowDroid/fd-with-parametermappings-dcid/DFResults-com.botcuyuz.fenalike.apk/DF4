Source: $i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, $i1, $i0)
$i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, $i1, $i0) in <gnu.text.LineBufferedReader: int fill(int)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.LineBufferedReader: int fill(int)>: $i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, $i1, $i0)
<gnu.text.LineBufferedReader: int fill(int)>: $r1 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int fill(int)>: r0 := @this: gnu.text.LineBufferedReader
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>(z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>(r2)
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: $r2 = virtualinvoke $r3.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>(r0, $r1)
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r3 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r3, $r5, $r6)
<kawa.lib.lists: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>($r2, $r3, $r5)
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r4 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r0, $r4)
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: r2 = virtualinvoke $r4.<gnu.bytecode.Type: java.lang.Object coerceFromObject(java.lang.Object)>($r1)
<gnu.bytecode.ObjectType: java.lang.Object coerceFromObject(java.lang.Object)>: r0 := @this: gnu.bytecode.ObjectType
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: r0 := @this: gnu.kawa.functions.Convert
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r4 = virtualinvoke $r3.<gnu.lists.Pair: java.lang.Object getCar()>()
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: $r2 = r0.<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object car>
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: r0.<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object car> = $r2
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: $r2 = staticinvoke <kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>($r2, $r1)
<kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>: specialinvoke $r5.<kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>(r1, $r0)
<kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>: r0.<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum> = $r1
<kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>: return
<kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>: return $r5
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: r0.<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object car> = $r2
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: $r2 = r0.<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object car>
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: return $r2
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r4 = virtualinvoke $r3.<gnu.lists.Pair: java.lang.Object getCar()>()
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: $r2 = r0.<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object car>
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: $r2 = r0.<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object car>
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: $r2 = staticinvoke <kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>($r2, $r1)
<kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>: specialinvoke $r5.<kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>(r1, $r0)
<kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>: r0.<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum> = $r1
<kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>: return
<kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>: return $r5
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: r0.<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object car> = $r2
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: return $r2
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r3 = (gnu.lists.Pair) $r1
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: return $r1
<kawa.lib.lists: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
