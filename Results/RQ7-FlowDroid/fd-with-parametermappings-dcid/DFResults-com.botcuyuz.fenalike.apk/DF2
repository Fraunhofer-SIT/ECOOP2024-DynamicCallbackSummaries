Source: $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>()
$i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>() in <gnu.mapping.TtyInPort: int read()>
Sink: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1) in <gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>

<gnu.mapping.TtyInPort: int read()>: $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>()
<gnu.mapping.TtyInPort: int read()>: return $i0
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: i3 = $i0
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>(i3)
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) $i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r1[i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r1 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r5 = $r1.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: specialinvoke $r9.<java.lang.String: void <init>(char[],int,int)>($r5, $i1, $i0)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r9
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>(r2)
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r3 = virtualinvoke $r7.<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r3, $r6)
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: r2 = virtualinvoke $r4.<gnu.bytecode.Type: java.lang.Object coerceFromObject(java.lang.Object)>($r1)
<gnu.kawa.lispexpr.LangObjType: java.lang.Object coerceFromObject(java.lang.Object)>: $r3 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath makeFilePath(java.lang.Object)>($r1)
<gnu.text.FilePath: gnu.text.FilePath makeFilePath(java.lang.Object)>: $r1 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath coerceToFilePathOrNull(java.lang.Object)>($r0)
<gnu.text.FilePath: gnu.text.FilePath coerceToFilePathOrNull(java.lang.Object)>: $r5 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>()
<gnu.text.FilePath: gnu.text.FilePath coerceToFilePathOrNull(java.lang.Object)>: r2 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.lang.String)>($r5)
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.lang.String)>: specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r0)
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.lang.String)>: specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File,java.lang.String)>($r2, $r0)
<gnu.text.FilePath: void <init>(java.io.File,java.lang.String)>: r0.<gnu.text.FilePath: java.io.File file> = $r1
<gnu.text.FilePath: void <init>(java.io.File,java.lang.String)>: return
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.lang.String)>: return $r1
<gnu.text.FilePath: gnu.text.FilePath coerceToFilePathOrNull(java.lang.Object)>: return r2
<gnu.text.FilePath: gnu.text.FilePath makeFilePath(java.lang.Object)>: return $r1
<gnu.kawa.lispexpr.LangObjType: java.lang.Object coerceFromObject(java.lang.Object)>: return $r3
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return r2
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: return $r3
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>(r2)
<gnu.mapping.MethodProc: java.lang.Object applyN(java.lang.Object[])>: $r3 = virtualinvoke $r2.<gnu.mapping.CallContext: java.lang.Object runUntilValue()>()
<gnu.mapping.CallContext: java.lang.Object runUntilValue()>: $r3 = staticinvoke <gnu.mapping.Values: java.lang.Object make(gnu.lists.TreeList,int,int)>(r2, i0, $i2)
<gnu.mapping.Values: java.lang.Object make(gnu.lists.TreeList,int,int)>: $r1 = virtualinvoke $r0.<gnu.lists.TreeList: java.lang.Object getPosNext(int)>($i0)
<gnu.lists.TreeList: java.lang.Object getPosNext(int)>: $r2 = <gnu.lists.Sequence: java.lang.Object eofValue>
<gnu.lists.TreeList: java.lang.Object getPosNext(int)>: return $r2
<gnu.mapping.Values: java.lang.Object make(gnu.lists.TreeList,int,int)>: return $r1
<gnu.mapping.CallContext: java.lang.Object runUntilValue()>: return $r3
<gnu.mapping.MethodProc: java.lang.Object applyN(java.lang.Object[])>: return $r3
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: return
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: $r4 = <gnu.lists.Sequence: java.lang.Object eofValue>
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object lambda7(java.lang.Object)>: return $r0
<com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<com.google.youngandroid.runtime: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>: virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: return
<gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>: $r3 = virtualinvoke $r0.<gnu.mapping.Procedure: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.mapping.Procedure2: java.lang.Object applyN(java.lang.Object[])>: $r2 = virtualinvoke r0.<gnu.mapping.Procedure2: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r2, $r4)
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: r2 = virtualinvoke $r4.<gnu.bytecode.Type: java.lang.Object coerceFromObject(java.lang.Object)>($r1)
<gnu.bytecode.ObjectType: java.lang.Object coerceFromObject(java.lang.Object)>: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>()
<gnu.bytecode.ObjectType: java.lang.Object coerceFromObject(java.lang.Object)>: return $r3
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return r2
<gnu.mapping.Procedure2: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>: virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
<gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>: interfaceinvoke $r0.<gnu.lists.Consumer: void writeObject(java.lang.Object)>(r1)
<gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1)
