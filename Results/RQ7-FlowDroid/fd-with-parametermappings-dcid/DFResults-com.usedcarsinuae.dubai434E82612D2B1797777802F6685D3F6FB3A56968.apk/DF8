Source: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
$i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in <gnu.mapping.TtyInPort: int fill(int)>
Sink: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.mapping.TtyInPort: int fill(int)>: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
<gnu.mapping.TtyInPort: int fill(int)>: $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
<gnu.mapping.TtyInPort: int fill(int)>: r0 := @this: gnu.mapping.TtyInPort
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.kawa.functions.AddOp: java.lang.Object applyN(java.lang.Object[])>: $r1 = staticinvoke <gnu.kawa.functions.AddOp: java.lang.Object applyN(int,java.lang.Object[])>($i0, $r2)
<gnu.kawa.functions.AddOp: java.lang.Object applyN(int,java.lang.Object[])>: $r3 = staticinvoke <gnu.kawa.functions.AddOp: java.lang.Object apply2(int,java.lang.Object,java.lang.Object)>($i1, $r3, $r1)
<gnu.kawa.functions.AddOp: java.lang.Object apply2(int,java.lang.Object,java.lang.Object)>: $r2 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.Numeric asNumeric(java.lang.Object)>($r0)
<gnu.kawa.functions.Arithmetic: gnu.math.Numeric asNumeric(java.lang.Object)>: $r1 = staticinvoke <gnu.math.Numeric: gnu.math.Numeric asNumericOrNull(java.lang.Object)>($r0)
<gnu.math.Numeric: gnu.math.Numeric asNumericOrNull(java.lang.Object)>: $r5 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>($r0)
<gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>: $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>: return $r1
<gnu.math.Numeric: gnu.math.Numeric asNumericOrNull(java.lang.Object)>: return $r5
<gnu.kawa.functions.Arithmetic: gnu.math.Numeric asNumeric(java.lang.Object)>: $r1 = (gnu.math.Numeric) $r0
<gnu.kawa.functions.Arithmetic: gnu.math.Numeric asNumeric(java.lang.Object)>: return $r1
<gnu.kawa.functions.AddOp: java.lang.Object apply2(int,java.lang.Object,java.lang.Object)>: $r2 = virtualinvoke $r2.<gnu.math.Numeric: gnu.math.Numeric add(java.lang.Object,int)>($r3, $i0)
<gnu.math.DQuantity: gnu.math.Numeric add(java.lang.Object,int)>: $r3 = virtualinvoke r0.<gnu.math.DQuantity: gnu.math.Dimensions dimensions()>()
<gnu.math.Quantity: gnu.math.Dimensions dimensions()>: $r1 = virtualinvoke r0.<gnu.math.Quantity: gnu.math.Unit unit()>()
<gnu.math.DQuantity: gnu.math.Unit unit()>: r1 = r0.<gnu.math.DQuantity: gnu.math.Unit unt>
<gnu.math.DQuantity: gnu.math.Unit unit()>: return r1
<gnu.math.Quantity: gnu.math.Dimensions dimensions()>: $r1 = virtualinvoke r0.<gnu.math.Quantity: gnu.math.Unit unit()>()
<gnu.math.DQuantity: gnu.math.Unit unit()>: r1 = r0.<gnu.math.DQuantity: gnu.math.Unit unt>
<gnu.math.DQuantity: gnu.math.Unit unit()>: return r1
<gnu.math.Quantity: gnu.math.Dimensions dimensions()>: return $r2
<gnu.math.DQuantity: gnu.math.Numeric add(java.lang.Object,int)>: return $r2
<gnu.kawa.functions.AddOp: java.lang.Object apply2(int,java.lang.Object,java.lang.Object)>: return $r2
<gnu.kawa.functions.AddOp: java.lang.Object applyN(int,java.lang.Object[])>: return $r3
<gnu.kawa.functions.AddOp: java.lang.Object applyN(java.lang.Object[])>: return $r1
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2)
