Source: $i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>()
$i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>() in <gnu.text.LineBufferedReader: int read()>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.LineBufferedReader: int read()>: $i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>()
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.mapping.TtyInPort: int read()>: return $i0
<gnu.text.Lexer: int read()>: return $i0
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: return
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>: c9 = $r0[$i10]
<gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>: $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
<gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>: $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
<gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
<gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>: return $r2
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r8 = staticinvoke <kawa.lib.numbers: gnu.math.Complex exp(gnu.math.Complex)>($r8)
<kawa.lib.numbers: gnu.math.Complex exp(gnu.math.Complex)>: $r0 = virtualinvoke $r0.<gnu.math.Complex: gnu.math.Complex exp()>()
<gnu.math.Complex: gnu.math.Complex exp()>: $d1 = virtualinvoke r0.<gnu.math.Complex: double doubleImagValue()>()
<gnu.math.Complex: double doubleImagValue()>: $r1 = virtualinvoke r0.<gnu.math.Complex: gnu.math.RealNum im()>()
<gnu.math.CComplex: gnu.math.RealNum im()>: $r1 = r0.<gnu.math.CComplex: gnu.math.RealNum imag>
<gnu.math.CComplex: gnu.math.RealNum im()>: return $r1
<gnu.math.Complex: double doubleImagValue()>: $d0 = virtualinvoke $r1.<gnu.math.RealNum: double doubleValue()>()
<gnu.math.IntFraction: double doubleValue()>: r0 := @this: gnu.math.IntFraction
<gnu.math.Complex: double doubleImagValue()>: $r1 = virtualinvoke r0.<gnu.math.Complex: gnu.math.RealNum im()>()
<gnu.math.CComplex: gnu.math.RealNum im()>: $r1 = r0.<gnu.math.CComplex: gnu.math.RealNum imag>
<gnu.math.CComplex: gnu.math.RealNum im()>: r0 := @this: gnu.math.CComplex
<gnu.math.Complex: double doubleImagValue()>: r0 := @this: gnu.math.Complex
<gnu.math.Complex: gnu.math.Complex exp()>: r0 := @this: gnu.math.Complex
<kawa.lib.numbers: gnu.math.Complex exp(gnu.math.Complex)>: return $r0
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r8
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
