    public java.lang.Object apply4(gnu.expr.ModuleMethod, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        gnu.expr.ModuleMethod $r1;
        java.lang.ClassCastException $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        int $i0, $i1, $i2;
        kawa.lib.numbers r0;
        gnu.math.IntNum $r6, $r8;
        java.lang.Number $r7;
        gnu.mapping.WrongType $r10;
        java.lang.Object $r2, $r3, $r4, $r5;

        r0 := @this: kawa.lib.numbers;

        $r1 := @parameter0: gnu.expr.ModuleMethod;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: java.lang.Object;

        $r5 := @parameter4: java.lang.Object;

        $i0 = $r1.<gnu.expr.ModuleMethod: int selector>;

        lookupswitch($i0)
        {
            case 50: goto label02;
            case 58: goto label07;
            default: goto label01;
        };

     label01:
        $r2 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply4(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r2, $r3, $r4, $r5);

        return $r2;

     label02:
        $r6 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label03:
        $r7 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r7.<java.lang.Number: int intValue()>();

     label04:
        $r7 = (java.lang.Number) $r4;

        $i1 = virtualinvoke $r7.<java.lang.Number: int intValue()>();

     label05:
        $r8 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r5);

     label06:
        $r6 = staticinvoke <kawa.lib.numbers: gnu.math.IntNum bitwiseCopyBitField(gnu.math.IntNum,int,int,gnu.math.IntNum)>($r6, $i0, $i1, $r8);

        return $r6;

     label07:
        $r6 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label08:
        $r7 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r7.<java.lang.Number: int intValue()>();

     label09:
        $r7 = (java.lang.Number) $r4;

        $i1 = virtualinvoke $r7.<java.lang.Number: int intValue()>();

     label10:
        $r7 = (java.lang.Number) $r5;

        $i2 = virtualinvoke $r7.<java.lang.Number: int intValue()>();

     label11:
        $r6 = staticinvoke <kawa.lib.numbers: gnu.math.IntNum bitwiseRotateBitField(gnu.math.IntNum,int,int,int)>($r6, $i0, $i1, $i2);

        return $r6;

     label12:
        $r9 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r9, "bitwise-copy-bit-field", 1, $r2);

        throw $r10;

     label13:
        $r11 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r11, "bitwise-copy-bit-field", 2, $r3);

        throw $r10;

     label14:
        $r12 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r12, "bitwise-copy-bit-field", 3, $r4);

        throw $r10;

     label15:
        $r13 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r13, "bitwise-copy-bit-field", 4, $r5);

        throw $r10;

     label16:
        $r14 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r14, "bitwise-rotate-bit-field", 1, $r2);

        throw $r10;

     label17:
        $r15 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r15, "bitwise-rotate-bit-field", 2, $r3);

        throw $r10;

     label18:
        $r16 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r16, "bitwise-rotate-bit-field", 3, $r4);

        throw $r10;

     label19:
        $r17 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r17, "bitwise-rotate-bit-field", 4, $r5);

        throw $r10;

        catch java.lang.ClassCastException from label02 to label03 with label12;
        catch java.lang.ClassCastException from label03 to label04 with label13;
        catch java.lang.ClassCastException from label04 to label05 with label14;
        catch java.lang.ClassCastException from label05 to label06 with label15;
        catch java.lang.ClassCastException from label07 to label08 with label16;
        catch java.lang.ClassCastException from label08 to label09 with label17;
        catch java.lang.ClassCastException from label09 to label10 with label18;
        catch java.lang.ClassCastException from label10 to label11 with label19;
    }
