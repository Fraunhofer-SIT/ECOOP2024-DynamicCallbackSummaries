    public java.lang.Object apply3(gnu.expr.ModuleMethod, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        gnu.expr.ModuleMethod $r1;
        java.lang.ClassCastException $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        int $i0, $i1;
        kawa.lib.numbers r0;
        gnu.math.IntNum $r6, $r7, $r8;
        java.lang.Number $r5;
        gnu.mapping.WrongType $r10;
        java.lang.Object $r2, $r3, $r4;

        r0 := @this: kawa.lib.numbers;

        $r1 := @parameter0: gnu.expr.ModuleMethod;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: java.lang.Object;

        $i0 = $r1.<gnu.expr.ModuleMethod: int selector>;

        lookupswitch($i0)
        {
            case 47: goto label02;
            case 49: goto label06;
            case 51: goto label10;
            case 52: goto label14;
            case 59: goto label18;
            default: goto label01;
        };

     label01:
        $r2 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r2, $r3, $r4);

        return $r2;

     label02:
        $r5 = (java.lang.Number) $r2;

        $i0 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

     label03:
        $r6 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r3);

     label04:
        $r7 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r4);

     label05:
        $r6 = staticinvoke <kawa.lib.numbers: gnu.math.IntNum logop(int,gnu.math.IntNum,gnu.math.IntNum)>($i0, $r6, $r7);

        return $r6;

     label06:
        $r6 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label07:
        $r5 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

     label08:
        $r5 = (java.lang.Number) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

     label09:
        $r6 = staticinvoke <kawa.lib.numbers: gnu.math.IntNum bitwiseCopyBit(gnu.math.IntNum,int,int)>($r6, $i0, $i1);

        return $r6;

     label10:
        $r6 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label11:
        $r5 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

     label12:
        $r5 = (java.lang.Number) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

     label13:
        $r6 = staticinvoke <kawa.lib.numbers: gnu.math.IntNum bitwiseBitField(gnu.math.IntNum,int,int)>($r6, $i0, $i1);

        return $r6;

     label14:
        $r6 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label15:
        $r7 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r3);

     label16:
        $r8 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r4);

     label17:
        $r6 = staticinvoke <kawa.lib.numbers: gnu.math.IntNum bitwiseIf(gnu.math.IntNum,gnu.math.IntNum,gnu.math.IntNum)>($r6, $r7, $r8);

        return $r6;

     label18:
        $r6 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label19:
        $r5 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

     label20:
        $r5 = (java.lang.Number) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

     label21:
        $r6 = staticinvoke <kawa.lib.numbers: gnu.math.IntNum bitwiseReverseBitField(gnu.math.IntNum,int,int)>($r6, $i0, $i1);

        return $r6;

     label22:
        $r9 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r9, "logop", 1, $r2);

        throw $r10;

     label23:
        $r11 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r11, "logop", 2, $r3);

        throw $r10;

     label24:
        $r12 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r12, "logop", 3, $r4);

        throw $r10;

     label25:
        $r13 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r13, "bitwise-copy-bit", 1, $r2);

        throw $r10;

     label26:
        $r14 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r14, "bitwise-copy-bit", 2, $r3);

        throw $r10;

     label27:
        $r15 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r15, "bitwise-copy-bit", 3, $r4);

        throw $r10;

     label28:
        $r16 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r16, "bitwise-bit-field", 1, $r2);

        throw $r10;

     label29:
        $r17 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r17, "bitwise-bit-field", 2, $r3);

        throw $r10;

     label30:
        $r18 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r18, "bitwise-bit-field", 3, $r4);

        throw $r10;

     label31:
        $r19 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r19, "bitwise-if", 1, $r2);

        throw $r10;

     label32:
        $r20 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r20, "bitwise-if", 2, $r3);

        throw $r10;

     label33:
        $r21 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r21, "bitwise-if", 3, $r4);

        throw $r10;

     label34:
        $r22 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r22, "bitwise-reverse-bit-field", 1, $r2);

        throw $r10;

     label35:
        $r23 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r23, "bitwise-reverse-bit-field", 2, $r3);

        throw $r10;

     label36:
        $r24 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r24, "bitwise-reverse-bit-field", 3, $r4);

        throw $r10;

        catch java.lang.ClassCastException from label02 to label03 with label22;
        catch java.lang.ClassCastException from label03 to label04 with label23;
        catch java.lang.ClassCastException from label04 to label05 with label24;
        catch java.lang.ClassCastException from label06 to label07 with label25;
        catch java.lang.ClassCastException from label07 to label08 with label26;
        catch java.lang.ClassCastException from label08 to label09 with label27;
        catch java.lang.ClassCastException from label10 to label11 with label28;
        catch java.lang.ClassCastException from label11 to label12 with label29;
        catch java.lang.ClassCastException from label12 to label13 with label30;
        catch java.lang.ClassCastException from label14 to label15 with label31;
        catch java.lang.ClassCastException from label15 to label16 with label32;
        catch java.lang.ClassCastException from label16 to label17 with label33;
        catch java.lang.ClassCastException from label18 to label19 with label34;
        catch java.lang.ClassCastException from label19 to label20 with label35;
        catch java.lang.ClassCastException from label20 to label21 with label36;
    }
