    private static org.json.JSONObject c(java.lang.Object)
    {
        java.lang.Throwable $r1, $r3;
        java.util.ArrayList $r5;
        org.json.JSONException $r2;
        org.json.JSONObject $r9, $r14;
        java.util.Map $r18;
        int $i0;
        java.lang.String $r13, $r20;
        boolean $z0;
        java.util.Map$Entry $r19;
        java.util.Iterator $r10, $r16;
        java.util.Set $r17;
        java.lang.reflect.Field $r12;
        java.lang.reflect.Field[] $r7;
        java.util.List $r8;
        java.lang.Object $r0, $r11;
        java.lang.Class $r4, $r6;
        org.json.JSONArray $r15;

        $r0 := @parameter0: java.lang.Object;

        $r4 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label01:
        if $r4 == null goto label02;

        $r6 = class "Ljava/lang/Object;";

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label02;

        $r7 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        $r4 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label01;

     label02:
        $r9 = new org.json.JSONObject;

        specialinvoke $r9.<org.json.JSONObject: void <init>()>();

        $r10 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label47;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.reflect.Field) $r11;

        $i0 = virtualinvoke $r12.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label03;

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i0);

        if $z0 != 0 goto label03;

     label04:
        virtualinvoke $r12.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r11 = virtualinvoke $r12.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

     label05:
        if $r11 == null goto label03;

     label06:
        $r13 = staticinvoke <com.startapp.common.c.c: java.lang.String a(java.lang.reflect.Field)>($r12);

        $z0 = staticinvoke <com.startapp.common.c.c: boolean e(java.lang.reflect.Field)>($r12);

     label07:
        if $z0 == 0 goto label10;

     label08:
        $r11 = virtualinvoke $r12.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

        $r14 = staticinvoke <com.startapp.common.c.b: org.json.JSONObject c(java.lang.Object)>($r11);

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r13, $r14);

     label09:
        goto label03;

     label10:
        $z0 = staticinvoke <com.startapp.common.c.c: boolean c(java.lang.reflect.Field)>($r12);

     label11:
        if $z0 == 0 goto label21;

        $r15 = new org.json.JSONArray;

     label12:
        specialinvoke $r15.<org.json.JSONArray: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

     label13:
        $r8 = (java.util.List) $r11;

     label14:
        $r16 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

     label16:
        if $z0 == 0 goto label19;

     label17:
        $r11 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r11 = staticinvoke <com.startapp.common.c.b: java.lang.Object b(java.lang.Object)>($r11);

        virtualinvoke $r15.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r11);

     label18:
        goto label15;

     label19:
        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r13, $r15);

     label20:
        goto label03;

     label21:
        $z0 = staticinvoke <com.startapp.common.c.c: boolean d(java.lang.reflect.Field)>($r12);

     label22:
        if $z0 == 0 goto label32;

        $r15 = new org.json.JSONArray;

     label23:
        specialinvoke $r15.<org.json.JSONArray: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

     label24:
        $r17 = (java.util.Set) $r11;

     label25:
        $r16 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label26:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

     label27:
        if $z0 == 0 goto label30;

     label28:
        $r11 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r11 = staticinvoke <com.startapp.common.c.b: java.lang.Object b(java.lang.Object)>($r11);

        virtualinvoke $r15.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r11);

     label29:
        goto label26;

     label30:
        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r13, $r15);

     label31:
        goto label03;

     label32:
        $z0 = staticinvoke <com.startapp.common.c.c: boolean b(java.lang.reflect.Field)>($r12);

     label33:
        if $z0 == 0 goto label45;

        $r14 = new org.json.JSONObject;

     label34:
        specialinvoke $r14.<org.json.JSONObject: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

     label35:
        $r18 = (java.util.Map) $r11;

     label36:
        $r17 = interfaceinvoke $r18.<java.util.Map: java.util.Set entrySet()>();

        $r16 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label37:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

     label38:
        if $z0 == 0 goto label43;

     label39:
        $r11 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

     label40:
        $r19 = (java.util.Map$Entry) $r11;

     label41:
        $r11 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        $r11 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = staticinvoke <com.startapp.common.c.b: java.lang.Object b(java.lang.Object)>($r11);

        virtualinvoke $r14.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r20, $r11);

     label42:
        goto label37;

     label43:
        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r13, $r14);

     label44:
        goto label03;

     label45:
        $r11 = virtualinvoke $r12.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

        virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r13, $r11);

     label46:
        goto label03;

     label47:
        return $r9;

     label48:
        $r1 := @caughtexception;

        goto label03;

     label49:
        $r2 := @caughtexception;

        goto label03;

     label50:
        $r3 := @caughtexception;

        goto label03;

        catch java.lang.IllegalArgumentException from label04 to label05 with label48;
        catch java.lang.IllegalArgumentException from label06 to label07 with label48;
        catch java.lang.IllegalArgumentException from label08 to label09 with label48;
        catch java.lang.IllegalArgumentException from label10 to label11 with label48;
        catch java.lang.IllegalArgumentException from label12 to label13 with label48;
        catch java.lang.IllegalArgumentException from label14 to label16 with label48;
        catch java.lang.IllegalArgumentException from label17 to label18 with label48;
        catch java.lang.IllegalArgumentException from label19 to label20 with label48;
        catch java.lang.IllegalArgumentException from label21 to label22 with label48;
        catch java.lang.IllegalArgumentException from label23 to label24 with label48;
        catch java.lang.IllegalArgumentException from label25 to label27 with label48;
        catch java.lang.IllegalArgumentException from label28 to label29 with label48;
        catch java.lang.IllegalArgumentException from label30 to label31 with label48;
        catch java.lang.IllegalArgumentException from label32 to label33 with label48;
        catch java.lang.IllegalArgumentException from label34 to label35 with label48;
        catch java.lang.IllegalArgumentException from label36 to label38 with label48;
        catch java.lang.IllegalArgumentException from label39 to label40 with label48;
        catch java.lang.IllegalArgumentException from label41 to label42 with label48;
        catch java.lang.IllegalArgumentException from label43 to label44 with label48;
        catch java.lang.IllegalArgumentException from label45 to label46 with label48;
        catch org.json.JSONException from label04 to label05 with label49;
        catch org.json.JSONException from label06 to label07 with label49;
        catch org.json.JSONException from label08 to label09 with label49;
        catch org.json.JSONException from label10 to label11 with label49;
        catch org.json.JSONException from label12 to label13 with label49;
        catch org.json.JSONException from label14 to label16 with label49;
        catch org.json.JSONException from label17 to label18 with label49;
        catch org.json.JSONException from label19 to label20 with label49;
        catch org.json.JSONException from label21 to label22 with label49;
        catch org.json.JSONException from label23 to label24 with label49;
        catch org.json.JSONException from label25 to label27 with label49;
        catch org.json.JSONException from label28 to label29 with label49;
        catch org.json.JSONException from label30 to label31 with label49;
        catch org.json.JSONException from label32 to label33 with label49;
        catch org.json.JSONException from label34 to label35 with label49;
        catch org.json.JSONException from label36 to label38 with label49;
        catch org.json.JSONException from label39 to label40 with label49;
        catch org.json.JSONException from label41 to label42 with label49;
        catch org.json.JSONException from label43 to label44 with label49;
        catch org.json.JSONException from label45 to label46 with label49;
        catch java.lang.IllegalAccessException from label04 to label05 with label50;
        catch java.lang.IllegalAccessException from label06 to label07 with label50;
        catch java.lang.IllegalAccessException from label08 to label09 with label50;
        catch java.lang.IllegalAccessException from label10 to label11 with label50;
        catch java.lang.IllegalAccessException from label12 to label13 with label50;
        catch java.lang.IllegalAccessException from label14 to label16 with label50;
        catch java.lang.IllegalAccessException from label17 to label18 with label50;
        catch java.lang.IllegalAccessException from label19 to label20 with label50;
        catch java.lang.IllegalAccessException from label21 to label22 with label50;
        catch java.lang.IllegalAccessException from label23 to label24 with label50;
        catch java.lang.IllegalAccessException from label25 to label27 with label50;
        catch java.lang.IllegalAccessException from label28 to label29 with label50;
        catch java.lang.IllegalAccessException from label30 to label31 with label50;
        catch java.lang.IllegalAccessException from label32 to label33 with label50;
        catch java.lang.IllegalAccessException from label34 to label35 with label50;
        catch java.lang.IllegalAccessException from label36 to label38 with label50;
        catch java.lang.IllegalAccessException from label39 to label40 with label50;
        catch java.lang.IllegalAccessException from label41 to label42 with label50;
        catch java.lang.IllegalAccessException from label43 to label44 with label50;
        catch java.lang.IllegalAccessException from label45 to label46 with label50;
    }
