    private static boolean a(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r14, $r17, $r20;
        byte[] $r13;
        java.util.Enumeration $r7;
        int $i0;
        java.util.zip.ZipFile $r5, $r6;
        java.lang.String $r0, $r1, $r2;
        java.util.zip.ZipEntry $r8, $r10;
        boolean $z0;
        java.io.FileOutputStream $r4, $r12;
        java.lang.Exception $r15, $r16, $r18, $r19, $r21;
        java.lang.Object $r9;
        java.io.InputStream $r3, $r11;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = null;

        $r4 = null;

        $r5 = null;

     label01:
        $r6 = new java.util.zip.ZipFile;

     label02:
        specialinvoke $r6.<java.util.zip.ZipFile: void <init>(java.lang.String)>($r0);

     label03:
        $r5 = $r6;

     label04:
        $r7 = virtualinvoke $r6.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

     label05:
        $r8 = null;

     label06:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

     label07:
        if $z0 == 0 goto label14;

     label08:
        $r9 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

     label09:
        $r10 = (java.util.zip.ZipEntry) $r9;

     label10:
        $z0 = virtualinvoke $r10.<java.util.zip.ZipEntry: boolean isDirectory()>();

     label11:
        if $z0 != 0 goto label06;

     label12:
        $r0 = virtualinvoke $r10.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

     label13:
        if $z0 == 0 goto label06;

        $r8 = $r10;

     label14:
        if $r8 == null goto label30;

     label15:
        $r11 = virtualinvoke $r6.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>($r8);

     label16:
        $r3 = $r11;

     label17:
        $r12 = new java.io.FileOutputStream;

     label18:
        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.lang.String)>($r2);

     label19:
        $r4 = $r12;

        $r13 = newarray (byte)[256];

     label20:
        $i0 = virtualinvoke $r11.<java.io.InputStream: int read(byte[])>($r13);

     label21:
        if $i0 <= 0 goto label24;

     label22:
        virtualinvoke $r12.<java.io.FileOutputStream: void write(byte[],int,int)>($r13, 0, $i0);

     label23:
        goto label20;

     label24:
        virtualinvoke $r12.<java.io.FileOutputStream: void flush()>();

     label25:
        virtualinvoke $r11.<java.io.InputStream: void close()>();

        virtualinvoke $r12.<java.io.FileOutputStream: void close()>();

     label26:
        virtualinvoke $r6.<java.util.zip.ZipFile: void close()>();

     label27:
        return 1;

     label28:
        $r14 := @caughtexception;

        goto label26;

     label29:
        $r15 := @caughtexception;

        goto label27;

     label30:
        virtualinvoke $r6.<java.util.zip.ZipFile: void close()>();

     label31:
        return 0;

     label32:
        $r16 := @caughtexception;

        goto label31;

     label33:
        $r17 := @caughtexception;

     label34:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

        virtualinvoke $r4.<java.io.FileOutputStream: void close()>();

     label35:
        virtualinvoke $r5.<java.util.zip.ZipFile: void close()>();

     label36:
        return 0;

     label37:
        $r18 := @caughtexception;

        goto label35;

     label38:
        $r19 := @caughtexception;

        goto label36;

     label39:
        $r20 := @caughtexception;

     label40:
        virtualinvoke $r5.<java.util.zip.ZipFile: void close()>();

     label41:
        throw $r20;

     label42:
        $r21 := @caughtexception;

        goto label41;

        catch java.io.IOException from label02 to label03 with label33;
        catch java.io.IOException from label04 to label05 with label33;
        catch java.io.IOException from label06 to label07 with label33;
        catch java.io.IOException from label08 to label09 with label33;
        catch java.io.IOException from label10 to label11 with label33;
        catch java.io.IOException from label12 to label13 with label33;
        catch java.io.IOException from label15 to label16 with label33;
        catch java.io.IOException from label18 to label19 with label33;
        catch java.io.IOException from label20 to label21 with label33;
        catch java.io.IOException from label22 to label23 with label33;
        catch java.io.IOException from label24 to label25 with label33;
        catch java.lang.Throwable from label01 to label03 with label39;
        catch java.lang.Throwable from label04 to label05 with label39;
        catch java.lang.Throwable from label06 to label07 with label39;
        catch java.lang.Throwable from label08 to label11 with label39;
        catch java.lang.Throwable from label12 to label13 with label39;
        catch java.lang.Throwable from label15 to label16 with label39;
        catch java.lang.Throwable from label17 to label19 with label39;
        catch java.lang.Throwable from label20 to label21 with label39;
        catch java.lang.Throwable from label22 to label23 with label39;
        catch java.lang.Throwable from label24 to label25 with label39;
        catch java.io.IOException from label25 to label26 with label28;
        catch java.lang.Throwable from label25 to label26 with label39;
        catch java.lang.Exception from label26 to label27 with label29;
        catch java.lang.Exception from label30 to label31 with label32;
        catch java.lang.Exception from label34 to label35 with label37;
        catch java.lang.Throwable from label34 to label35 with label39;
        catch java.lang.Exception from label35 to label36 with label38;
        catch java.lang.Exception from label40 to label41 with label42;
    }
