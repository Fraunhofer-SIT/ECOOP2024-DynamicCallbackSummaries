    void <init>(java.lang.String, java.lang.String, boolean, byte[], byte[], boolean) throws com.itextpdf.text.DocumentException, java.io.IOException
    {
        byte[] r3, r4;
        com.itextpdf.text.pdf.fonts.FontsResourceAnchor $r9, $r30;
        boolean z0, z1;
        java.lang.Exception r15, r16, r18, r21, r22, r24, r25, r27;
        java.lang.StringBuilder $r31;
        java.lang.ClassLoader $r12;
        java.lang.Throwable r17, r20, r23, r26;
        java.lang.Object[] r6;
        java.io.ByteArrayOutputStream r14, $r32;
        com.itextpdf.text.pdf.Type1Font r0;
        java.util.HashMap r5, $r28;
        int $i0;
        java.lang.String r1, r2, $r10;
        java.io.PrintStream r19;
        com.itextpdf.text.pdf.RandomAccessFileOrArray r7, $r33;
        com.itextpdf.text.DocumentException $r29;
        java.lang.Class $r11;
        java.io.InputStream r8, $r13;

        r0 := @this: com.itextpdf.text.pdf.Type1Font;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: byte[];

        r4 := @parameter4: byte[];

        z1 := @parameter5: boolean;

        specialinvoke r0.<com.itextpdf.text.pdf.BaseFont: void <init>()>();

        r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String Weight> = "";

        r0.<com.itextpdf.text.pdf.Type1Font: float ItalicAngle> = 0.0F;

        r0.<com.itextpdf.text.pdf.Type1Font: boolean IsFixedPitch> = 0;

        r0.<com.itextpdf.text.pdf.Type1Font: int llx> = -50;

        r0.<com.itextpdf.text.pdf.Type1Font: int lly> = -200;

        r0.<com.itextpdf.text.pdf.Type1Font: int urx> = 1000;

        r0.<com.itextpdf.text.pdf.Type1Font: int ury> = 900;

        r0.<com.itextpdf.text.pdf.Type1Font: int UnderlinePosition> = -100;

        r0.<com.itextpdf.text.pdf.Type1Font: int UnderlineThickness> = 50;

        r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String EncodingScheme> = "FontSpecific";

        r0.<com.itextpdf.text.pdf.Type1Font: int CapHeight> = 700;

        r0.<com.itextpdf.text.pdf.Type1Font: int XHeight> = 480;

        r0.<com.itextpdf.text.pdf.Type1Font: int Ascender> = 800;

        r0.<com.itextpdf.text.pdf.Type1Font: int Descender> = -200;

        r0.<com.itextpdf.text.pdf.Type1Font: int StdVW> = 80;

        $r28 = new java.util.HashMap;

        specialinvoke $r28.<java.util.HashMap: void <init>()>();

        r0.<com.itextpdf.text.pdf.Type1Font: java.util.HashMap CharMetrics> = $r28;

        $r28 = new java.util.HashMap;

        specialinvoke $r28.<java.util.HashMap: void <init>()>();

        r0.<com.itextpdf.text.pdf.Type1Font: java.util.HashMap KernPairs> = $r28;

        r0.<com.itextpdf.text.pdf.Type1Font: boolean builtinFont> = 0;

        if z0 == 0 goto label03;

        if r3 == null goto label02;

        goto label01;

     label01:
        $r29 = new com.itextpdf.text.DocumentException;

        r6 = newarray (java.lang.Object)[0];

        r1 = staticinvoke <com.itextpdf.text.error_messages.MessageLocalization: java.lang.String getComposedMessage(java.lang.String,java.lang.Object[])>("two.byte.arrays.are.needed.if.the.type1.font.is.embedded", r6);

        specialinvoke $r29.<com.itextpdf.text.DocumentException: void <init>(java.lang.String)>(r1);

        throw $r29;

     label02:
        if z0 == 0 goto label03;

        if r3 == null goto label03;

        r0.<com.itextpdf.text.pdf.Type1Font: byte[] pfb> = null;

     label03:
        r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String encoding> = r2;

        r0.<com.itextpdf.text.pdf.Type1Font: boolean embedded> = z0;

        r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String fileName> = r1;

        r0.<com.itextpdf.text.pdf.Type1Font: int fontType> = 0;

        r7 = null;

        r8 = null;

        r5 = <com.itextpdf.text.pdf.Type1Font: java.util.HashMap BuiltinFonts14>;

        z0 = virtualinvoke r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if z0 == 0 goto label42;

        r0.<com.itextpdf.text.pdf.Type1Font: boolean embedded> = 0;

        r0.<com.itextpdf.text.pdf.Type1Font: boolean builtinFont> = 1;

        r3 = newarray (byte)[1024];

     label04:
        $r9 = <com.itextpdf.text.pdf.Type1Font: com.itextpdf.text.pdf.fonts.FontsResourceAnchor resourceAnchor>;

     label05:
        if $r9 != null goto label08;

     label06:
        $r30 = new com.itextpdf.text.pdf.fonts.FontsResourceAnchor;

     label07:
        specialinvoke $r30.<com.itextpdf.text.pdf.fonts.FontsResourceAnchor: void <init>()>();

        <com.itextpdf.text.pdf.Type1Font: com.itextpdf.text.pdf.fonts.FontsResourceAnchor resourceAnchor> = $r30;

     label08:
        $r31 = new java.lang.StringBuilder;

     label09:
        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com/itextpdf/text/pdf/fonts/");

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".afm");

        $r10 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = <com.itextpdf.text.pdf.Type1Font: com.itextpdf.text.pdf.fonts.FontsResourceAnchor resourceAnchor>;

        $r11 = virtualinvoke $r9.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r13 = staticinvoke <com.itextpdf.text.io.StreamUtil: java.io.InputStream getResourceStream(java.lang.String,java.lang.ClassLoader)>($r10, $r12);

     label10:
        r8 = $r13;

        if $r13 == null goto label35;

     label11:
        $r32 = new java.io.ByteArrayOutputStream;

     label12:
        r14 = $r32;

     label13:
        specialinvoke $r32.<java.io.ByteArrayOutputStream: void <init>()>();

     label14:
        $i0 = virtualinvoke $r13.<java.io.InputStream: int read(byte[])>(r3);

     label15:
        if $i0 >= 0 goto label33;

     label16:
        r3 = virtualinvoke r14.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label17:
        if $r13 == null goto label21;

     label18:
        virtualinvoke $r13.<java.io.InputStream: void close()>();

     label19:
        goto label21;

     label20:
        r15 := @caughtexception;

     label21:
        $r33 = new com.itextpdf.text.pdf.RandomAccessFileOrArray;

     label22:
        specialinvoke $r33.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(byte[])>(r3);

     label23:
        r7 = $r33;

     label24:
        virtualinvoke r0.<com.itextpdf.text.pdf.Type1Font: void process(com.itextpdf.text.pdf.RandomAccessFileOrArray)>($r33);

     label25:
        virtualinvoke $r33.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

     label26:
        goto label76;

     label27:
        r16 := @caughtexception;

        goto label76;

     label28:
        r17 := @caughtexception;

        if r7 == null goto label32;

     label29:
        virtualinvoke r7.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

     label30:
        goto label32;

     label31:
        r18 := @caughtexception;

     label32:
        throw r17;

     label33:
        virtualinvoke r14.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r3, 0, $i0);

     label34:
        goto label14;

     label35:
        r6 = newarray (java.lang.Object)[1];

        r6[0] = r1;

        r1 = staticinvoke <com.itextpdf.text.error_messages.MessageLocalization: java.lang.String getComposedMessage(java.lang.String,java.lang.Object[])>("1.not.found.as.resource", r6);

        r19 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke r19.<java.io.PrintStream: void println(java.lang.String)>(r1);

        $r29 = new com.itextpdf.text.DocumentException;

     label36:
        specialinvoke $r29.<com.itextpdf.text.DocumentException: void <init>(java.lang.String)>(r1);

        throw $r29;

     label37:
        r20 := @caughtexception;

        if r8 == null goto label41;

     label38:
        virtualinvoke r8.<java.io.InputStream: void close()>();

     label39:
        goto label41;

     label40:
        r21 := @caughtexception;

     label41:
        throw r20;

     label42:
        $r10 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        z0 = virtualinvoke $r10.<java.lang.String: boolean endsWith(java.lang.String)>(".afm");

        if z0 == 0 goto label58;

        if r3 != null goto label46;

     label43:
        $r33 = new com.itextpdf.text.pdf.RandomAccessFileOrArray;

     label44:
        z0 = <com.itextpdf.text.Document: boolean plainRandomAccess>;

        specialinvoke $r33.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(java.lang.String,boolean,boolean)>(r1, 0, z0);

     label45:
        r7 = $r33;

        goto label49;

     label46:
        $r33 = new com.itextpdf.text.pdf.RandomAccessFileOrArray;

     label47:
        specialinvoke $r33.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(byte[])>(r3);

     label48:
        r7 = $r33;

     label49:
        virtualinvoke r0.<com.itextpdf.text.pdf.Type1Font: void process(com.itextpdf.text.pdf.RandomAccessFileOrArray)>(r7);

     label50:
        virtualinvoke r7.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

     label51:
        goto label76;

     label52:
        r22 := @caughtexception;

        goto label76;

     label53:
        r23 := @caughtexception;

        if r7 == null goto label57;

     label54:
        virtualinvoke r7.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

     label55:
        goto label57;

     label56:
        r24 := @caughtexception;

     label57:
        throw r23;

     label58:
        $r10 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        z0 = virtualinvoke $r10.<java.lang.String: boolean endsWith(java.lang.String)>(".pfm");

        if z0 == 0 goto label85;

     label59:
        $r32 = new java.io.ByteArrayOutputStream;

     label60:
        r14 = $r32;

     label61:
        specialinvoke $r32.<java.io.ByteArrayOutputStream: void <init>()>();

     label62:
        if r3 != null goto label66;

     label63:
        $r33 = new com.itextpdf.text.pdf.RandomAccessFileOrArray;

     label64:
        z0 = <com.itextpdf.text.Document: boolean plainRandomAccess>;

        specialinvoke $r33.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(java.lang.String,boolean,boolean)>(r1, 0, z0);

     label65:
        r7 = $r33;

        goto label69;

     label66:
        $r33 = new com.itextpdf.text.pdf.RandomAccessFileOrArray;

     label67:
        specialinvoke $r33.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(byte[])>(r3);

     label68:
        r7 = $r33;

     label69:
        staticinvoke <com.itextpdf.text.pdf.Pfm2afm: void convert(com.itextpdf.text.pdf.RandomAccessFileOrArray,java.io.OutputStream)>(r7, r14);

        virtualinvoke r7.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

        $r33 = new com.itextpdf.text.pdf.RandomAccessFileOrArray;

     label70:
        r3 = virtualinvoke r14.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r33.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(byte[])>(r3);

     label71:
        r7 = $r33;

     label72:
        virtualinvoke r0.<com.itextpdf.text.pdf.Type1Font: void process(com.itextpdf.text.pdf.RandomAccessFileOrArray)>($r33);

     label73:
        virtualinvoke $r33.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

     label74:
        goto label76;

     label75:
        r25 := @caughtexception;

     label76:
        r1 = r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String EncodingScheme>;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String EncodingScheme> = r1;

        z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("AdobeStandardEncoding");

        if z0 != 0 goto label77;

        r1 = r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String EncodingScheme>;

        z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("StandardEncoding");

        if z0 == 0 goto label78;

     label77:
        r0.<com.itextpdf.text.pdf.Type1Font: boolean fontSpecific> = 0;

     label78:
        r1 = r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String encoding>;

        z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if z0 != 0 goto label79;

        staticinvoke <com.itextpdf.text.pdf.PdfEncodings: byte[] convertToBytes(java.lang.String,java.lang.String)>(" ", r2);

     label79:
        virtualinvoke r0.<com.itextpdf.text.pdf.Type1Font: void createEncoding()>();

        return;

     label80:
        r26 := @caughtexception;

        if r7 == null goto label84;

     label81:
        virtualinvoke r7.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

     label82:
        goto label84;

     label83:
        r27 := @caughtexception;

     label84:
        throw r26;

     label85:
        $r29 = new com.itextpdf.text.DocumentException;

        r6 = newarray (java.lang.Object)[1];

        r6[0] = r1;

        r1 = staticinvoke <com.itextpdf.text.error_messages.MessageLocalization: java.lang.String getComposedMessage(java.lang.String,java.lang.Object[])>("1.is.not.an.afm.or.pfm.font.file", r6);

        specialinvoke $r29.<com.itextpdf.text.DocumentException: void <init>(java.lang.String)>(r1);

        throw $r29;

        catch java.lang.Throwable from label04 to label05 with label37;
        catch java.lang.Throwable from label06 to label07 with label37;
        catch java.lang.Throwable from label07 to label09 with label37;
        catch java.lang.Throwable from label09 to label10 with label37;
        catch java.lang.Throwable from label11 to label12 with label37;
        catch java.lang.Throwable from label13 to label15 with label37;
        catch java.lang.Throwable from label16 to label17 with label37;
        catch java.lang.Exception from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label28;
        catch java.lang.Throwable from label22 to label23 with label28;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label29 to label30 with label31;
        catch java.lang.Throwable from label33 to label34 with label37;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label36 to label37 with label37;
        catch java.lang.Exception from label38 to label39 with label40;
        catch java.lang.Throwable from label43 to label44 with label53;
        catch java.lang.Throwable from label44 to label45 with label53;
        catch java.lang.Throwable from label46 to label47 with label53;
        catch java.lang.Throwable from label47 to label48 with label53;
        catch java.lang.Throwable from label49 to label50 with label53;
        catch java.lang.Exception from label50 to label51 with label52;
        catch java.lang.Exception from label54 to label55 with label56;
        catch java.lang.Throwable from label59 to label60 with label80;
        catch java.lang.Throwable from label61 to label62 with label80;
        catch java.lang.Throwable from label63 to label64 with label80;
        catch java.lang.Throwable from label64 to label65 with label80;
        catch java.lang.Throwable from label66 to label67 with label80;
        catch java.lang.Throwable from label67 to label68 with label80;
        catch java.lang.Throwable from label69 to label70 with label80;
        catch java.lang.Throwable from label70 to label71 with label80;
        catch java.lang.Throwable from label72 to label73 with label80;
        catch java.lang.Exception from label73 to label74 with label75;
        catch java.lang.Exception from label81 to label82 with label83;
    }
