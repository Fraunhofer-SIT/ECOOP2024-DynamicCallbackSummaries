Source: $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
$r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r5, $r2)
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: r1 = $r7
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>(r1)
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
<gnu.text.FilePath: void <init>(java.io.File)>: $r2 = virtualinvoke $r1.<java.io.File: java.lang.String toString()>()
<gnu.text.FilePath: void <init>(java.io.File)>: r0.<gnu.text.FilePath: java.lang.String path> = $r2
<gnu.text.FilePath: void <init>(java.io.File)>: return
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: return $r1
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: return r0
<gnu.text.Path: gnu.text.Path resolve(gnu.text.Path)>: return r0
<gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>: return r1
<gnu.kawa.xml.KNode: gnu.text.Path baseURI()>: return $r1
<kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>: return $r2
<kawa.lib.misc: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>(r2)
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r3 = virtualinvoke $r10.<gnu.mapping.MethodProc: java.lang.Object applyN(java.lang.Object[])>(r8)
<gnu.expr.GenericProc: java.lang.Object applyN(java.lang.Object[])>: $r4 = virtualinvoke r2.<gnu.mapping.MethodProc: java.lang.Object applyN(java.lang.Object[])>($r1)
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: $r2 = virtualinvoke $r3.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>(r0, $r1)
<kawa.lib.strings: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r3 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>($r1, $r2)
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r3 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r3, $r5, $r6)
<kawa.lib.lists: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.lists: java.lang.Object assoc(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>($r2, $r3, $r5)
<kawa.lib.lists: java.lang.Object assoc(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r5 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r5, $r0)
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: r2 = virtualinvoke $r4.<gnu.bytecode.Type: java.lang.Object coerceFromObject(java.lang.Object)>($r1)
<gnu.bytecode.PrimType: java.lang.Object coerceFromObject(java.lang.Object)>: return r1
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return r2
<kawa.lib.lists: java.lang.Object assoc(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r5 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r5, $r0)
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>(r3)
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r3 = r0.<gnu.kawa.functions.NamedPart: java.lang.Object container>
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: r0 := @this: gnu.kawa.functions.NamedPart
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.lists: java.lang.Object assoc(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: return $r7
<kawa.lib.lists: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: $r5 = (gnu.mapping.Procedure) $r4
<kawa.lib.lists: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r8, "assoc", 3, $r4)
<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>: return
<kawa.lib.lists: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r6 = $r2[2]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<kawa.lib.strings: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.expr.GenericProc: java.lang.Object applyN(java.lang.Object[])>: return $r4
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: r8[0] = $r3
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r3 = r0.<gnu.kawa.functions.NamedPart: java.lang.Object container>
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: return $r3
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = r0.<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
