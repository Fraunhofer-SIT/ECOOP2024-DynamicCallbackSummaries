[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loading sources and sinks from SourcesSinks/UnconstrainedSourcesSinks.xml...
[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loaded 273 sources and 91 sinks from the XML file
[main] INFO soot.jimple.infoflow.android.SetupApplication - Initializing Soot...
[main] WARN soot.Scene - Android API version '31' not available, using minApkVersion '21' instead
[main] INFO soot.jimple.infoflow.android.SetupApplication - Loading dex files...
[main] INFO soot.jimple.infoflow.android.SetupApplication - ARSC file parsing took 0.053959895 seconds
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230,400 MiB
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 18 components...
[main] WARN soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Cannot generate constructor for phantom class androidx.core.content.FileProvider
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Collecting callbacks in DEFAULT mode...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Callback analysis done.
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 18 components...
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Running incremental callback analysis for 17 components...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Incremental callback analysis done.
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 18 components...
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionHandler, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionObserver, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ServiceEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionHandler, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ServiceEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionObserver, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionHandler, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionObserver, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionHandler, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionObserver, because it is an interface and cannot substitute with subclass
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Running incremental callback analysis for 14 components...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Incremental callback analysis done.
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 18 components...
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ServiceEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionHandler, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ServiceEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionObserver, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ServiceEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionHandler, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ServiceEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionObserver, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionHandler, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionObserver, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ServiceEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionHandler, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ServiceEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionObserver, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionHandler, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionObserver, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionHandler, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionObserver, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ServiceEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionHandler, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ServiceEntryPointCreator - Cannot create valid constructor for com.onesignal.OSSystemConditionController$OSSystemConditionObserver, because it is an interface and cannot substitute with subclass
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[FlowDroid Timeout Watcher] WARN soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - Timeout reached, stopping the solvers...
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Running incremental callback analysis for 7 components...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Incremental callback analysis done.
[main] WARN soot.jimple.infoflow.android.SetupApplication - Aborted callback collection because of low memory
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] WARN soot.jimple.infoflow.android.SetupApplication - Callback analysis aborted early due to time or memory exhaustion
[main] INFO soot.jimple.infoflow.android.SetupApplication - Entry point calculation done.
[main] INFO soot.jimple.infoflow.android.source.AccessPathBasedSourceSinkManager - Created a SourceSinkManager with 273 sources, 91 sinks, and 116 callback methods.
[main] INFO soot.jimple.infoflow.android.SetupApplication - Collecting callbacks and building a callgraph took 206 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication - Running data flow analysis on storagepath2-data/androidApps/2023-AndroZoo-PlayStore/io.kodular.abhijitbeheramantu.OdiaBarnabodhaF1ABAFE5B18EA3ED82AE1831ADDFA1A267EEEC48.apk with 273 sources and 91 sinks...
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Implicit flow tracking is NOT enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Exceptional flow tracking is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Running with a maximum access path length of 5
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using path-agnostic result collection
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Recursive access path shortening is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Taint analysis enabled: true
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using alias algorithm FlowSensitive
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230,400 MiB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph construction took 0 seconds
[main] INFO soot.jimple.infoflow.codeOptimization.InterproceduralConstantValuePropagator - Removing side-effect free methods is disabled
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Dead code elimination took 3.172380989 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph has 68325 edges
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Starting Taint Analysis
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] WARN soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Running with limited join point abstractions can break context-sensitive path builders
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Looking for sources and sinks...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Source lookup done, found 94 sources and 306 sinks.
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<java.math.BigDecimal: java.lang.Object value>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.Pair: java.lang.Object car>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.Pair: java.lang.Object car>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.Pair: java.lang.Object car>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen3$frame: io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen3 $main>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen3: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen1$frame: io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen1 $main>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen1: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen3$frame: io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen3 $main>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen3: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen2$frame: io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen2 $main>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen2: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen1$frame: io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen1 $main>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen1: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen7$frame: io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen7 $main>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen7: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen2$frame: io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen2 $main>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen2: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen7$frame: io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen7 $main>, <io.kodular.abhijitbeheramantu.OdiaBarnabodha.Screen7: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: int highestPos>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: int highestPos>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: int highestPos>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid Timeout Watcher] WARN soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - Timeout reached, stopping the solvers...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper hits: 20274717
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper misses: 43850681
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - IFDS problem with 48943252 forward and 49326219 backward edges solved in 903 seconds, processing 14 results...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Current memory consumption: 74860 MB
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after cleanup: 20808 MB
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 1 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 2 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 3 with 4 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 4 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after path building: 212347 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Path reconstruction took 11219 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r1, $i0, $i1) in method <gnu.mapping.LogWriter: void echo(char[],int,int)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in method <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<gnu.mapping.OutPort: void echo(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.OutPort: void echo(char[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<gnu.mapping.LogWriter: void echo(char[],int,int)>($r1, $i0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.LogWriter: void echo(char[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r1, $i0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in method <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int peek()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.ReaderParens: java.lang.Object readList(gnu.kawa.lispexpr.LispReader,int,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.text.LineBufferedReader: void skip()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void skip()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i2 = virtualinvoke r0.<gnu.text.LineBufferedReader: int fill(int)>($i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<gnu.mapping.OutPort: void echo(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.OutPort: void echo(char[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<gnu.mapping.LogWriter: void echo(char[],int,int)>($r1, $i0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.LogWriter: void echo(char[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r1, $i0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in method <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in method <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxRules: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke r0.<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>($r1, $r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r7.<kawa.lang.SyntaxRule: java.lang.Object execute(java.lang.Object[],kawa.lang.Translator,kawa.lang.TemplateScope)>($r3, $r2, $r12)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(java.lang.Object[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>(0, $r1, 0, $r5, $r2, $r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r7 = virtualinvoke r0.<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>($i0, $r1, $i1, $r2, $r3, $r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r9 = virtualinvoke r8.<gnu.lists.Pair: java.lang.Object getCar()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object car>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r8 = (gnu.lists.Pair) $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r9 = $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r9
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r7 = staticinvoke <kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>($r7, $r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r5.<kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>($r0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(java.lang.Object[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxRules: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in method <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxRules: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke r0.<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>($r1, $r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r7.<kawa.lang.SyntaxRule: java.lang.Object execute(java.lang.Object[],kawa.lang.Translator,kawa.lang.TemplateScope)>($r3, $r2, $r12)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(java.lang.Object[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>(0, $r1, 0, $r5, $r2, $r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r7 = virtualinvoke r0.<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>($i0, $r1, $i1, $r2, $r3, $r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r9 = virtualinvoke r8.<gnu.lists.Pair: java.lang.Object getCar()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object car>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r8 = (gnu.lists.Pair) $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r9 = $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r9
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r7 = staticinvoke <kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>($r7, $r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r5.<kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>($r0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxTemplate: java.lang.Object execute(java.lang.Object[],kawa.lang.Translator,kawa.lang.TemplateScope)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lang.SyntaxRules: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink specialinvoke $r2.<gnu.text.PrettyWriter: void <init>(java.io.Writer,boolean)>($r1, 0) in method <gnu.mapping.OutPort: void <init>(java.io.Writer,boolean,boolean)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in method <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: void <init>(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<gnu.text.FilePath: java.io.File file> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: void <init>(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Path: java.net.URL toURL(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Path: java.net.URL toURL(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r1 = $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Path: java.net.URL toURL(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>(r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Path: java.net.URL toURL(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.URIPath: java.net.URL toURL()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Path: java.net.URL toURL(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.URIPath: java.net.URL toURL()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.URIPath: java.io.OutputStream openOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <gnu.text.URLPath: java.io.OutputStream openOutputStream(java.net.URL)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.URLPath: java.io.OutputStream openOutputStream(java.net.URL)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.URLPath: java.io.OutputStream openOutputStream(java.net.URL)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<java.net.URI: void <init>(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.URLPath: java.io.OutputStream openOutputStream(java.net.URL)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r3.<java.io.File: void <init>(java.net.URI)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.URLPath: java.io.OutputStream openOutputStream(java.net.URL)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.URLPath: java.io.OutputStream openOutputStream(java.net.URL)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.URIPath: java.io.OutputStream openOutputStream()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.OutPort: gnu.mapping.OutPort openFile(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r6.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.OutPort: gnu.mapping.OutPort openFile(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r6)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.OutPort: gnu.mapping.OutPort openFile(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r9.<gnu.mapping.OutPort: void <init>(java.io.Writer,gnu.text.Path)>($r8, $r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.OutPort: void <init>(java.io.Writer,gnu.text.Path)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke r0.<gnu.mapping.OutPort: void <init>(java.io.Writer,boolean,boolean)>($r1, 0, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.OutPort: void <init>(java.io.Writer,boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r2.<gnu.text.PrettyWriter: void <init>(java.io.Writer,boolean)>($r1, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Data flow solver took 12139 seconds. Maximum memory consumption: 212347 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication - Found 3 leaks
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'SummaryStatistics'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Telemetry'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'Telemetry_sha256Hash_idx' for table 'Telemetry
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Callbacks'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallbackSummaries'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'CallbackSummaries_sha256Hash_idx' for table 'CallbackSummaries
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'AppSizes'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'AppSizes_sha256Hash_idx' for table 'AppSizes
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallgraphSizes'
