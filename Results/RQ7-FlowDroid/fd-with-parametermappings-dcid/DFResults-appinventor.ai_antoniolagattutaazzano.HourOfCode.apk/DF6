Source: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
$i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in <gnu.mapping.TtyInPort: int fill(int)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.mapping.TtyInPort: int fill(int)>: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
<gnu.mapping.TtyInPort: int fill(int)>: $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
<gnu.mapping.TtyInPort: int fill(int)>: r0 := @this: gnu.mapping.TtyInPort
<gnu.text.LineBufferedReader: int read()>: r0 := @this: gnu.text.LineBufferedReader
<gnu.mapping.TtyInPort: int read()>: r0 := @this: gnu.mapping.TtyInPort
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: r0 := @this: gnu.text.LineBufferedReader
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: r2 = $r0.<gnu.text.LineBufferedReader: char[] buffer>
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: specialinvoke r3.<gnu.lists.FString: void <init>(char[],int,int)>(r2, i1, i0)
<gnu.lists.FString: void <init>(char[],int,int)>: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r2, 0, $i1)
<gnu.lists.FString: void <init>(char[],int,int)>: $r2 = r0.<gnu.lists.FString: char[] data>
<gnu.lists.FString: void <init>(char[],int,int)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: return r3
<kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>: return $r3
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
