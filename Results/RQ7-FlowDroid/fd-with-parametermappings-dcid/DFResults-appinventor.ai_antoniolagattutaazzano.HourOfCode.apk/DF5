Source: $i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, $i1, $i0)
$i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, $i1, $i0) in <gnu.text.LineBufferedReader: int fill(int)>
Sink: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r1, $i0, $i1) in <gnu.mapping.LogWriter: void echo(char[],int,int)>

<gnu.text.LineBufferedReader: int fill(int)>: $i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, $i1, $i0)
<gnu.text.LineBufferedReader: int fill(int)>: $r1 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int fill(int)>: r0 := @this: gnu.text.LineBufferedReader
<gnu.text.LineBufferedReader: int read()>: r0 := @this: gnu.text.LineBufferedReader
<gnu.mapping.CharArrayInPort: int read()>: r0 := @this: gnu.mapping.CharArrayInPort
<gnu.text.LineBufferedReader: int read()>: r0 := @this: gnu.text.LineBufferedReader
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: $r4 = r0.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader port>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: $r4 = r0.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader port>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: $r4 = r0.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader port>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: $r4 = r0.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader port>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: virtualinvoke $r4.<gnu.text.LineBufferedReader: int read()>()
<gnu.text.LineBufferedReader: int read()>: $i1 = virtualinvoke r0.<gnu.text.LineBufferedReader: int fill(int)>($i1)
<gnu.mapping.TtyInPort: int fill(int)>: $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
<gnu.mapping.TtyInPort: int fill(int)>: virtualinvoke $r3.<gnu.mapping.OutPort: void echo(char[],int,int)>($r2, $i1, $i0)
<gnu.mapping.OutPort: void echo(char[],int,int)>: virtualinvoke $r3.<gnu.mapping.LogWriter: void echo(char[],int,int)>($r1, $i0, $i1)
<gnu.mapping.LogWriter: void echo(char[],int,int)>: virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r1, $i0, $i1)
