    public static void apply(gnu.mapping.Procedure, gnu.mapping.CallContext) throws java.lang.Throwable
    {
        java.lang.Object[] $r2;
        gnu.mapping.Procedure $r1;
        gnu.mapping.CallContext $r0;
        int $i0, $i1;
        java.lang.Object $r3, $r4, $r5, $r6;

        $r1 := @parameter0: gnu.mapping.Procedure;

        $r0 := @parameter1: gnu.mapping.CallContext;

        $i0 = $r0.<gnu.mapping.CallContext: int count>;

        $i1 = $r0.<gnu.mapping.CallContext: int where>;

        if $i1 != 0 goto label1;

        if $i0 == 0 goto label6;

        $r2 = $r0.<gnu.mapping.CallContext: java.lang.Object[] values>;

        $r3 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object applyN(java.lang.Object[])>($r2);

        goto label7;

     label1:
        if $i0 == 0 goto label6;

        if $i0 == 1 goto label5;

        if $i0 == 2 goto label4;

        if $i0 == 3 goto label3;

        if $i0 == 4 goto label2;

        $r2 = virtualinvoke $r0.<gnu.mapping.CallContext: java.lang.Object[] getArgs()>();

        $r3 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object applyN(java.lang.Object[])>($r2);

        goto label7;

     label2:
        $r3 = virtualinvoke $r0.<gnu.mapping.CallContext: java.lang.Object getNextArg()>();

        $r4 = virtualinvoke $r0.<gnu.mapping.CallContext: java.lang.Object getNextArg()>();

        $r5 = virtualinvoke $r0.<gnu.mapping.CallContext: java.lang.Object getNextArg()>();

        $r6 = virtualinvoke $r0.<gnu.mapping.CallContext: java.lang.Object getNextArg()>();

        $r3 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object apply4(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r5, $r6);

        goto label7;

     label3:
        $r3 = virtualinvoke $r0.<gnu.mapping.CallContext: java.lang.Object getNextArg()>();

        $r4 = virtualinvoke $r0.<gnu.mapping.CallContext: java.lang.Object getNextArg()>();

        $r5 = virtualinvoke $r0.<gnu.mapping.CallContext: java.lang.Object getNextArg()>();

        $r3 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object apply3(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r5);

        goto label7;

     label4:
        $r3 = virtualinvoke $r0.<gnu.mapping.CallContext: java.lang.Object getNextArg()>();

        $r4 = virtualinvoke $r0.<gnu.mapping.CallContext: java.lang.Object getNextArg()>();

        $r3 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r3, $r4);

        goto label7;

     label5:
        $r3 = virtualinvoke $r0.<gnu.mapping.CallContext: java.lang.Object getNextArg()>();

        $r3 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>($r3);

        goto label7;

     label6:
        $r3 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object apply0()>();

     label7:
        virtualinvoke $r0.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3);

        return;
    }
