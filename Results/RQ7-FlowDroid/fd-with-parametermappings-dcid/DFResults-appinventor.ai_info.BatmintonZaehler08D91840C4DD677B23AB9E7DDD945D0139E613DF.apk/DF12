Source: $i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, $i1, $i0)
$i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, $i1, $i0) in <gnu.text.LineBufferedReader: int fill(int)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.LineBufferedReader: int fill(int)>: $i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, $i1, $i0)
<gnu.text.LineBufferedReader: int fill(int)>: $r1 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int fill(int)>: return $i0
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>(z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
<appinventor.ai_info.BatmintonZaehler.Screen2$frame: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: virtualinvoke $r3.<appinventor.ai_info.BatmintonZaehler.Screen2: void addToFormDoAfterCreation(java.lang.Object)>($r2)
<appinventor.ai_info.BatmintonZaehler.Screen2: void addToFormDoAfterCreation(java.lang.Object)>: $r2 = staticinvoke <kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>($r1, $r3)
<kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>: specialinvoke $r2.<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1)
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: r0.<gnu.lists.Pair: java.lang.Object car> = $r1
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: return
<kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>: return $r2
<appinventor.ai_info.BatmintonZaehler.Screen2: void addToFormDoAfterCreation(java.lang.Object)>: r0.<appinventor.ai_info.BatmintonZaehler.Screen2: gnu.lists.LList form$Mndo$Mnafter$Mncreation> = $r2
<appinventor.ai_info.BatmintonZaehler.Screen2: void addToFormDoAfterCreation(java.lang.Object)>: r0 := @this: appinventor.ai_info.BatmintonZaehler.Screen2
<appinventor.ai_info.BatmintonZaehler.Screen2$frame: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r3 = r0.<appinventor.ai_info.BatmintonZaehler.Screen2$frame: appinventor.ai_info.BatmintonZaehler.Screen2 $main>
<appinventor.ai_info.BatmintonZaehler.Screen2$frame: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: r0 := @this: appinventor.ai_info.BatmintonZaehler.Screen2$frame
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r2 = r0.<gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: r0 := @this: gnu.expr.ModuleMethod
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = r0.<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
