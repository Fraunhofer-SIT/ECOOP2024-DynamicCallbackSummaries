Source: $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
$r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r5, $r2)
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: r1 = $r7
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>(r1)
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
<gnu.text.FilePath: void <init>(java.io.File)>: r0.<gnu.text.FilePath: java.io.File file> = $r1
<gnu.text.FilePath: void <init>(java.io.File)>: return
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: return $r1
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: return r0
<gnu.text.Path: gnu.text.Path resolve(gnu.text.Path)>: return r0
<gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>: return r1
<gnu.kawa.xml.KNode: gnu.text.Path baseURI()>: return $r1
<kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>: return $r2
<kawa.lib.misc: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r1 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r1)
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object mode(java.lang.Object)>: r1 = staticinvoke <gnu.lists.LList: gnu.lists.Pair list1(java.lang.Object)>($r8)
<gnu.lists.LList: gnu.lists.Pair list1(java.lang.Object)>: specialinvoke $r1.<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>($r0, $r2)
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: r0.<gnu.lists.Pair: java.lang.Object car> = $r1
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: return
<gnu.lists.LList: gnu.lists.Pair list1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object mode(java.lang.Object)>: return r1
<com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
