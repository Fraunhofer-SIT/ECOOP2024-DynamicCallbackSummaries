Source: $i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>()
$i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>() in <gnu.text.LineBufferedReader: int read()>
Sink: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0) in <gnu.lists.PrintConsumer: void writeDouble(double)>

<gnu.text.LineBufferedReader: int read()>: $i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>()
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.mapping.CharArrayInPort: int read()>: return $i0
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.mapping.CharArrayInPort: int read()>: return $i0
<gnu.text.Lexer: int read()>: return $i0
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: return
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>: c9 = $r0[$i10]
<gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>: $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
<gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>: $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
<gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
<gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>: return $r2
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: return
<gnu.text.LineBufferedReader: int read()>: return -1
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: $r2 = r0.<gnu.lists.FString: char[] data>
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: return $r4
<kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>: return $r3
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: return $r4
<com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: return $r3
<gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>: virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
<gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>: interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
<gnu.xml.XMLFilter: void writeObject(java.lang.Object)>: $r2 = (gnu.lists.SeqPosition) $r1
<gnu.xml.XMLFilter: void writeObject(java.lang.Object)>: $r3 = $r2.<gnu.lists.SeqPosition: gnu.lists.AbstractSequence sequence>
<gnu.xml.XMLFilter: void writeObject(java.lang.Object)>: virtualinvoke r0.<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>($r3, $i0)
<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>: virtualinvoke $r1.<gnu.lists.AbstractSequence: boolean consumeNext(int,gnu.lists.Consumer)>($i0, r0)
<gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>: $r2 = r0.<gnu.lists.F64Vector: double[] data>
<gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>: $d0 = $r2[$i0]
<gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>: interfaceinvoke $r1.<gnu.lists.Consumer: void writeDouble(double)>($d0)
<gnu.lists.PrintConsumer: void writeDouble(double)>: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0)
