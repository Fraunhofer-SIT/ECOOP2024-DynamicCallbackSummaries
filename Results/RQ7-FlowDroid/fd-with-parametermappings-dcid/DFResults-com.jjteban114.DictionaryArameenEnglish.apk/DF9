Source: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
$i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in <gnu.text.LineBufferedReader: int fill(int)>
Sink: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0) in <gnu.lists.PrintConsumer: void writeDouble(double)>

<gnu.text.LineBufferedReader: int fill(int)>: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
<gnu.text.LineBufferedReader: int fill(int)>: $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int fill(int)>: return $i0
<gnu.text.LineBufferedReader: int read()>: return -1
<gnu.mapping.TtyInPort: int read()>: return $i0
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: $r3 = $r0.<gnu.text.LineBufferedReader: char[] buffer>
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: specialinvoke $r4.<gnu.lists.FString: void <init>(char[],int,int)>($r3, $i0, i1)
<gnu.lists.FString: void <init>(char[],int,int)>: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r2, 0, $i1)
<gnu.lists.FString: void <init>(char[],int,int)>: $r2 = r0.<gnu.lists.FString: char[] data>
<gnu.lists.FString: void <init>(char[],int,int)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: return $r4
<kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>: return $r3
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: return $r4
<com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: return $r3
<gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>: virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
<gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>: interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
<gnu.xml.XMLFilter: void writeObject(java.lang.Object)>: $r2 = (gnu.lists.SeqPosition) $r1
<gnu.xml.XMLFilter: void writeObject(java.lang.Object)>: $r3 = $r2.<gnu.lists.SeqPosition: gnu.lists.AbstractSequence sequence>
<gnu.xml.XMLFilter: void writeObject(java.lang.Object)>: virtualinvoke r0.<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>($r3, $i0)
<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>: virtualinvoke $r1.<gnu.lists.AbstractSequence: boolean consumeNext(int,gnu.lists.Consumer)>($i0, r0)
<gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>: $r2 = r0.<gnu.lists.F64Vector: double[] data>
<gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>: $d0 = $r2[$i0]
<gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>: interfaceinvoke $r1.<gnu.lists.Consumer: void writeDouble(double)>($d0)
<gnu.lists.PrintConsumer: void writeDouble(double)>: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0)
