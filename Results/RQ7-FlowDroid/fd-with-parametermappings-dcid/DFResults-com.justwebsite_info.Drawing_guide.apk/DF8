Source: $i4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
$i4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>() in <gnu.kawa.lispexpr.LispReader: int readEscape(int)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: $i4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: $c0 = (char) $i4
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: $i4 = staticinvoke <java.lang.Character: int digit(char,int)>($c0, 16)
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: $i1 = $i1 + $i4
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: return $i1
<gnu.kawa.lispexpr.LispReader: int readEscape()>: return $i0
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: virtualinvoke $r0.<gnu.text.Lexer: void tokenBufferAppend(int)>(i3)
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) $i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r1[i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r1 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r4 = $r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>($r4, $i1, $i0)
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r3 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: return $r3
<gnu.kawa.lispexpr.ReaderString: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r2
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: return
<gnu.text.LineBufferedReader: int read()>: return -1
<gnu.mapping.TtyInPort: int read()>: r0 := @this: gnu.mapping.TtyInPort
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.text.LineBufferedReader: int read()>: return -1
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, i1, $i2)
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: specialinvoke $r7.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, i1, b2)
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: specialinvoke r3.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i0)
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: $r2 = r0.<gnu.lists.FString: char[] data>
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: return r3
<kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>: return $r3
<kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader)>: return $r1
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r3 = staticinvoke <kawa.lib.numbers: java.lang.Number exact$To$Inexact(java.lang.Number)>($r3)
<kawa.lib.numbers: java.lang.Number exact$To$Inexact(java.lang.Number)>: $r0 = staticinvoke <gnu.kawa.functions.Arithmetic: java.lang.Number toInexact(java.lang.Number)>($r0)
<gnu.kawa.functions.Arithmetic: java.lang.Number toInexact(java.lang.Number)>: r1 = virtualinvoke r1.<gnu.math.Numeric: gnu.math.Numeric toInexact()>()
<gnu.math.Complex: gnu.math.Complex toInexact()>: $r2 = virtualinvoke r0.<gnu.math.Complex: gnu.math.RealNum im()>()
<gnu.math.CComplex: gnu.math.RealNum im()>: r0 := @this: gnu.math.CComplex
<gnu.math.Complex: gnu.math.Complex toInexact()>: $z0 = virtualinvoke r0.<gnu.math.Complex: boolean isExact()>()
<gnu.math.Complex: boolean isExact()>: $r1 = virtualinvoke r0.<gnu.math.Complex: gnu.math.RealNum im()>()
<gnu.math.CComplex: gnu.math.RealNum im()>: r1 = r0.<gnu.math.CComplex: gnu.math.RealNum imag>
<gnu.math.CComplex: gnu.math.RealNum im()>: return r1
<gnu.math.Complex: boolean isExact()>: $z0 = virtualinvoke $r1.<gnu.math.RealNum: boolean isExact()>()
<gnu.math.RatNum: boolean isExact()>: r0 := @this: gnu.math.RatNum
<gnu.math.Complex: boolean isExact()>: $r1 = virtualinvoke r0.<gnu.math.Complex: gnu.math.RealNum im()>()
<gnu.math.CComplex: gnu.math.RealNum im()>: r1 = r0.<gnu.math.CComplex: gnu.math.RealNum imag>
<gnu.math.CComplex: gnu.math.RealNum im()>: return r1
<gnu.math.Complex: boolean isExact()>: return 1
<gnu.math.Complex: gnu.math.Complex toInexact()>: return $r1
<gnu.kawa.functions.Arithmetic: java.lang.Number toInexact(java.lang.Number)>: return r1
<kawa.lib.numbers: java.lang.Number exact$To$Inexact(java.lang.Number)>: return $r0
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
