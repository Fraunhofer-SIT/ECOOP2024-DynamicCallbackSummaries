Source: $i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>()
$i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>() in <gnu.text.LineBufferedReader: int read()>
Sink: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1) in <gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>

<gnu.text.LineBufferedReader: int read()>: $i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>()
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.mapping.CharArrayInPort: int read()>: return $i0
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.mapping.TtyInPort: int read()>: return $i0
<gnu.text.Lexer: int read()>: return $i0
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: return $i1
<gnu.kawa.lispexpr.LispReader: int readEscape()>: return $i0
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: virtualinvoke $r0.<gnu.text.Lexer: void tokenBufferAppend(int)>(i3)
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) $i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r1[i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r1 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r4 = $r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>($r4, $i1, $i0)
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r3 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: return $r3
<gnu.kawa.lispexpr.ReaderString: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r2
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: return
<gnu.text.LineBufferedReader: int read()>: return -1
<gnu.mapping.TtyInPort: int read()>: r0 := @this: gnu.mapping.TtyInPort
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.text.LineBufferedReader: int read()>: return -1
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, i1, $i2)
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: specialinvoke $r7.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, i1, b2)
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: specialinvoke r3.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i0)
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: $r2 = r0.<gnu.lists.FString: char[] data>
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: return r3
<kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>: return $r3
<kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader)>: return $r1
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $d0 = virtualinvoke $r3.<java.lang.Number: double doubleValue()>()
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0)
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r8
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<kawa.lib.ports: java.lang.Object callWithInputString(java.lang.CharSequence,gnu.mapping.Procedure)>: return $r4
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleBody: java.lang.Object apply4(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleBody: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<kawa.lib.numbers: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<kawa.lib.numbers: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: return r3
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<kawa.lib.ports: java.lang.Object inputPortLineNumber(gnu.text.LineBufferedReader)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>($r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<kawa.lib.ports: java.lang.Object inputPortLineNumber(gnu.text.LineBufferedReader)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>($r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<kawa.lib.ports: java.lang.Object inputPortLineNumber(gnu.text.LineBufferedReader)>: return $r4
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<kawa.lib.ports: java.lang.Object callWithInputFile(gnu.text.Path,gnu.mapping.Procedure)>: $r3 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>($r2)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>(r2)
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r3 = r0.<gnu.kawa.functions.NamedPart: java.lang.Object container>
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: throw $r14
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<kawa.lib.ports: java.lang.Object callWithInputFile(gnu.text.Path,gnu.mapping.Procedure)>: return $r3
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r5 = (gnu.mapping.Procedure) $r3
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r5 = $r2[1]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r3 = $r2[0]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r3 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r3, $r5)
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r6 = (java.lang.Number) $r3
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $d0 = virtualinvoke $r6.<java.lang.Number: double doubleValue()>()
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0)
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r7
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<com.justwebsite_info.Drawing_guide.Screen2$frame: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r1 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r1)
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>: virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
<gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>: interfaceinvoke $r0.<gnu.lists.Consumer: void writeObject(java.lang.Object)>(r1)
<gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1)
