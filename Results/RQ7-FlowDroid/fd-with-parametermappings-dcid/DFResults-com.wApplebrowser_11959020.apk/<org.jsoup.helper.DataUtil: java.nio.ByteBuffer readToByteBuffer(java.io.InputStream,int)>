    public static java.nio.ByteBuffer readToByteBuffer(java.io.InputStream, int) throws java.io.IOException
    {
        byte[] $r1;
        java.io.ByteArrayOutputStream $r3;
        java.nio.ByteBuffer $r2;
        int $i0, $i1, $i2;
        java.io.InputStream $r0;
        boolean $z0, $z1;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        $z1 = 1;

        goto label1;

     label1:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>($z1, "maxSize must be 0 (unlimited) or larger");

        goto label2;

     label2:
        $z0 = 0;

        $i1 = 60000;

        if $z0 == 0 goto label3;

        $i2 = 0;

        goto label4;

     label3:
        $i2 = 60000;

     label4:
        $r1 = newarray (byte)[$i2];

        $r3 = new java.io.ByteArrayOutputStream;

        if $z0 == 0 goto label5;

        $i1 = 0;

     label5:
        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>(int)>($i1);

     label6:
        $z1 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z1 != 0 goto label9;

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r1);

        if $i1 == -1 goto label9;

        if $z0 == 0 goto label8;

        if $i1 <= $i0 goto label7;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, 0, $i0);

        goto label9;

     label7:
        $i0 = $i0 - $i1;

     label8:
        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, 0, $i1);

        goto label6;

     label9:
        $r1 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        return $r2;
    }
