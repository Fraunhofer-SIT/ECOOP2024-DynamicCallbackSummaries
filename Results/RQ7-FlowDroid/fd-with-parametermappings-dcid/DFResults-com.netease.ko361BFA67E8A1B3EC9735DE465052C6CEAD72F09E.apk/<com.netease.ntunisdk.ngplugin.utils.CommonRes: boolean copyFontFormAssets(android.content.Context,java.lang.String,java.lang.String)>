    public boolean copyFontFormAssets(android.content.Context, java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r12, $r14, $r15, $r16, $r17, $r18;
        android.content.Context $r4;
        byte[] $r13;
        java.util.zip.ZipInputStream $r9, $r20;
        java.io.BufferedInputStream $r19;
        long $l0;
        android.content.res.AssetManager $r7;
        int $i1;
        java.lang.String $r5, $r6, $r11;
        java.util.zip.ZipEntry $r10;
        boolean $z0;
        java.io.FileOutputStream $r23;
        java.io.IOException $r24;
        java.lang.Exception $r1, $r2, $r3;
        java.io.File $r22;
        com.netease.ntunisdk.ngplugin.utils.CommonRes r0;
        java.lang.StringBuilder $r21;
        java.io.InputStream $r8;

        r0 := @this: com.netease.ntunisdk.ngplugin.utils.CommonRes;

        $r4 := @parameter0: android.content.Context;

        $r5 := @parameter1: java.lang.String;

        $r6 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<com.netease.ntunisdk.ngplugin.utils.CommonRes: boolean isLoadFont()>();

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $r7 = virtualinvoke $r4.<android.content.Context: android.content.res.AssetManager getAssets()>();

        $r8 = virtualinvoke $r7.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>($r6);

     label02:
        $r20 = new java.util.zip.ZipInputStream;

     label03:
        $r9 = $r20;

     label04:
        $r19 = new java.io.BufferedInputStream;

     label05:
        specialinvoke $r19.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r8);

        specialinvoke $r20.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r19);

     label06:
        $r10 = virtualinvoke $r20.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

     label07:
        if $r10 == null goto label38;

     label08:
        $r6 = virtualinvoke $r10.<java.util.zip.ZipEntry: java.lang.String getName()>();

     label09:
        $r21 = new java.lang.StringBuilder;

     label10:
        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unzip, name:");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size:");

        $l0 = virtualinvoke $r10.<java.util.zip.ZipEntry: long getSize()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r11 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.netease.ntunisdk.ngplugin.common.PluginLogger: void detail(java.lang.String)>($r11);

        $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("AndroidManifest.xml");

     label11:
        if $z0 == 0 goto label15;

     label12:
        virtualinvoke $r20.<java.util.zip.ZipInputStream: void close()>();

     label13:
        return 0;

     label14:
        $r12 := @caughtexception;

        $r24 = (java.io.IOException) $r12;

        virtualinvoke $r24.<java.io.IOException: void printStackTrace()>();

        return 0;

     label15:
        $z0 = virtualinvoke $r10.<java.util.zip.ZipEntry: boolean isDirectory()>();

     label16:
        if $z0 != 0 goto label06;

     label17:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6);

     label18:
        if $z0 != 0 goto label06;

     label19:
        $z0 = virtualinvoke $r6.<java.lang.String: boolean endsWith(java.lang.String)>("font.ttf");

     label20:
        if $z0 == 0 goto label06;

     label21:
        $r22 = new java.io.File;

     label22:
        specialinvoke $r22.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r5, "plugin_font.ttf");

        $z0 = virtualinvoke $r22.<java.io.File: boolean exists()>();

     label23:
        if $z0 == 0 goto label27;

     label24:
        $z0 = virtualinvoke $r22.<java.io.File: boolean delete()>();

     label25:
        $r21 = new java.lang.StringBuilder;

     label26:
        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("delete result: ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.netease.ntunisdk.ngplugin.common.PluginLogger: void detail(java.lang.String)>($r5);

     label27:
        $r13 = newarray (byte)[1024];

     label28:
        $r23 = new java.io.FileOutputStream;

     label29:
        specialinvoke $r23.<java.io.FileOutputStream: void <init>(java.io.File)>($r22);

     label30:
        $i1 = virtualinvoke $r20.<java.util.zip.ZipInputStream: int read(byte[],int,int)>($r13, 0, 1024);

     label31:
        if $i1 <= 0 goto label34;

     label32:
        virtualinvoke $r23.<java.io.OutputStream: void write(byte[],int,int)>($r13, 0, $i1);

     label33:
        goto label30;

     label34:
        virtualinvoke $r23.<java.io.OutputStream: void flush()>();

        virtualinvoke $r23.<java.io.OutputStream: void close()>();

        virtualinvoke r0.<com.netease.ntunisdk.ngplugin.utils.CommonRes: void setLoadFont(boolean)>(1);

     label35:
        virtualinvoke $r20.<java.util.zip.ZipInputStream: void close()>();

     label36:
        return 1;

     label37:
        $r14 := @caughtexception;

        $r24 = (java.io.IOException) $r14;

        virtualinvoke $r24.<java.io.IOException: void printStackTrace()>();

        return 1;

     label38:
        virtualinvoke $r20.<java.util.zip.ZipInputStream: void close()>();

     label39:
        return 0;

     label40:
        $r15 := @caughtexception;

        $r24 = (java.io.IOException) $r15;

        virtualinvoke $r24.<java.io.IOException: void printStackTrace()>();

        return 0;

     label41:
        $r16 := @caughtexception;

        goto label43;

     label42:
        $r16 := @caughtexception;

        $r9 = null;

     label43:
        if $r9 == null goto label47;

     label44:
        virtualinvoke $r9.<java.util.zip.ZipInputStream: void close()>();

     label45:
        goto label47;

     label46:
        $r17 := @caughtexception;

        $r24 = (java.io.IOException) $r17;

        virtualinvoke $r24.<java.io.IOException: void printStackTrace()>();

     label47:
        throw $r16;

     label48:
        $r9 = null;

     label49:
        if $r9 == null goto label56;

     label50:
        virtualinvoke $r9.<java.util.zip.ZipInputStream: void close()>();

     label51:
        return 0;

     label52:
        $r18 := @caughtexception;

        $r24 = (java.io.IOException) $r18;

        virtualinvoke $r24.<java.io.IOException: void printStackTrace()>();

        return 0;

     label53:
        $r1 := @caughtexception;

        goto label48;

     label54:
        $r2 := @caughtexception;

        goto label49;

     label55:
        $r3 := @caughtexception;

        goto label49;

     label56:
        return 0;

        catch java.lang.Exception from label01 to label02 with label53;
        catch java.lang.Exception from label05 to label06 with label53;
        catch java.lang.Throwable from label01 to label03 with label42;
        catch java.lang.Throwable from label04 to label05 with label42;
        catch java.lang.Throwable from label05 to label06 with label42;
        catch java.lang.Exception from label06 to label07 with label54;
        catch java.lang.Exception from label08 to label09 with label54;
        catch java.lang.Exception from label10 to label11 with label54;
        catch java.lang.Throwable from label06 to label07 with label41;
        catch java.lang.Throwable from label08 to label10 with label41;
        catch java.lang.Throwable from label10 to label11 with label41;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.lang.Exception from label15 to label16 with label55;
        catch java.lang.Exception from label17 to label18 with label55;
        catch java.lang.Exception from label19 to label20 with label55;
        catch java.lang.Exception from label22 to label23 with label55;
        catch java.lang.Exception from label24 to label25 with label55;
        catch java.lang.Exception from label26 to label27 with label55;
        catch java.lang.Exception from label29 to label31 with label55;
        catch java.lang.Exception from label32 to label33 with label55;
        catch java.lang.Exception from label34 to label35 with label55;
        catch java.lang.Throwable from label15 to label16 with label41;
        catch java.lang.Throwable from label17 to label18 with label41;
        catch java.lang.Throwable from label19 to label20 with label41;
        catch java.lang.Throwable from label21 to label22 with label41;
        catch java.lang.Throwable from label22 to label23 with label41;
        catch java.lang.Throwable from label24 to label26 with label41;
        catch java.lang.Throwable from label26 to label27 with label41;
        catch java.lang.Throwable from label28 to label29 with label41;
        catch java.lang.Throwable from label29 to label31 with label41;
        catch java.lang.Throwable from label32 to label33 with label41;
        catch java.lang.Throwable from label34 to label35 with label41;
        catch java.io.IOException from label35 to label36 with label37;
        catch java.io.IOException from label38 to label39 with label40;
        catch java.io.IOException from label44 to label45 with label46;
        catch java.io.IOException from label50 to label51 with label52;
    }
