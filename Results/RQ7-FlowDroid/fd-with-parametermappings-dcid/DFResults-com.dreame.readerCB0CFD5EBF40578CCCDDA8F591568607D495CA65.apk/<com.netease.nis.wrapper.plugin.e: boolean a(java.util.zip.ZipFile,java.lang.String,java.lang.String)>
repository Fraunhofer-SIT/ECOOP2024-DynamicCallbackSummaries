    private static boolean a(java.util.zip.ZipFile, java.lang.String, java.lang.String)
    {
        byte[] $r3;
        java.lang.Object[] $r11;
        java.util.Enumeration $r4;
        java.lang.String[] $r16;
        int $i0;
        java.util.zip.ZipFile $r0;
        java.lang.String $r1, $r2, $r5, $r13;
        java.lang.reflect.Method $r8;
        java.util.zip.ZipEntry $r10;
        boolean $z0, $z1;
        java.lang.Class[] $r7;
        java.io.FileOutputStream $r18;
        java.io.File $r15, $r17;
        java.lang.Exception $r19, $r20;
        java.lang.Class $r6;
        java.lang.Object $r9;
        java.lang.StringBuilder $r12;
        java.io.InputStream $r14;

        $r0 := @parameter0: java.util.zip.ZipFile;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $z0 = 0;

        $r3 = newarray (byte)[1024];

     label01:
        $r4 = virtualinvoke $r0.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

        $r5 = staticinvoke <a.auu.a: java.lang.String c(java.lang.String)>("JAQCBE8GEScJWh8IA0sUDAQgDwcXNw==");

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r5);

        $r5 = staticinvoke <a.auu.a: java.lang.String c(java.lang.String)>("KQAAKwAeAA==");

     label02:
        $r7 = newarray (java.lang.Class)[0];

     label03:
        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r5, $r7);

     label04:
        $z1 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

     label05:
        if $z1 == 0 goto label31;

     label06:
        $r9 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r10 = (java.util.zip.ZipEntry) $r9;

     label07:
        $r11 = newarray (java.lang.Object)[0];

     label08:
        $r9 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r10, $r11);

        $r5 = (java.lang.String) $r9;

     label09:
        $r12 = new java.lang.StringBuilder;

     label10:
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r13 = staticinvoke <a.auu.a: java.lang.String c(java.lang.String)>("YQ==");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean contains(java.lang.CharSequence)>($r13);

     label11:
        if $z1 == 0 goto label04;

     label12:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean contains(java.lang.CharSequence)>("../");

     label13:
        if $z0 != 0 goto label33;

     label14:
        $r14 = virtualinvoke $r0.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>($r10);

     label15:
        $r15 = new java.io.File;

        $r12 = new java.lang.StringBuilder;

     label16:
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label17:
        $r13 = <java.io.File: java.lang.String separator>;

     label18:
        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r13 = staticinvoke <a.auu.a: java.lang.String c(java.lang.String)>("YQ==");

        $r16 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>($r13);

        $r5 = $r16[1];

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>($r5);

     label19:
        $r17 = new java.io.File;

     label20:
        $r5 = virtualinvoke $r15.<java.io.File: java.lang.String getParent()>();

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>($r5);

        virtualinvoke $r17.<java.io.File: boolean mkdirs()>();

     label21:
        $r18 = new java.io.FileOutputStream;

     label22:
        specialinvoke $r18.<java.io.FileOutputStream: void <init>(java.io.File)>($r15);

     label23:
        $i0 = virtualinvoke $r14.<java.io.InputStream: int read(byte[])>($r3);

     label24:
        if $i0 <= 0 goto label29;

     label25:
        virtualinvoke $r18.<java.io.FileOutputStream: void write(byte[],int,int)>($r3, 0, $i0);

     label26:
        goto label23;

     label27:
        $r19 := @caughtexception;

        $z0 = 1;

     label28:
        return $z0;

     label29:
        virtualinvoke $r18.<java.io.FileOutputStream: void close()>();

        virtualinvoke $r14.<java.io.InputStream: void close()>();

     label30:
        $z0 = 1;

        goto label04;

     label31:
        if $z0 != 0 goto label34;

        goto label28;

     label32:
        $r20 := @caughtexception;

        goto label28;

     label33:
        $z0 = 1;

        goto label04;

     label34:
        return $z0;

        catch java.lang.Exception from label01 to label02 with label32;
        catch java.lang.Exception from label03 to label05 with label32;
        catch java.lang.Exception from label06 to label07 with label32;
        catch java.lang.Exception from label08 to label09 with label32;
        catch java.lang.Exception from label10 to label11 with label32;
        catch java.lang.Exception from label12 to label13 with label27;
        catch java.lang.Exception from label14 to label15 with label27;
        catch java.lang.Exception from label16 to label17 with label27;
        catch java.lang.Exception from label18 to label19 with label27;
        catch java.lang.Exception from label20 to label21 with label27;
        catch java.lang.Exception from label22 to label24 with label27;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label29 to label30 with label27;
    }
