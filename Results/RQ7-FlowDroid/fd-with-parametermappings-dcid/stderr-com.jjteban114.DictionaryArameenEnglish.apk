[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loading sources and sinks from SourcesSinks/UnconstrainedSourcesSinks.xml...
[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loaded 273 sources and 91 sinks from the XML file
[main] INFO soot.jimple.infoflow.android.SetupApplication - Initializing Soot...
[main] WARN soot.Scene - Android API version '31' not available, using minApkVersion '21' instead
[main] INFO soot.jimple.infoflow.android.SetupApplication - Loading dex files...
[main] INFO soot.jimple.infoflow.android.SetupApplication - ARSC file parsing took 0.03912512 seconds
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230,400 MiB
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 3 components...
[main] WARN soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Cannot generate constructor for phantom class androidx.core.content.FileProvider
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Collecting callbacks in DEFAULT mode...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Callback analysis done.
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 3 components...
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Running incremental callback analysis for 2 components...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Incremental callback analysis done.
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 3 components...
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Running incremental callback analysis for 1 components...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Incremental callback analysis done.
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 3 components...
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Running incremental callback analysis for 1 components...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Incremental callback analysis done.
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] INFO soot.jimple.infoflow.android.SetupApplication - Callback analysis terminated normally
[main] INFO soot.jimple.infoflow.android.SetupApplication - Entry point calculation done.
[main] INFO soot.jimple.infoflow.android.source.AccessPathBasedSourceSinkManager - Created a SourceSinkManager with 273 sources, 91 sinks, and 70 callback methods.
[main] INFO soot.jimple.infoflow.android.SetupApplication - Collecting callbacks and building a callgraph took 111 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication - Running data flow analysis on storagepath2-data/androidApps/2023-AndroZoo-PlayStore/com.jjteban114.DictionaryArameenEnglish.apk with 273 sources and 91 sinks...
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Implicit flow tracking is NOT enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Exceptional flow tracking is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Running with a maximum access path length of 5
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using path-agnostic result collection
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Recursive access path shortening is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Taint analysis enabled: true
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using alias algorithm FlowSensitive
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230,400 MiB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph construction took 0 seconds
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.codeOptimization.InterproceduralConstantValuePropagator - Removing side-effect free methods is disabled
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Dead code elimination took 2.605384604 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph has 54005 edges
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Starting Taint Analysis
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] WARN soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Running with limited join point abstractions can break context-sensitive path builders
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Looking for sources and sinks...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Source lookup done, found 82 sources and 305 sinks.
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<java.math.BigDecimal: java.lang.Object value>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.Pair: java.lang.Object car>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.Pair: java.lang.Object car>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.Pair: java.lang.Object car>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: int highestPos>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: int highestPos>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: int highestPos>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: io.kodular.jjteban114.DictionaryArameenEnglish.Screen1 $main>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: io.kodular.jjteban114.DictionaryArameenEnglish.Screen1 $main>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<java.math.BigDecimal: java.lang.Object value>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<java.math.BigDecimal: java.lang.Object value>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.Pair: java.lang.Object car>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: io.kodular.jjteban114.DictionaryArameenEnglish.Screen1 $main>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: io.kodular.jjteban114.DictionaryArameenEnglish.Screen1 $main>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<java.math.BigDecimal: java.lang.Object value>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.Pair: java.lang.Object car>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<java.math.BigDecimal: java.lang.Object value>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.Pair: java.lang.Object car>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: int highestPos>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.Pair: java.lang.Object car>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: io.kodular.jjteban114.DictionaryArameenEnglish.Screen1 $main>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.Pair: java.lang.Object car>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.math.CQuantity: gnu.math.Complex num>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: io.kodular.jjteban114.DictionaryArameenEnglish.Screen1 $main>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.Pair: java.lang.Object car>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.FString: char[] data>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: io.kodular.jjteban114.DictionaryArameenEnglish.Screen1 $main>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.lists.Pair: java.lang.Object car>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: int highestPos>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: kawa.lang.SyntaxRule[] rules>, <kawa.lang.SyntaxTemplate: java.lang.Object[] literal_values>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: io.kodular.jjteban114.DictionaryArameenEnglish.Screen1 $main>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: io.kodular.jjteban114.DictionaryArameenEnglish.Screen1 $main>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: io.kodular.jjteban114.DictionaryArameenEnglish.Screen1 $main>, <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: gnu.lists.LList form$Mndo$Mnafter$Mncreation>, <gnu.lists.Pair: java.lang.Object car>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.Lexer: gnu.text.LineBufferedReader port>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>, <gnu.kawa.functions.NamedPart: java.lang.Object container>, <gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid Timeout Watcher] WARN soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - Timeout reached, stopping the solvers...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper hits: 18708131
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper misses: 46550014
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - IFDS problem with 54312730 forward and 48650731 backward edges solved in 902 seconds, processing 37 results...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Current memory consumption: 86192 MB
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after cleanup: 25078 MB
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 1 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[Low memory monitor] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Triggering memory warning at 242495 MB (268435 MB max, 241596 in watched memory pool)...
[Low memory monitor] WARN soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Path reconstruction terminated due to low memory
[Low memory monitor] WARN soot.jimple.infoflow.memory.FlowDroidMemoryWatcher - Running out of memory, solvers terminated
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 2 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 3 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 4 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 5 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 6 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 7 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 8 with 2 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 2 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after path building: 265278 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Path reconstruction took 25466 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5) in method <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r2.<gnu.text.LineBufferedReader: int read()>() in method <gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r2.<gnu.text.LineBufferedReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i3 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>(i3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = $i0 & 1023
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0 + 56320
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r9
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>($i4, $r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r2, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>($i0, $i1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.mapping.Values) $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.Values: void consume(gnu.lists.Consumer)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: void consume(gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>(0, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.TreeList: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i1 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>() in method <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c2 = (char) $i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i3 = staticinvoke <java.lang.Character: int digit(char,int)>($c2, 16)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i0 = i0 + $i3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.mapping.Values) $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.Values: void consume(gnu.lists.Consumer)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: void consume(gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>(0, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.TreeList: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in method <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.text.LineBufferedReader
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.text.LineBufferedReader
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(char[],int,int)>($r3, $i0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(char[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r2, 0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(char[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(char[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.mapping.Values) $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.Values: void consume(gnu.lists.Consumer)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: void consume(gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>(0, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.TreeList: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i4 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>() in method <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i4 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>($i4, $r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r2, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>($i0, $i1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>($i0, $c2, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i2 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.mapping.Values) $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.Values: void consume(gnu.lists.Consumer)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: void consume(gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>(0, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.TreeList: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>() in method <gnu.mapping.TtyInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.mapping.Values) $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.Values: void consume(gnu.lists.Consumer)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: void consume(gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>(0, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.TreeList: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in method <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: void <init>(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.io.File: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: void <init>(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<gnu.text.FilePath: java.lang.String path> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: void <init>(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Path: gnu.text.Path resolve(gnu.text.Path)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r1 = $r6
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.KNode: gnu.text.Path baseURI()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.mapping.Values) $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.Values: void consume(gnu.lists.Consumer)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: void consume(gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>(0, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.TreeList: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>() in method <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.mapping.Values) $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.Values: void consume(gnu.lists.Consumer)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: void consume(gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>(0, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.TreeList: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - i4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>() in method <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i2 = i4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.mapping.Values) $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.Values: void consume(gnu.lists.Consumer)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: void consume(gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>(0, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.TreeList: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>() in method <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.mapping.Values) $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.Values: void consume(gnu.lists.Consumer)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: void consume(gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>(0, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.TreeList: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - i2 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>() in method <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i2 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.mapping.Values) $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.Values: void consume(gnu.lists.Consumer)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: void consume(gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>(0, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.TreeList: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>() in method <gnu.mapping.CharArrayInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CharArrayInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CharArrayInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.mapping.Values) $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.Values: void consume(gnu.lists.Consumer)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: void consume(gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>(0, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.TreeList: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in method <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in method <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.TtyInPort
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r3.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>(r0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r4.<io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: void addToEvents(java.lang.Object,java.lang.Object)>($r2, $r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: void addToEvents(java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r2.<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<gnu.lists.Pair: java.lang.Object car> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: void addToEvents(java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: gnu.lists.LList events$Mnto$Mnregister> = $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1: void addToEvents(java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = r0.<io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: io.kodular.jjteban114.DictionaryArameenEnglish.Screen1 $main>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <io.kodular.jjteban114.DictionaryArameenEnglish.Screen1$frame: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r6
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.ProcedureN
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0) in method <gnu.lists.PrintConsumer: void writeDouble(double)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r2.<gnu.text.LineBufferedReader: int read()>() in method <gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r2.<gnu.text.LineBufferedReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i3 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>(i3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = $i0 & 1023
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0 + 56320
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r9
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>($i4, $r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r2, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>($i0, $i1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.lists.SeqPosition) $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2.<gnu.lists.SeqPosition: gnu.lists.AbstractSequence sequence>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>($r3, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.lists.AbstractSequence: boolean consumeNext(int,gnu.lists.Consumer)>($i0, r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.F64Vector: double[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $d0 = $r2[$i0]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeDouble(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.PrintConsumer: void writeDouble(double)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i1 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>() in method <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c2 = (char) $i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i3 = staticinvoke <java.lang.Character: int digit(char,int)>($c2, 16)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i0 = i0 + $i3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.lists.SeqPosition) $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2.<gnu.lists.SeqPosition: gnu.lists.AbstractSequence sequence>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>($r3, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.lists.AbstractSequence: boolean consumeNext(int,gnu.lists.Consumer)>($i0, r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.F64Vector: double[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $d0 = $r2[$i0]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeDouble(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.PrintConsumer: void writeDouble(double)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in method <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(char[],int,int)>($r3, $i0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(char[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r2, 0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(char[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(char[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.lists.SeqPosition) $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2.<gnu.lists.SeqPosition: gnu.lists.AbstractSequence sequence>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>($r3, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.lists.AbstractSequence: boolean consumeNext(int,gnu.lists.Consumer)>($i0, r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.F64Vector: double[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $d0 = $r2[$i0]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeDouble(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.PrintConsumer: void writeDouble(double)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i4 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>() in method <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i4 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>($i4, $r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r2, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>($i0, $i1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>($i0, $c2, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i2 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.lists.SeqPosition) $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2.<gnu.lists.SeqPosition: gnu.lists.AbstractSequence sequence>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>($r3, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.lists.AbstractSequence: boolean consumeNext(int,gnu.lists.Consumer)>($i0, r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.F64Vector: double[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $d0 = $r2[$i0]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeDouble(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.PrintConsumer: void writeDouble(double)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>() in method <gnu.mapping.TtyInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>($i4, $r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r2, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>($i0, $i1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>($i0, $c2, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i2 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.lists.SeqPosition) $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2.<gnu.lists.SeqPosition: gnu.lists.AbstractSequence sequence>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>($r3, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.lists.AbstractSequence: boolean consumeNext(int,gnu.lists.Consumer)>($i0, r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.F64Vector: double[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $d0 = $r2[$i0]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeDouble(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.PrintConsumer: void writeDouble(double)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>() in method <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke r0.<gnu.text.LineBufferedReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CharArrayInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CharArrayInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.lists.SeqPosition) $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2.<gnu.lists.SeqPosition: gnu.lists.AbstractSequence sequence>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>($r3, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.lists.AbstractSequence: boolean consumeNext(int,gnu.lists.Consumer)>($i0, r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.F64Vector: double[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $d0 = $r2[$i0]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeDouble(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.PrintConsumer: void writeDouble(double)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in method <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: void <init>(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.io.File: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: void <init>(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<gnu.text.FilePath: java.lang.String path> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: void <init>(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Path: gnu.text.Path resolve(gnu.text.Path)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r1 = $r6
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.KNode: gnu.text.Path baseURI()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object baseUri()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object apply0(gnu.expr.ModuleMethod)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.strings: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.lists.SeqPosition) $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2.<gnu.lists.SeqPosition: gnu.lists.AbstractSequence sequence>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>($r3, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.lists.AbstractSequence: boolean consumeNext(int,gnu.lists.Consumer)>($i0, r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.F64Vector: double[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $d0 = $r2[$i0]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeDouble(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.PrintConsumer: void writeDouble(double)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>() in method <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c2 = (char) $i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i3 = staticinvoke <java.lang.Character: int digit(char,int)>($c2, 16)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i0 = i0 + $i3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.lists.SeqPosition) $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2.<gnu.lists.SeqPosition: gnu.lists.AbstractSequence sequence>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>($r3, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.lists.AbstractSequence: boolean consumeNext(int,gnu.lists.Consumer)>($i0, r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.F64Vector: double[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $d0 = $r2[$i0]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeDouble(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.PrintConsumer: void writeDouble(double)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - i2 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>() in method <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i2 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.lists.SeqPosition) $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2.<gnu.lists.SeqPosition: gnu.lists.AbstractSequence sequence>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>($r3, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.lists.AbstractSequence: boolean consumeNext(int,gnu.lists.Consumer)>($i0, r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.F64Vector: double[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $d0 = $r2[$i0]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeDouble(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.PrintConsumer: void writeDouble(double)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>() in method <gnu.mapping.CharArrayInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CharArrayInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CharArrayInPort: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> i1 = $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c3 = (char) i1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2[$i0] = $c3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Lexer: void tokenBufferAppend(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> c9 = $r0[$i10]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return -1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r4.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.FString: char[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = (gnu.lists.SeqPosition) $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2.<gnu.lists.SeqPosition: gnu.lists.AbstractSequence sequence>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>($r3, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.lists.AbstractSequence: boolean consumeNext(int,gnu.lists.Consumer)>($i0, r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.lists.F64Vector: double[] data>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $d0 = $r2[$i0]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.F64Vector: boolean consumeNext(int,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeDouble(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.PrintConsumer: void writeDouble(double)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.PrintConsumer: void print(double)>($d0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Data flow solver took 26397 seconds. Maximum memory consumption: 265278 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication - Found 3 leaks
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'SummaryStatistics'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Telemetry'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'Telemetry_sha256Hash_idx' for table 'Telemetry
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Callbacks'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallbackSummaries'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'CallbackSummaries_sha256Hash_idx' for table 'CallbackSummaries
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'AppSizes'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'AppSizes_sha256Hash_idx' for table 'AppSizes
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallgraphSizes'
