Source: $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>()
$i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>() in <gnu.mapping.TtyInPort: int read()>
Sink: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1) in <gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>

<gnu.mapping.TtyInPort: int read()>: $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>()
<gnu.mapping.TtyInPort: int read()>: return $i0
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: $r5 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>($i4, $r4)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r2, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke $r1.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>(r0, $i1, -1)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>($i0)
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $r1[$i1] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: $r1 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r5 = $r1.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: specialinvoke $r8.<java.lang.String: void <init>(char[],int,int)>($r5, $i1, $i0)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r8
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r5
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: return
<gnu.text.LineBufferedReader: int read()>: return -1
<gnu.mapping.TtyInPort: int read()>: r0 := @this: gnu.mapping.TtyInPort
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.mapping.TtyInPort: int read()>: return $i0
<gnu.text.LineBufferedReader: int read()>: return -1
<gnu.mapping.TtyInPort: int read()>: return $i0
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: specialinvoke $r7.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, $i0, $b4)
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: specialinvoke $r3.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, $i2)
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: r0.<gnu.lists.FString: char[] data> = $r2
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: return $r3
<kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>: return $r3
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r1
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>()
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r1 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>($r1)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: $r2 = virtualinvoke $r4.<gnu.mapping.Procedure: java.lang.Object applyN(java.lang.Object[])>($r3)
<gnu.mapping.Procedure2: java.lang.Object applyN(java.lang.Object[])>: $r1 = virtualinvoke r0.<gnu.mapping.Procedure2: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r1, $r3)
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r2 = virtualinvoke $r4.<gnu.bytecode.Type: java.lang.Object coerceFromObject(java.lang.Object)>($r1)
<gnu.bytecode.PrimType: java.lang.Object coerceFromObject(java.lang.Object)>: $r5 = (java.lang.Number) $r1
<gnu.bytecode.PrimType: java.lang.Object coerceFromObject(java.lang.Object)>: $b3 = virtualinvoke $r5.<java.lang.Number: byte byteValue()>()
<gnu.bytecode.PrimType: java.lang.Object coerceFromObject(java.lang.Object)>: $r14 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b3)
<gnu.bytecode.PrimType: java.lang.Object coerceFromObject(java.lang.Object)>: return $r14
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r2
<gnu.mapping.Procedure2: java.lang.Object applyN(java.lang.Object[])>: return $r1
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>()
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r4)
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: return $r4
<com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r1
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply3(java.lang.Object,java.lang.Object,java.lang.Object)>: return $r3
<com.google.youngandroid.runtime: java.lang.Object $PcSetAndCoerceProperty$Ex(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>: return $r2
<com.google.youngandroid.runtime: java.lang.Object setAndCoerceProperty$Ex(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>: return $r3
<com.niotron.sajeednandargi.OnlineShoppingSweden.WebView: void run(gnu.mapping.CallContext)>: staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r3, $r2)
<gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>: interfaceinvoke $r0.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r1)
<gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1)
