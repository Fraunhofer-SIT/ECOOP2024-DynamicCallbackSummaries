    public java.lang.Object applyN(java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Object[] $r1, $r3;
        gnu.kawa.reflect.Invoke $r11;
        gnu.mapping.WrongArguments $r8;
        gnu.kawa.functions.ApplyToArgs r0;
        gnu.mapping.Procedure $r4;
        gnu.mapping.WrongType $r10;
        java.util.List $r7;
        int $i0;
        java.lang.Object $r2, $r5;
        java.lang.Class $r9;
        java.lang.Number $r6;
        boolean $z0;

        r0 := @this: gnu.kawa.functions.ApplyToArgs;

        $r1 := @parameter0: java.lang.Object[];

        $r2 = $r1[0];

        $z0 = $r2 instanceof gnu.mapping.Procedure;

        if $z0 == 0 goto label1;

        $i0 = lengthof $r1;

        $i0 = $i0 - 1;

        $r3 = newarray (java.lang.Object)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, $r3, 0, $i0);

        $r4 = (gnu.mapping.Procedure) $r2;

        $r2 = virtualinvoke $r4.<gnu.mapping.Procedure: java.lang.Object applyN(java.lang.Object[])>($r3);

        return $r2;

     label1:
        $z0 = $r2 instanceof gnu.bytecode.Type;

        if $z0 != 0 goto label6;

        $z0 = $r2 instanceof java.lang.Class;

        if $z0 != 0 goto label6;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label3;

        $i0 = lengthof $r1;

        if $i0 != 2 goto label2;

        $r5 = $r1[1];

        $r6 = (java.lang.Number) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        $r7 = (java.util.List) $r2;

        $r2 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i0);

        return $r2;

     label2:
        $r8 = new gnu.mapping.WrongArguments;

        $i0 = lengthof $r1;

        specialinvoke $r8.<gnu.mapping.WrongArguments: void <init>(gnu.mapping.Procedure,int)>(r0, $i0);

        throw $r8;

     label3:
        $r9 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r9.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label5;

        $i0 = lengthof $r1;

        if $i0 != 2 goto label4;

        $r5 = $r1[1];

        $r6 = (java.lang.Number) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>($r2, $i0);

        return $r2;

     label4:
        $r8 = new gnu.mapping.WrongArguments;

        $i0 = lengthof $r1;

        specialinvoke $r8.<gnu.mapping.WrongArguments: void <init>(gnu.mapping.Procedure,int)>(r0, $i0);

        throw $r8;

     label5:
        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(gnu.mapping.Procedure,int,java.lang.Object,java.lang.String)>(r0, 0, $r2, "procedure");

        throw $r10;

     label6:
        $r11 = <gnu.kawa.reflect.Invoke: gnu.kawa.reflect.Invoke make>;

        $r2 = virtualinvoke $r11.<gnu.kawa.reflect.Invoke: java.lang.Object applyN(java.lang.Object[])>($r1);

        return $r2;
    }
