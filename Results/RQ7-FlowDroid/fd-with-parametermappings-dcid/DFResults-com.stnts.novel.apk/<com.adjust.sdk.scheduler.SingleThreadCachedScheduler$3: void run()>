    public void run()
    {
        com.adjust.sdk.scheduler.SingleThreadCachedScheduler $r1;
        java.lang.Throwable $r6;
        com.adjust.sdk.scheduler.SingleThreadCachedScheduler$3 r0;
        java.lang.Runnable $r2;
        java.util.List $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.adjust.sdk.scheduler.SingleThreadCachedScheduler$3;

        $r1 = r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler$3: com.adjust.sdk.scheduler.SingleThreadCachedScheduler this$0>;

        $r2 = r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler$3: java.lang.Runnable val$firstRunnable>;

        staticinvoke <com.adjust.sdk.scheduler.SingleThreadCachedScheduler: void access$000(com.adjust.sdk.scheduler.SingleThreadCachedScheduler,java.lang.Runnable)>($r1, $r2);

     label01:
        $r1 = r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler$3: com.adjust.sdk.scheduler.SingleThreadCachedScheduler this$0>;

        $r3 = staticinvoke <com.adjust.sdk.scheduler.SingleThreadCachedScheduler: java.util.List access$100(com.adjust.sdk.scheduler.SingleThreadCachedScheduler)>($r1);

        entermonitor $r3;

     label02:
        $r1 = r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler$3: com.adjust.sdk.scheduler.SingleThreadCachedScheduler this$0>;

        $z0 = staticinvoke <com.adjust.sdk.scheduler.SingleThreadCachedScheduler: boolean access$200(com.adjust.sdk.scheduler.SingleThreadCachedScheduler)>($r1);

        if $z0 == 0 goto label04;

        exitmonitor $r3;

     label03:
        return;

     label04:
        $r1 = r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler$3: com.adjust.sdk.scheduler.SingleThreadCachedScheduler this$0>;

        $r4 = staticinvoke <com.adjust.sdk.scheduler.SingleThreadCachedScheduler: java.util.List access$100(com.adjust.sdk.scheduler.SingleThreadCachedScheduler)>($r1);

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label06;

        $r1 = r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler$3: com.adjust.sdk.scheduler.SingleThreadCachedScheduler this$0>;

        staticinvoke <com.adjust.sdk.scheduler.SingleThreadCachedScheduler: boolean access$302(com.adjust.sdk.scheduler.SingleThreadCachedScheduler,boolean)>($r1, 0);

        exitmonitor $r3;

     label05:
        return;

     label06:
        $r1 = r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler$3: com.adjust.sdk.scheduler.SingleThreadCachedScheduler this$0>;

        $r4 = staticinvoke <com.adjust.sdk.scheduler.SingleThreadCachedScheduler: java.util.List access$100(com.adjust.sdk.scheduler.SingleThreadCachedScheduler)>($r1);

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (java.lang.Runnable) $r5;

        $r1 = r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler$3: com.adjust.sdk.scheduler.SingleThreadCachedScheduler this$0>;

        $r4 = staticinvoke <com.adjust.sdk.scheduler.SingleThreadCachedScheduler: java.util.List access$100(com.adjust.sdk.scheduler.SingleThreadCachedScheduler)>($r1);

        interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>(0);

        exitmonitor $r3;

     label07:
        $r1 = r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler$3: com.adjust.sdk.scheduler.SingleThreadCachedScheduler this$0>;

        staticinvoke <com.adjust.sdk.scheduler.SingleThreadCachedScheduler: void access$000(com.adjust.sdk.scheduler.SingleThreadCachedScheduler,java.lang.Runnable)>($r1, $r2);

        goto label01;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor $r3;

     label10:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }
