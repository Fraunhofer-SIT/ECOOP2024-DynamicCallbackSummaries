    public void submit(java.lang.Runnable)
    {
        com.adjust.sdk.scheduler.SingleThreadCachedScheduler r0;
        java.lang.Throwable $r4;
        java.util.List $r1, $r3;
        java.lang.Runnable $r2;
        boolean $z0;

        r0 := @this: com.adjust.sdk.scheduler.SingleThreadCachedScheduler;

        $r2 := @parameter0: java.lang.Runnable;

        $r1 = r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler: java.util.List queue>;

        entermonitor $r1;

     label1:
        $z0 = r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler: boolean isTeardown>;

        if $z0 == 0 goto label3;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $z0 = r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler: boolean isThreadProcessing>;

        if $z0 != 0 goto label4;

        r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler: boolean isThreadProcessing> = 1;

        specialinvoke r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler: void processQueue(java.lang.Runnable)>($r2);

        goto label5;

     label4:
        $r3 = r0.<com.adjust.sdk.scheduler.SingleThreadCachedScheduler: java.util.List queue>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

     label5:
        exitmonitor $r1;

     label6:
        return;

     label7:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }
