Source: $i4 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
$i4 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>() in <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: $i4 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: $r4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>($i4, $r3)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r2, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke $r1.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>(r0, $i0, -1)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>($i0)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0 - 65536
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = i1 >> 10
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = i1 + 55296
<gnu.text.Lexer: void tokenBufferAppend(int)>: virtualinvoke r0.<gnu.text.Lexer: void tokenBufferAppend(int)>(i1)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r5 = $r1.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: specialinvoke $r10.<java.lang.String: void <init>(char[],int,int)>($r5, $i1, $i0)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r8 = virtualinvoke $r10.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r8
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r2 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>($r1, $r3)
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.ports: java.lang.Object callWithInputFile(gnu.text.Path,gnu.mapping.Procedure)>($r4, $r5)
<kawa.lib.ports: java.lang.Object callWithInputFile(gnu.text.Path,gnu.mapping.Procedure)>: $r3 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>($r2)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r5
<kawa.lib.ports: java.lang.Object callWithInputFile(gnu.text.Path,gnu.mapping.Procedure)>: $r3 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>($r2)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r3 = r0.<gnu.kawa.functions.NamedPart: java.lang.Object container>
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: throw $r14
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<kawa.lib.ports: java.lang.Object callWithInputFile(gnu.text.Path,gnu.mapping.Procedure)>: return $r3
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r5 = (gnu.mapping.Procedure) $r3
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: throw $r13
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r5 = $r2[1]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = $r2[0]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
<kawa.lib.std_syntax: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.std_syntax: java.lang.Object datum$To$SyntaxObject(java.lang.Object,java.lang.Object)>($r2, $r3)
<kawa.lib.std_syntax: java.lang.Object datum$To$SyntaxObject(java.lang.Object,java.lang.Object)>: $r0 = staticinvoke <kawa.lang.SyntaxForms: java.lang.Object makeWithTemplate(java.lang.Object,java.lang.Object)>($r0, $r1)
<kawa.lang.SyntaxForms: java.lang.Object makeWithTemplate(java.lang.Object,java.lang.Object)>: $r0 = interfaceinvoke $r2.<kawa.lang.SyntaxForm: java.lang.Object getDatum()>()
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getDatum()>: $r1 = r0.<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getDatum()>: return $r1
<kawa.lang.SyntaxForms: java.lang.Object makeWithTemplate(java.lang.Object,java.lang.Object)>: return $r2
<kawa.lib.std_syntax: java.lang.Object datum$To$SyntaxObject(java.lang.Object,java.lang.Object)>: return $r0
<kawa.lib.std_syntax: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
