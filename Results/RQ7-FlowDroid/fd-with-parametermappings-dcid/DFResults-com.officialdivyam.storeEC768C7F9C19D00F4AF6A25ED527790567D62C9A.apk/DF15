Source: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
$i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in <gnu.mapping.TtyInPort: int fill(int)>
Sink: interfaceinvoke $r0.<gnu.lists.Consumer: void write(int)>($i0) in <gnu.text.Char: void print(int,gnu.lists.Consumer)>

<gnu.mapping.TtyInPort: int fill(int)>: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
<gnu.mapping.TtyInPort: int fill(int)>: $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
<gnu.mapping.TtyInPort: int fill(int)>: r0 := @this: gnu.mapping.TtyInPort
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r2[0] = $r1
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: $r2 = virtualinvoke $r3.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>(r0, $r1)
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r5 = $r2[1]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r18, "div-and-mod", 2, $r3)
<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>: return
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3)
<gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>: $r2 = staticinvoke <gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>($r0)
<gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>: $r4 = staticinvoke <gnu.math.RatNum: gnu.math.RatNum asRatNumOrNull(java.lang.Object)>($r0)
<gnu.math.RatNum: gnu.math.RatNum asRatNumOrNull(java.lang.Object)>: $r3 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>($r0)
<gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>: $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>: return $r1
<gnu.math.RatNum: gnu.math.RatNum asRatNumOrNull(java.lang.Object)>: $r0 := @parameter0: java.lang.Object
<gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>: return $r4
<gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>: return $r2
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3)
<gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>: throw $r3
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: throw $r17
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r5 = $r2[1]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = $r2[0]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
<kawa.lib.lists: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: staticinvoke <kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>($r2, $r6)
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: $r2 = (gnu.text.Char) $r0
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: $i0 = staticinvoke <kawa.lib.characters: int char$To$Integer(gnu.text.Char)>($r2)
<kawa.lib.characters: int char$To$Integer(gnu.text.Char)>: $i0 = virtualinvoke $r0.<gnu.text.Char: int intValue()>()
<gnu.text.Char: int intValue()>: $i0 = r0.<gnu.text.Char: int value>
<gnu.text.Char: int intValue()>: return $i0
<kawa.lib.characters: int char$To$Integer(gnu.text.Char)>: return $i0
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: staticinvoke <gnu.text.Char: void print(int,gnu.lists.Consumer)>($i0, $r1)
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: $c2 = (char) $i0
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: $i0 = (int) $c2
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: interfaceinvoke $r0.<gnu.lists.Consumer: void write(int)>($i0)
