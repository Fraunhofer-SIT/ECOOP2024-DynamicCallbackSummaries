    public java.lang.Object applyN(java.lang.Object[]) throws java.lang.Throwable
    {
        gnu.kawa.reflect.Invoke r0;
        gnu.bytecode.ArrayType $r14;
        gnu.expr.Language $r22;
        byte $b4;
        boolean $z0, $z1;
        gnu.expr.TypeValue $r9;
        gnu.mapping.Procedure $r10;
        gnu.bytecode.ObjectType $r8;
        gnu.expr.Keyword $r15;
        java.lang.StringBuilder $r6, $r24;
        java.lang.Throwable r4;
        gnu.bytecode.Type $r12;
        java.lang.Object[] $r1, r3;
        gnu.bytecode.ClassType $r21;
        int i0, $i2, i3, $i5, $i6;
        java.lang.String $r7, $r16;
        java.lang.Number $r17;
        gnu.mapping.MethodProc $r19, $r23;
        char $c1;
        java.lang.RuntimeException $r5, $r25;
        gnu.expr.PairClassType r13;
        gnu.mapping.CallContext $r20;
        java.lang.Object r2, r18;
        java.lang.Class $r11;

        r0 := @this: gnu.kawa.reflect.Invoke;

        $r1 := @parameter0: java.lang.Object[];

        $c1 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        i0 = (int) $c1;

        if i0 != 80 goto label01;

        $r25 = new java.lang.RuntimeException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r0.<gnu.kawa.reflect.Invoke: java.lang.String getName()>();

        $r6 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": invoke-special not allowed at run time");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r25;

     label01:
        i0 = lengthof $r1;

        staticinvoke <gnu.mapping.Procedure: void checkArgCount(gnu.mapping.Procedure,int)>(r0, i0);

        r2 = $r1[0];

        $c1 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i2 = (int) $c1;

        if $i2 == 86 goto label03;

        $c1 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i2 = (int) $c1;

        if $i2 == 42 goto label03;

        $r8 = staticinvoke <gnu.kawa.reflect.Invoke: gnu.bytecode.ObjectType typeFrom(java.lang.Object,gnu.kawa.reflect.Invoke)>(r2, r0);

     label02:
        $c1 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i2 = (int) $c1;

        if $i2 != 78 goto label14;

        r2 = null;

        $z0 = $r8 instanceof gnu.expr.TypeValue;

        if $z0 == 0 goto label04;

        $r9 = (gnu.expr.TypeValue) $r8;

        $r10 = interfaceinvoke $r9.<gnu.expr.TypeValue: gnu.mapping.Procedure getConstructor()>();

        if $r10 == null goto label04;

        i0 = i0 + -1;

        r3 = newarray (java.lang.Object)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, r3, 0, i0);

        r2 = virtualinvoke $r10.<gnu.mapping.Procedure: java.lang.Object applyN(java.lang.Object[])>(r3);

        return r2;

     label03:
        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = staticinvoke <gnu.bytecode.Type: gnu.bytecode.Type make(java.lang.Class)>($r11);

        $r8 = (gnu.bytecode.ObjectType) $r12;

        goto label02;

     label04:
        $z0 = $r8 instanceof gnu.expr.PairClassType;

        if $z0 == 0 goto label05;

        r13 = (gnu.expr.PairClassType) $r8;

        $r8 = r13.<gnu.expr.PairClassType: gnu.bytecode.ClassType instanceType>;

     label05:
        $z0 = $r8 instanceof gnu.bytecode.ArrayType;

        if $z0 == 0 goto label15;

        $r14 = (gnu.bytecode.ArrayType) $r8;

        $r12 = virtualinvoke $r14.<gnu.bytecode.ArrayType: gnu.bytecode.Type getComponentType()>();

        i0 = lengthof $r1;

        i0 = i0 + -1;

        if i0 < 2 goto label12;

        r2 = $r1[1];

        $z0 = r2 instanceof gnu.expr.Keyword;

        if $z0 == 0 goto label12;

        r2 = $r1[1];

        $r15 = (gnu.expr.Keyword) r2;

        $r7 = virtualinvoke $r15.<gnu.expr.Keyword: java.lang.String getName()>();

        $r16 = "length";

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label06;

        $r16 = "size";

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label12;

     label06:
        r2 = $r1[2];

        $r17 = (java.lang.Number) r2;

        i3 = virtualinvoke $r17.<java.lang.Number: int intValue()>();

        $i2 = 3;

        $z0 = 1;

     label07:
        $r11 = virtualinvoke $r12.<gnu.bytecode.Type: java.lang.Class getReflectClass()>();

        r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r11, i3);

        i3 = 0;

     label08:
        if $i2 > i0 goto label33;

        r18 = $r1[$i2];

        if $z0 == 0 goto label11;

        $z1 = r18 instanceof gnu.expr.Keyword;

        if $z1 == 0 goto label11;

        if $i2 >= i0 goto label11;

        $r15 = (gnu.expr.Keyword) r18;

        $r7 = virtualinvoke $r15.<gnu.expr.Keyword: java.lang.String getName()>();

     label09:
        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

     label10:
        $i2 = $i2 + 1;

        r18 = $r1[$i2];

     label11:
        r18 = virtualinvoke $r12.<gnu.bytecode.Type: java.lang.Object coerceFromObject(java.lang.Object)>(r18);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(r2, i3, r18);

        i3 = i3 + 1;

        $i2 = $i2 + 1;

        goto label08;

     label12:
        i3 = i0;

        $i2 = 1;

        $z0 = 0;

        goto label07;

     label13:
        r4 := @caughtexception;

        $r25 = new java.lang.RuntimeException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("non-integer keyword \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in array constructor");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r25;

     label14:
        r2 = $r1[1];

     label15:
        $r19 = virtualinvoke r0.<gnu.kawa.reflect.Invoke: gnu.mapping.MethodProc lookupMethods(gnu.bytecode.ObjectType,java.lang.Object)>($r8, r2);

        $c1 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i2 = (int) $c1;

        if $i2 == 78 goto label21;

        $c1 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i2 = (int) $c1;

        if $i2 == 83 goto label16;

        $c1 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i2 = (int) $c1;

        if $i2 != 115 goto label20;

     label16:
        $b4 = 2;

     label17:
        $i2 = i0 - $b4;

        r3 = newarray (java.lang.Object)[$i2];

        $i2 = 0;

        $c1 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        i3 = (int) $c1;

        if i3 == 86 goto label18;

        $c1 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        i3 = (int) $c1;

        if i3 != 42 goto label19;

     label18:
        r2 = $r1[0];

        r3[0] = r2;

        $i2 = 1;

     label19:
        i0 = i0 + -2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 2, r3, $i2, i0);

        r2 = virtualinvoke $r19.<gnu.mapping.MethodProc: java.lang.Object applyN(java.lang.Object[])>(r3);

        return r2;

     label20:
        $b4 = 1;

        goto label17;

     label21:
        $r20 = staticinvoke <gnu.mapping.CallContext: gnu.mapping.CallContext getInstance()>();

        $i2 = 0;

     label22:
        i3 = lengthof $r1;

        if $i2 >= i3 goto label23;

        r2 = $r1[$i2];

        $z0 = r2 instanceof gnu.expr.Keyword;

        if $z0 != 0 goto label23;

        $i2 = $i2 + 1;

        goto label22;

     label23:
        i3 = -1;

        $i5 = lengthof $r1;

        if $i2 != $i5 goto label30;

        $i5 = virtualinvoke $r19.<gnu.mapping.MethodProc: int matchN(java.lang.Object[],gnu.mapping.CallContext)>($r1, $r20);

        i3 = $i5;

        if $i5 != 0 goto label24;

        r2 = virtualinvoke $r20.<gnu.mapping.CallContext: java.lang.Object runUntilValue()>();

        return r2;

     label24:
        $r21 = (gnu.bytecode.ClassType) $r8;

        $r22 = r0.<gnu.kawa.reflect.Invoke: gnu.expr.Language language>;

        $r23 = staticinvoke <gnu.kawa.reflect.ClassMethods: gnu.mapping.MethodProc apply(gnu.bytecode.ObjectType,java.lang.String,char,gnu.expr.Language)>($r21, "valueOf", 0, $r22);

        if $r23 == null goto label25;

        i3 = i0 + -1;

        r3 = newarray (java.lang.Object)[i3];

        i0 = i0 + -1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, r3, 0, i0);

        i0 = virtualinvoke $r23.<gnu.mapping.MethodProc: int matchN(java.lang.Object[],gnu.mapping.CallContext)>(r3, $r20);

        i3 = i0;

        if i0 != 0 goto label25;

        r2 = virtualinvoke $r20.<gnu.mapping.CallContext: java.lang.Object runUntilValue()>();

        return r2;

     label25:
        r2 = $r1[0];

        r2 = virtualinvoke $r19.<gnu.mapping.MethodProc: java.lang.Object apply1(java.lang.Object)>(r2);

     label26:
        i0 = $i2;

     label27:
        $i5 = i0 + 1;

        $i6 = lengthof $r1;

        if $i5 >= $i6 goto label28;

        r18 = $r1[i0];

        $z0 = r18 instanceof gnu.expr.Keyword;

        if $z0 != 0 goto label31;

     label28:
        $i5 = lengthof $r1;

        if $i2 != $i5 goto label29;

        i0 = 1;

     label29:
        $i2 = lengthof $r1;

        if i0 == $i2 goto label33;

        $r21 = (gnu.bytecode.ClassType) $r8;

        $r22 = r0.<gnu.kawa.reflect.Invoke: gnu.expr.Language language>;

        $r23 = staticinvoke <gnu.kawa.reflect.ClassMethods: gnu.mapping.MethodProc apply(gnu.bytecode.ObjectType,java.lang.String,char,gnu.expr.Language)>($r21, "add", 0, $r22);

        if $r23 != null goto label32;

        $r5 = staticinvoke <gnu.mapping.MethodProc: java.lang.RuntimeException matchFailAsException(int,gnu.mapping.Procedure,java.lang.Object[])>(i3, $r19, $r1);

        throw $r5;

     label30:
        r3 = newarray (java.lang.Object)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r3, 0, $i2);

        r2 = virtualinvoke $r19.<gnu.mapping.MethodProc: java.lang.Object applyN(java.lang.Object[])>(r3);

        goto label26;

     label31:
        $r15 = (gnu.expr.Keyword) r18;

        $i5 = i0 + 1;

        r18 = $r1[$i5];

        $r7 = virtualinvoke $r15.<gnu.expr.Keyword: java.lang.String getName()>();

        staticinvoke <gnu.kawa.reflect.SlotSet: void apply(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(0, r2, $r7, r18);

        i0 = i0 + 2;

        goto label27;

     label32:
        $i2 = lengthof $r1;

        if i0 >= $i2 goto label33;

        r18 = $r1[i0];

        virtualinvoke $r23.<gnu.mapping.MethodProc: java.lang.Object apply2(java.lang.Object,java.lang.Object)>(r2, r18);

        i0 = i0 + 1;

        goto label32;

     label33:
        return r2;

        catch java.lang.Throwable from label09 to label10 with label13;
    }
