    void readToken(int, char, gnu.kawa.lispexpr.ReadTable) throws java.io.IOException, gnu.text.SyntaxException
    {
        gnu.kawa.lispexpr.ReadTable $r1;
        gnu.kawa.lispexpr.LispReader r0;
        char $c1;
        int $i0, i2, $i3, i4, $i5;
        gnu.kawa.lispexpr.ReadTableEntry $r2, $r4;
        gnu.text.LineBufferedReader $r3;
        boolean z0, $z1;

        r0 := @this: gnu.kawa.lispexpr.LispReader;

        $i0 := @parameter0: int;

        $c1 := @parameter1: char;

        $r1 := @parameter2: gnu.kawa.lispexpr.ReadTable;

        i2 = $i0;

        z0 = 0;

        $i0 = 0;

     label01:
        if i2 >= 0 goto label02;

        if z0 == 0 goto label22;

        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void eofError(java.lang.String)>("unexpected EOF between escapes");

     label02:
        $r2 = virtualinvoke $r1.<gnu.kawa.lispexpr.ReadTable: gnu.kawa.lispexpr.ReadTableEntry lookup(int)>(i2);

        $i3 = virtualinvoke $r2.<gnu.kawa.lispexpr.ReadTableEntry: int getKind()>();

        i4 = $i3;

        if $i3 != 0 goto label06;

        if z0 == 0 goto label04;

        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(65535);

        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2);

     label03:
        i2 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>();

        goto label01;

     label04:
        if i2 != 125 goto label05;

        $i0 = $i0 + -1;

        if $i0 < 0 goto label05;

        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2);

        goto label03;

     label05:
        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void unread(int)>(i2);

        return;

     label06:
        $c1 = $r1.<gnu.kawa.lispexpr.ReadTable: char postfixLookupOperator>;

        $i3 = (int) $c1;

        if i2 != $i3 goto label08;

        if z0 != 0 goto label08;

        $r3 = r0.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader port>;

        $i3 = virtualinvoke $r3.<gnu.text.LineBufferedReader: int peek()>();

        $c1 = $r1.<gnu.kawa.lispexpr.ReadTable: char postfixLookupOperator>;

        $i5 = (int) $c1;

        if $i3 != $i5 goto label07;

        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void unread(int)>(i2);

        return;

     label07:
        $z1 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: boolean validPostfixLookupStart(int,gnu.kawa.lispexpr.ReadTable)>($i3, $r1);

        if $z1 == 0 goto label08;

        i4 = 5;

     label08:
        if i4 != 3 goto label12;

        i4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>();

        i2 = i4;

        if i4 >= 0 goto label09;

        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void eofError(java.lang.String)>("unexpected EOF after single escape");

     label09:
        $z1 = $r1.<gnu.kawa.lispexpr.ReadTable: boolean hexEscapeAfterBackslash>;

        if $z1 == 0 goto label11;

        if i4 == 120 goto label10;

        if i4 != 88 goto label11;

     label10:
        i2 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int readHexEscape()>();

     label11:
        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(65535);

        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2);

        r0.<gnu.kawa.lispexpr.LispReader: boolean seenEscapes> = 1;

        goto label03;

     label12:
        if i4 != 4 goto label15;

        if z0 != 0 goto label14;

        z0 = 1;

     label13:
        r0.<gnu.kawa.lispexpr.LispReader: boolean seenEscapes> = 1;

        goto label03;

     label14:
        z0 = 0;

        goto label13;

     label15:
        if z0 == 0 goto label16;

        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(65535);

        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2);

        goto label03;

     label16:
        lookupswitch(i4)
        {
            case 1: goto label17;
            case 2: goto label18;
            case 3: goto label03;
            case 4: goto label20;
            case 5: goto label21;
            case 6: goto label19;
            default: goto label03;
        };

     label17:
        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void unread(int)>(i2);

        return;

     label18:
        if i2 != 123 goto label19;

        $r4 = <gnu.kawa.lispexpr.ReadTableEntry: gnu.kawa.lispexpr.ReadTableEntry brace>;

        if $r2 != $r4 goto label19;

        $i0 = $i0 + 1;

     label19:
        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2);

        goto label03;

     label20:
        z0 = 1;

        r0.<gnu.kawa.lispexpr.LispReader: boolean seenEscapes> = 1;

        goto label03;

     label21:
        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void unread(int)>(i2);

     label22:
        return;
    }
