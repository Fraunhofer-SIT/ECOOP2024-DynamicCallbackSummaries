Source: i4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
i4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>() in <gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: i4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: i2 = i4
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = $r1
<gnu.text.Lexer: void tokenBufferAppend(int)>: $r1 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: return
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void error(java.lang.String)>("expected identifier in symbol after \'{URI}:\'")
<gnu.text.Lexer: void error(java.lang.String)>: return
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r7, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke $r1.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>(r0, $i0, -1)
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r8 = virtualinvoke r24.<gnu.kawa.util.GeneralHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r25, $r1)
<gnu.kawa.util.AbstractHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>: $r1 = $r2
<gnu.kawa.util.AbstractHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>: return $r1
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r8
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r8 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r7, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r6 = <gnu.mapping.Values: gnu.mapping.Values empty>
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r6
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: return $r9
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: $r4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>($r4, $r3, $i2, $i3)
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: r3 = <gnu.mapping.Values: gnu.mapping.Values empty>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: return r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<kawa.lib.strings: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.numbers: java.lang.Object div0AndMod0(gnu.math.RealNum,gnu.math.RealNum)>: $r3 = virtualinvoke $r5.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r0, $r3)
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.numbers: java.lang.Object div0AndMod0(gnu.math.RealNum,gnu.math.RealNum)>: $r3 = virtualinvoke $r6.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r4, $r1)
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r3)
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: $r2 = $r1[0]
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: r0 := @this: gnu.kawa.functions.ApplyToArgs
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r3[1] = $r2
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.numbers: java.lang.Object div0AndMod0(gnu.math.RealNum,gnu.math.RealNum)>: return $r3
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3)
<gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>: $r2 = staticinvoke <gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>($r0)
<gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>: $r1 = (gnu.math.RealNum) $r0
<gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>: $r0 := @parameter0: java.lang.Object
<gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>: throw $r3
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r5 = $r2[1]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: r0 := @this: gnu.expr.ModuleBody
<kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: r0 := @this: kawa.lib.misc
<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r4[1] = $r3
<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: r0 := @this: gnu.expr.ModuleBody
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r5 = $r2[1]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r4[1] = $r3
<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: r0 := @this: gnu.expr.ModuleMethod
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r3 = virtualinvoke $r4.<gnu.lists.Pair: java.lang.Object getCar()>()
<gnu.lists.Pair: java.lang.Object getCar()>: $r1 = r0.<gnu.lists.Pair: java.lang.Object car>
<gnu.lists.Pair: java.lang.Object getCar()>: r0 := @this: gnu.lists.Pair
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r4 = (gnu.lists.Pair) $r1
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r0 = $r1
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: return $r0
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object)>: return $r0
<kawa.lib.lists: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
