    public double doubleValue()
    {
        int[] $r1;
        int $i0;
        gnu.math.IntNum r0;
        long $l1;
        double $d0;
        boolean $z0;

        r0 := @this: gnu.math.IntNum;

        $r1 = r0.<gnu.math.IntNum: int[] words>;

        if $r1 != null goto label1;

        $i0 = r0.<gnu.math.IntNum: int ival>;

        $d0 = (double) $i0;

        return $d0;

     label1:
        $i0 = r0.<gnu.math.IntNum: int ival>;

        if $i0 > 2 goto label2;

        $l1 = virtualinvoke r0.<gnu.math.IntNum: long longValue()>();

        $d0 = (double) $l1;

        return $d0;

     label2:
        $z0 = virtualinvoke r0.<gnu.math.IntNum: boolean isNegative()>();

        if $z0 == 0 goto label3;

        r0 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum 'neg'(gnu.math.IntNum)>(r0);

        $d0 = virtualinvoke r0.<gnu.math.IntNum: double roundToDouble(int,boolean,boolean)>(0, 1, 0);

        return $d0;

     label3:
        $d0 = virtualinvoke r0.<gnu.math.IntNum: double roundToDouble(int,boolean,boolean)>(0, 0, 0);

        return $d0;
    }
