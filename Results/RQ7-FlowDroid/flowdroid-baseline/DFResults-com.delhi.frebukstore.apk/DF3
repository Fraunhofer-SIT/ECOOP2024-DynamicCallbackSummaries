Source: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
$i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in <gnu.text.LineBufferedReader: int fill(int)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.LineBufferedReader: int fill(int)>: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
<gnu.text.LineBufferedReader: int fill(int)>: $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int fill(int)>: r0 := @this: gnu.text.LineBufferedReader
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>($r2, $i0)
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r4 = staticinvoke <kawa.lib.numbers: java.lang.Number inexact$To$Exact(java.lang.Number)>($r4)
<kawa.lib.numbers: java.lang.Number inexact$To$Exact(java.lang.Number)>: $r0 = staticinvoke <gnu.kawa.functions.Arithmetic: java.lang.Number toExact(java.lang.Number)>($r0)
<gnu.kawa.functions.Arithmetic: java.lang.Number toExact(java.lang.Number)>: $r1 = virtualinvoke $r1.<gnu.math.Numeric: gnu.math.Numeric toExact()>()
<gnu.math.Complex: gnu.math.Complex toExact()>: $r2 = virtualinvoke r0.<gnu.math.Complex: gnu.math.RealNum im()>()
<gnu.math.RealNum: gnu.math.RealNum im()>: r0 := @this: gnu.math.RealNum
<gnu.math.Complex: gnu.math.Complex toExact()>: $r1 = virtualinvoke r0.<gnu.math.Complex: gnu.math.RealNum re()>()
<gnu.math.RealNum: gnu.math.RealNum re()>: return r0
<gnu.math.Complex: gnu.math.Complex toExact()>: $r3 = virtualinvoke $r1.<gnu.math.RealNum: gnu.math.RatNum toExact()>()
<gnu.math.RealNum: gnu.math.RatNum toExact()>: return $r1
<gnu.math.Complex: gnu.math.Complex toExact()>: $r1 = virtualinvoke r0.<gnu.math.Complex: gnu.math.RealNum re()>()
<gnu.math.CComplex: gnu.math.RealNum re()>: $r1 = r0.<gnu.math.CComplex: gnu.math.RealNum real>
<gnu.math.CComplex: gnu.math.RealNum re()>: return $r1
<gnu.math.Complex: gnu.math.Complex toExact()>: return r0
<gnu.kawa.functions.Arithmetic: java.lang.Number toExact(java.lang.Number)>: return $r1
<kawa.lib.numbers: java.lang.Number inexact$To$Exact(java.lang.Number)>: return $r0
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
