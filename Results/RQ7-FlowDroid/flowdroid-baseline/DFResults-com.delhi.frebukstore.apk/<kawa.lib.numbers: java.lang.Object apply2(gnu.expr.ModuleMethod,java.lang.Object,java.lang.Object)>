    public java.lang.Object apply2(gnu.expr.ModuleMethod, java.lang.Object, java.lang.Object)
    {
        gnu.expr.ModuleMethod $r1;
        gnu.math.Quantity $r15;
        gnu.math.IntNum $r10, $r12;
        boolean $z0;
        java.lang.CharSequence $r14;
        gnu.mapping.WrongType $r17;
        gnu.math.Complex $r8;
        gnu.math.DComplex $r9;
        java.lang.Double $r7;
        java.lang.ClassCastException $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36;
        gnu.math.RealNum $r4, $r5;
        int $i0;
        kawa.lib.numbers r0;
        java.lang.Boolean $r11;
        java.lang.Number $r6, $r13;
        double $d0, $d1;
        java.lang.Object $r2, $r3;

        r0 := @this: kawa.lib.numbers;

        $r1 := @parameter0: gnu.expr.ModuleMethod;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $i0 = $r1.<gnu.expr.ModuleMethod: int selector>;

        lookupswitch($i0)
        {
            case 15: goto label02;
            case 16: goto label05;
            case 25: goto label08;
            case 33: goto label11;
            case 37: goto label14;
            case 38: goto label17;
            case 48: goto label20;
            case 53: goto label25;
            case 60: goto label30;
            case 62: goto label33;
            case 66: goto label36;
            default: goto label01;
        };

     label01:
        $r2 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r2, $r3);

        return $r2;

     label02:
        $r4 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label03:
        $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3);

     label04:
        $r2 = staticinvoke <kawa.lib.numbers: java.lang.Object divAndMod(gnu.math.RealNum,gnu.math.RealNum)>($r4, $r5);

        return $r2;

     label05:
        $r4 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label06:
        $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3);

     label07:
        $r2 = staticinvoke <kawa.lib.numbers: java.lang.Object div0AndMod0(gnu.math.RealNum,gnu.math.RealNum)>($r4, $r5);

        return $r2;

     label08:
        $r4 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label09:
        $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3);

     label10:
        $r4 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum rationalize(gnu.math.RealNum,gnu.math.RealNum)>($r4, $r5);

        return $r4;

     label11:
        $r6 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r6.<java.lang.Number: double doubleValue()>();

     label12:
        $r6 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r6.<java.lang.Number: double doubleValue()>();

     label13:
        $d0 = staticinvoke <kawa.lib.numbers: double lambda1(double,double)>($d0, $d1);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r7;

     label14:
        $r4 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label15:
        $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3);

     label16:
        $r8 = staticinvoke <kawa.lib.numbers: gnu.math.Complex makeRectangular(gnu.math.RealNum,gnu.math.RealNum)>($r4, $r5);

        return $r8;

     label17:
        $r6 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r6.<java.lang.Number: double doubleValue()>();

     label18:
        $r6 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r6.<java.lang.Number: double doubleValue()>();

     label19:
        $r9 = staticinvoke <kawa.lib.numbers: gnu.math.DComplex makePolar(double,double)>($d0, $d1);

        return $r9;

     label20:
        $r10 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label21:
        $r6 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

     label22:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isBitwiseBitSet(gnu.math.IntNum,int)>($r10, $i0);

        if $z0 == 0 goto label24;

        $r11 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label23:
        return $r11;

     label24:
        $r11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label23;

     label25:
        $r10 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label26:
        $r12 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r3);

     label27:
        $z0 = staticinvoke <kawa.lib.numbers: boolean logtest(gnu.math.IntNum,gnu.math.IntNum)>($r10, $r12);

        if $z0 == 0 goto label29;

        $r11 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label28:
        return $r11;

     label29:
        $r11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label28;

     label30:
        $r6 = (java.lang.Number) $r2;

     label31:
        $r13 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r13.<java.lang.Number: int intValue()>();

     label32:
        $r14 = staticinvoke <kawa.lib.numbers: java.lang.CharSequence number$To$String(java.lang.Number,int)>($r6, $i0);

        return $r14;

     label33:
        $r14 = (java.lang.CharSequence) $r2;

     label34:
        $r6 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

     label35:
        $r2 = staticinvoke <kawa.lib.numbers: java.lang.Object string$To$Number(java.lang.CharSequence,int)>($r14, $i0);

        return $r2;

     label36:
        $r15 = staticinvoke <kawa.lib.numbers: gnu.math.Quantity makeQuantity(java.lang.Object,java.lang.Object)>($r2, $r3);

        return $r15;

     label37:
        $r16 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r16, "div-and-mod", 1, $r2);

        throw $r17;

     label38:
        $r18 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r18, "div-and-mod", 2, $r3);

        throw $r17;

     label39:
        $r19 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r19, "div0-and-mod0", 1, $r2);

        throw $r17;

     label40:
        $r20 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r20, "div0-and-mod0", 2, $r3);

        throw $r17;

     label41:
        $r21 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r21, "rationalize", 1, $r2);

        throw $r17;

     label42:
        $r22 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r22, "rationalize", 2, $r3);

        throw $r17;

     label43:
        $r23 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r23, "lambda", 1, $r2);

        throw $r17;

     label44:
        $r24 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r24, "lambda", 2, $r3);

        throw $r17;

     label45:
        $r25 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r25, "make-rectangular", 1, $r2);

        throw $r17;

     label46:
        $r26 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r26, "make-rectangular", 2, $r3);

        throw $r17;

     label47:
        $r27 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r27, "make-polar", 1, $r2);

        throw $r17;

     label48:
        $r28 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r28, "make-polar", 2, $r3);

        throw $r17;

     label49:
        $r29 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r29, "bitwise-bit-set?", 1, $r2);

        throw $r17;

     label50:
        $r30 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r30, "bitwise-bit-set?", 2, $r3);

        throw $r17;

     label51:
        $r31 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r31, "logtest", 1, $r2);

        throw $r17;

     label52:
        $r32 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r32, "logtest", 2, $r3);

        throw $r17;

     label53:
        $r33 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r33, "number->string", 1, $r2);

        throw $r17;

     label54:
        $r34 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r34, "number->string", 2, $r3);

        throw $r17;

     label55:
        $r35 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r35, "string->number", 1, $r2);

        throw $r17;

     label56:
        $r36 := @caughtexception;

        $r17 = new gnu.mapping.WrongType;

        specialinvoke $r17.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r36, "string->number", 2, $r3);

        throw $r17;

        catch java.lang.ClassCastException from label02 to label03 with label37;
        catch java.lang.ClassCastException from label03 to label04 with label38;
        catch java.lang.ClassCastException from label05 to label06 with label39;
        catch java.lang.ClassCastException from label06 to label07 with label40;
        catch java.lang.ClassCastException from label08 to label09 with label41;
        catch java.lang.ClassCastException from label09 to label10 with label42;
        catch java.lang.ClassCastException from label11 to label12 with label43;
        catch java.lang.ClassCastException from label12 to label13 with label44;
        catch java.lang.ClassCastException from label14 to label15 with label45;
        catch java.lang.ClassCastException from label15 to label16 with label46;
        catch java.lang.ClassCastException from label17 to label18 with label47;
        catch java.lang.ClassCastException from label18 to label19 with label48;
        catch java.lang.ClassCastException from label20 to label21 with label49;
        catch java.lang.ClassCastException from label21 to label22 with label50;
        catch java.lang.ClassCastException from label25 to label26 with label51;
        catch java.lang.ClassCastException from label26 to label27 with label52;
        catch java.lang.ClassCastException from label30 to label31 with label53;
        catch java.lang.ClassCastException from label31 to label32 with label54;
        catch java.lang.ClassCastException from label33 to label34 with label55;
        catch java.lang.ClassCastException from label34 to label35 with label56;
    }
