Source: $i1 = virtualinvoke $r2.<java.io.InputStream: int read()>()
$i1 = virtualinvoke $r2.<java.io.InputStream: int read()>() in <p.b.a.x1: int read(byte[],int,int)>
Sink: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0) in <p.b.i.n.a: void a(java.io.InputStream,java.io.OutputStream)>

<p.b.a.x1: int read(byte[],int,int)>: $i1 = virtualinvoke $r2.<java.io.InputStream: int read()>()
<p.b.a.x1: int read(byte[],int,int)>: r0.<p.b.a.x1: int d> = $i1
<p.b.a.x1: int read(byte[],int,int)>: return $i1
<p.b.i.n.a: int a(java.io.InputStream,byte[],int,int)>: return $i3
<p.b.i.n.a: int a(java.io.InputStream,byte[])>: $r1 := @parameter0: java.io.InputStream
<p.b.a.v1: byte[] b()>: $r2 = r0.<p.b.a.a2: java.io.InputStream a>
<p.b.a.v1: byte[] b()>: r0 := @this: p.b.a.v1
<p.b.a.y: p.b.a.f a()>: specialinvoke $r14.<p.b.a.v1: void <init>(java.io.InputStream,int)>($r1, $i2)
<p.b.a.v1: void <init>(java.io.InputStream,int)>: specialinvoke r0.<p.b.a.a2: void <init>(java.io.InputStream,int)>($r1, $i0)
<p.b.a.a2: void <init>(java.io.InputStream,int)>: r0.<p.b.a.a2: java.io.InputStream a> = $r1
<p.b.a.a2: void <init>(java.io.InputStream,int)>: return
<p.b.a.v1: void <init>(java.io.InputStream,int)>: r0 := @this: p.b.a.v1
<p.b.a.y: p.b.a.f a()>: $r1 = r0.<p.b.a.y: java.io.InputStream a>
<p.b.a.y: p.b.a.f a()>: throw $r13
<p.b.a.p0: int read(byte[],int,int)>: $r3 = r0.<p.b.a.p0: p.b.a.y a>
<p.b.a.p0: int read(byte[],int,int)>: return $i4
<p.b.a.p0: int read(byte[],int,int)>: $r2 = r0.<p.b.a.p0: java.io.InputStream c>
<p.b.a.p0: int read(byte[],int,int)>: r0 := @this: p.b.a.p0
<p.b.a.p0: int read(byte[],int,int)>: $r2 = r0.<p.b.a.p0: java.io.InputStream c>
<p.b.a.p0: int read(byte[],int,int)>: r0 := @this: p.b.a.p0
<p.b.i.n.a: void a(java.io.InputStream,java.io.OutputStream)>: $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0)
<p.b.i.n.a: void a(java.io.InputStream,java.io.OutputStream)>: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0)
