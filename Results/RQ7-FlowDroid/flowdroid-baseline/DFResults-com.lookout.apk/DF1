Source: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i2)
$i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i2) in <p.b.a.x1: int read(byte[],int,int)>
Sink: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0) in <p.b.i.n.a: void a(java.io.InputStream,java.io.OutputStream)>

<p.b.a.x1: int read(byte[],int,int)>: $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i2)
<p.b.a.x1: int read(byte[],int,int)>: throw $r3
<p.b.a.v1: int read(byte[],int,int)>: throw $r5
<p.b.a.p0: int read(byte[],int,int)>: return $i4
<p.b.i.n.a: void a(java.io.InputStream,java.io.OutputStream)>: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0)
