    public java.lang.Object read(gnu.text.Lexer, int, int) throws java.io.IOException, gnu.text.SyntaxException
    {
        java.lang.Throwable $r9;
        gnu.kawa.lispexpr.ReadTable $r3;
        gnu.kawa.lispexpr.ReaderTypespec r0;
        int $i0, $i1, i3, $i5;
        gnu.text.LineBufferedReader $r2;
        gnu.kawa.lispexpr.ReadTableEntry $r7;
        java.lang.String $r8, $r10;
        boolean $z0, $z1;
        gnu.mapping.InPort $r4;
        char c2, $c4;
        gnu.kawa.lispexpr.LispReader $r6;
        char[] $r5;
        gnu.text.Lexer $r1;

        r0 := @this: gnu.kawa.lispexpr.ReaderTypespec;

        $r1 := @parameter0: gnu.text.Lexer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i1 = $r1.<gnu.text.Lexer: int tokenBufferLength>;

        $r2 = virtualinvoke $r1.<gnu.text.Lexer: gnu.text.LineBufferedReader getPort()>();

        $r3 = staticinvoke <gnu.kawa.lispexpr.ReadTable: gnu.kawa.lispexpr.ReadTable getCurrent()>();

        c2 = 0;

        virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>($i0);

        i3 = $i0;

        $z0 = $r2 instanceof gnu.mapping.InPort;

        if $z0 == 0 goto label01;

        $r4 = (gnu.mapping.InPort) $r2;

        c2 = $r4.<gnu.mapping.InPort: char readState>;

        $r4 = (gnu.mapping.InPort) $r2;

        $c4 = (char) $i0;

        $r4.<gnu.mapping.InPort: char readState> = $c4;

     label01:
        $z0 = 0;

     label02:
        $i0 = $r2.<gnu.text.LineBufferedReader: int pos>;

        $i5 = $r2.<gnu.text.LineBufferedReader: int limit>;

     label03:
        if $i0 >= $i5 goto label13;

        if i3 == 10 goto label13;

     label04:
        $r5 = $r2.<gnu.text.LineBufferedReader: char[] buffer>;

        $i0 = $r2.<gnu.text.LineBufferedReader: int pos>;

     label05:
        i3 = $i0 + 1;

     label06:
        $r2.<gnu.text.LineBufferedReader: int pos> = i3;

        $c4 = $r5[$i0];

     label07:
        i3 = (int) $c4;

     label08:
        if i3 != 92 goto label17;

     label09:
        $z1 = $r1 instanceof gnu.kawa.lispexpr.LispReader;

     label10:
        if $z1 == 0 goto label15;

     label11:
        $r6 = (gnu.kawa.lispexpr.LispReader) $r1;

        $i0 = virtualinvoke $r6.<gnu.kawa.lispexpr.LispReader: int readEscape()>();

     label12:
        i3 = $i0;

        goto label02;

     label13:
        $i0 = virtualinvoke $r2.<gnu.text.LineBufferedReader: int read()>();

     label14:
        i3 = $i0;

        goto label08;

     label15:
        $i0 = virtualinvoke $r2.<gnu.text.LineBufferedReader: int read()>();

     label16:
        i3 = $i0;

        goto label02;

     label17:
        if $z0 != 0 goto label18;

        if i3 != 91 goto label18;

        $z0 = 1;

        goto label21;

     label18:
        if $z0 == 0 goto label19;

        if i3 != 93 goto label19;

        $z0 = 0;

        goto label21;

     label19:
        $r7 = virtualinvoke $r3.<gnu.kawa.lispexpr.ReadTable: gnu.kawa.lispexpr.ReadTableEntry lookup(int)>(i3);

        $i0 = virtualinvoke $r7.<gnu.kawa.lispexpr.ReadTableEntry: int getKind()>();

     label20:
        if $i0 != 2 goto label23;

     label21:
        virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>(i3);

     label22:
        goto label02;

     label23:
        virtualinvoke $r1.<gnu.text.Lexer: void unread(int)>(i3);

        $r10 = new java.lang.String;

     label24:
        $r5 = $r1.<gnu.text.Lexer: char[] tokenBuffer>;

        $i0 = $r1.<gnu.text.Lexer: int tokenBufferLength>;

     label25:
        $i0 = $i0 - $i1;

     label26:
        specialinvoke $r10.<java.lang.String: void <init>(char[],int,int)>($r5, $i1, $i0);

        $r8 = virtualinvoke $r10.<java.lang.String: java.lang.String intern()>();

     label27:
        $r1.<gnu.text.Lexer: int tokenBufferLength> = $i1;

        $z0 = $r2 instanceof gnu.mapping.InPort;

        if $z0 == 0 goto label28;

        $r4 = (gnu.mapping.InPort) $r2;

        $r4.<gnu.mapping.InPort: char readState> = c2;

     label28:
        return $r8;

     label29:
        $r9 := @caughtexception;

        $r1.<gnu.text.Lexer: int tokenBufferLength> = $i1;

        $z0 = $r2 instanceof gnu.mapping.InPort;

        if $z0 == 0 goto label30;

        $r4 = (gnu.mapping.InPort) $r2;

        $r4.<gnu.mapping.InPort: char readState> = c2;

     label30:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label29;
        catch java.lang.Throwable from label04 to label05 with label29;
        catch java.lang.Throwable from label06 to label07 with label29;
        catch java.lang.Throwable from label09 to label10 with label29;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Throwable from label15 to label16 with label29;
        catch java.lang.Throwable from label19 to label20 with label29;
        catch java.lang.Throwable from label21 to label22 with label29;
        catch java.lang.Throwable from label23 to label24 with label29;
        catch java.lang.Throwable from label24 to label25 with label29;
        catch java.lang.Throwable from label26 to label27 with label29;
    }
