Source: $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
$i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>() in <gnu.text.Lexer: int read()>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.Lexer: int read()>: $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
<gnu.text.Lexer: int read()>: return $i0
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $i0 = $i2
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $r5 = virtualinvoke $r6.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>($r1, $i0, $i1)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>($i0)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r5 = $r1.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: specialinvoke $r10.<java.lang.String: void <init>(char[],int,int)>($r5, $i1, $i0)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r8 = virtualinvoke $r10.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r8
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r5
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: $r2 = virtualinvoke $r4.<gnu.mapping.Procedure: java.lang.Object applyN(java.lang.Object[])>($r3)
<gnu.mapping.Procedure2: java.lang.Object applyN(java.lang.Object[])>: $r2 = $r1[0]
<gnu.mapping.Procedure2: java.lang.Object applyN(java.lang.Object[])>: $r4 = $r1[1]
<gnu.mapping.Procedure2: java.lang.Object applyN(java.lang.Object[])>: $r2 = virtualinvoke r0.<gnu.mapping.Procedure2: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r2, $r4)
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke $r4.<gnu.bytecode.Type: java.lang.Object coerceFromObject(java.lang.Object)>($r2)
<gnu.kawa.lispexpr.LangObjType: java.lang.Object coerceFromObject(java.lang.Object)>: $r8 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.Numeric coerceNumeric(java.lang.Object)>($r1)
<gnu.kawa.lispexpr.LangObjType: gnu.math.Numeric coerceNumeric(java.lang.Object)>: throw $r3
<gnu.kawa.lispexpr.LangObjType: java.lang.Object coerceFromObject(java.lang.Object)>: $r3 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath makeFilePath(java.lang.Object)>($r1)
<gnu.text.FilePath: gnu.text.FilePath makeFilePath(java.lang.Object)>: $r1 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath coerceToFilePathOrNull(java.lang.Object)>($r0)
<gnu.text.FilePath: gnu.text.FilePath coerceToFilePathOrNull(java.lang.Object)>: $r5 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<gnu.text.FilePath: gnu.text.FilePath coerceToFilePathOrNull(java.lang.Object)>: $r1 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.lang.String)>($r5)
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.lang.String)>: specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r0)
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.lang.String)>: specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File,java.lang.String)>($r2, $r0)
<gnu.text.FilePath: void <init>(java.io.File,java.lang.String)>: r0.<gnu.text.FilePath: java.io.File file> = $r1
<gnu.text.FilePath: void <init>(java.io.File,java.lang.String)>: return
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.lang.String)>: return $r1
<gnu.text.FilePath: gnu.text.FilePath coerceToFilePathOrNull(java.lang.Object)>: return $r1
<gnu.text.FilePath: gnu.text.FilePath makeFilePath(java.lang.Object)>: return $r1
<gnu.kawa.lispexpr.LangObjType: java.lang.Object coerceFromObject(java.lang.Object)>: return $r3
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<gnu.mapping.Procedure2: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
<io.kodular.themestarlauncher.galaxyj4corej4plus.men$frame: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: virtualinvoke $r3.<io.kodular.themestarlauncher.galaxyj4corej4plus.men: void addToFormDoAfterCreation(java.lang.Object)>($r2)
<io.kodular.themestarlauncher.galaxyj4corej4plus.men: void addToFormDoAfterCreation(java.lang.Object)>: $r2 = staticinvoke <kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>($r1, $r3)
<kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>: specialinvoke $r2.<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1)
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: r0.<gnu.lists.Pair: java.lang.Object car> = $r1
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: return
<kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>: return $r2
<io.kodular.themestarlauncher.galaxyj4corej4plus.men: void addToFormDoAfterCreation(java.lang.Object)>: r0.<io.kodular.themestarlauncher.galaxyj4corej4plus.men: gnu.lists.LList form$Mndo$Mnafter$Mncreation> = $r2
<io.kodular.themestarlauncher.galaxyj4corej4plus.men: void addToFormDoAfterCreation(java.lang.Object)>: return
<io.kodular.themestarlauncher.galaxyj4corej4plus.men$frame: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r3 = r0.<io.kodular.themestarlauncher.galaxyj4corej4plus.men$frame: io.kodular.themestarlauncher.galaxyj4corej4plus.men $main>
<io.kodular.themestarlauncher.galaxyj4corej4plus.men$frame: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r5
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r2 = r0.<gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r2 = r0.<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
