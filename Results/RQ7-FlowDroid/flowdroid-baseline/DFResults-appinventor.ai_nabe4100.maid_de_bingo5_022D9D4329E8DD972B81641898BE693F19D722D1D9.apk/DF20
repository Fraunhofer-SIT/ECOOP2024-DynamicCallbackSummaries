Source: $i0 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
$i0 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>() in <gnu.kawa.lispexpr.LispReader: int readEscape()>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.kawa.lispexpr.LispReader: int readEscape()>: $i0 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
<gnu.kawa.lispexpr.LispReader: int readEscape()>: $i0 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int readEscape(int)>($i0)
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: return $i1
<gnu.kawa.lispexpr.LispReader: int readEscape()>: return $i0
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: virtualinvoke $r0.<gnu.text.Lexer: void tokenBufferAppend(int)>(i3)
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) $i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r1[i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r1 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r4 = $r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>($r4, $i1, $i0)
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r3 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: return $r3
<gnu.kawa.lispexpr.ReaderString: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r2
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.ReaderParens: java.lang.Object readList(gnu.kawa.lispexpr.LispReader,int,int,int)>: $r3 = $r10
<gnu.kawa.lispexpr.ReaderParens: java.lang.Object readList(gnu.kawa.lispexpr.LispReader,int,int,int)>: return $r3
<gnu.kawa.lispexpr.ReaderParens: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<kawa.lang.SyntaxRules: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>(r2, r4)
<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>: $r1 = virtualinvoke r4.<kawa.lang.SyntaxRule: java.lang.Object execute(java.lang.Object[],kawa.lang.Translator,kawa.lang.TemplateScope)>(r5, $r2, $r12)
<kawa.lang.SyntaxTemplate: java.lang.Object execute(java.lang.Object[],kawa.lang.Translator,kawa.lang.TemplateScope)>: $r5 = virtualinvoke r0.<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>(0, $r1, 0, $r4, $r2, $r3)
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: $r7 = virtualinvoke r0.<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>(i1, $r1, $i0, $r2, $r3, $r4)
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: $r7 = virtualinvoke r0.<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>(i1, $r1, $i0, $r2, $r3, $r4)
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: r9 = virtualinvoke r0.<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>(i1, $r1, $i0, $r2, $r3, $r4)
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: r9 = virtualinvoke r8.<gnu.lists.Pair: java.lang.Object getCar()>()
<gnu.lists.Pair: java.lang.Object getCar()>: r1 = r0.<gnu.lists.Pair: java.lang.Object car>
<gnu.lists.Pair: java.lang.Object getCar()>: r0 := @this: gnu.lists.Pair
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: r8 = (gnu.lists.Pair) $r7
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: r9 = $r7
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: return r9
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: virtualinvoke r8.<gnu.lists.Pair: void setCdrBackdoor(java.lang.Object)>(r9)
<gnu.lists.Pair: void setCdrBackdoor(java.lang.Object)>: return
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: r9 = virtualinvoke r0.<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>(i1, $r1, $i0, $r2, $r3, $r4)
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: return r9
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: return r9
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: $r7 = staticinvoke <kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>($r7, $r4)
<kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>: specialinvoke $r5.<kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>(r1, $r0)
<kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>: r0.<kawa.lang.SyntaxForms$SimpleSyntaxForm: java.lang.Object datum> = $r1
<kawa.lang.SyntaxForms$SimpleSyntaxForm: void <init>(java.lang.Object,kawa.lang.TemplateScope)>: return
<kawa.lang.SyntaxForms: java.lang.Object makeForm(java.lang.Object,kawa.lang.TemplateScope)>: return $r5
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: return $r7
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: return $r7
<kawa.lang.SyntaxTemplate: java.lang.Object execute(java.lang.Object[],kawa.lang.Translator,kawa.lang.TemplateScope)>: return $r5
<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>: return $r1
<kawa.lang.SyntaxRules: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
