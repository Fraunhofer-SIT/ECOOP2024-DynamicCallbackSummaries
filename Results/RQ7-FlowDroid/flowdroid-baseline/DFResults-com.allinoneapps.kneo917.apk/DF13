Source: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
Sink: interfaceinvoke $r1.<gnu.lists.Consumer: void write(int)>($i0) in <gnu.lists.FString: boolean consumeNext(int,gnu.lists.Consumer)>

<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, r2)
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r4 = $r7
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>($r4)
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
<gnu.text.FilePath: void <init>(java.io.File)>: $r2 = virtualinvoke $r1.<java.io.File: java.lang.String toString()>()
<gnu.text.FilePath: void <init>(java.io.File)>: r0.<gnu.text.FilePath: java.lang.String path> = $r2
<gnu.text.FilePath: void <init>(java.io.File)>: return
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: return $r1
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: return r0
<gnu.text.Path: gnu.text.Path resolve(gnu.text.Path)>: return r0
<gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>: r1 = $r6
<gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>: return r1
<gnu.kawa.xml.KNode: gnu.text.Path baseURI()>: return $r1
<kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>: $r0 = $r1
<kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>: return $r0
<kawa.lib.misc: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<kawa.lib.strings: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: return $r4
<com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.expr.ModuleMethod: void apply(gnu.mapping.CallContext)>: virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r5)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
<gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>: interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
<gnu.xml.XMLFilter: void writeObject(java.lang.Object)>: $r2 = (gnu.lists.SeqPosition) $r1
<gnu.xml.XMLFilter: void writeObject(java.lang.Object)>: $r3 = $r2.<gnu.lists.SeqPosition: gnu.lists.AbstractSequence sequence>
<gnu.xml.XMLFilter: void writeObject(java.lang.Object)>: virtualinvoke r0.<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>($r3, $i0)
<gnu.xml.XMLFilter: void writePosition(gnu.lists.AbstractSequence,int)>: virtualinvoke $r1.<gnu.lists.AbstractSequence: boolean consumeNext(int,gnu.lists.Consumer)>($i0, r0)
<gnu.lists.FString: boolean consumeNext(int,gnu.lists.Consumer)>: $r2 = r0.<gnu.lists.FString: char[] data>
<gnu.lists.FString: boolean consumeNext(int,gnu.lists.Consumer)>: $c2 = $r2[$i0]
<gnu.lists.FString: boolean consumeNext(int,gnu.lists.Consumer)>: $i0 = (int) $c2
<gnu.lists.FString: boolean consumeNext(int,gnu.lists.Consumer)>: interfaceinvoke $r1.<gnu.lists.Consumer: void write(int)>($i0)
