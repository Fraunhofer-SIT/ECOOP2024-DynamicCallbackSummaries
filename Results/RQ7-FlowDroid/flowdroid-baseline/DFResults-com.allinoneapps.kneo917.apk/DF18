Source: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
Sink: interfaceinvoke $r0.<gnu.lists.Consumer: void write(int)>($i0) in <gnu.text.Char: void print(int,gnu.lists.Consumer)>

<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, r2)
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r4 = $r7
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>($r4)
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
<gnu.text.FilePath: void <init>(java.io.File)>: $r2 = virtualinvoke $r1.<java.io.File: java.lang.String toString()>()
<gnu.text.FilePath: void <init>(java.io.File)>: r0.<gnu.text.FilePath: java.lang.String path> = $r2
<gnu.text.FilePath: void <init>(java.io.File)>: return
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: return $r1
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: return r0
<gnu.text.Path: gnu.text.Path resolve(gnu.text.Path)>: return r0
<gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>: r1 = $r6
<gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>: return r1
<gnu.kawa.xml.KNode: gnu.text.Path baseURI()>: return $r1
<kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>: $r0 = $r1
<kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>: return $r0
<kawa.lib.misc: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<kawa.lib.strings: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: return $r4
<com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.expr.ModuleMethod: void apply(gnu.mapping.CallContext)>: virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r5)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: return
<gnu.expr.ModuleMethod: void apply(gnu.mapping.CallContext)>: $r5 = virtualinvoke r0.<gnu.expr.ModuleMethod: java.lang.Object apply3(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r6, $r7)
<gnu.expr.ModuleMethod: java.lang.Object apply3(java.lang.Object,java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke $r4.<gnu.expr.ModuleBody: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>(r0, $r1, $r2, $r3)
<kawa.lib.lists: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.lists: java.lang.Object assoc(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>($r2, $r3, $r5)
<kawa.lib.lists: java.lang.Object assoc(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r6 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r6, $r0)
<gnu.kawa.reflect.SlotGet: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: r7 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>()
<gnu.kawa.reflect.SlotGet: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.lists: java.lang.Object assoc(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r6 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r6, $r0)
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke $r4.<gnu.bytecode.Type: java.lang.Object coerceFromObject(java.lang.Object)>($r2)
<gnu.bytecode.ObjectType: java.lang.Object coerceFromObject(java.lang.Object)>: return $r1
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.lists: java.lang.Object assoc(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r6 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r6, $r0)
<gnu.expr.ModuleMethod: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke $r3.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>(r0, $r1, $r2)
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: staticinvoke <kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>($r2, $r6)
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: $r2 = (gnu.text.Char) $r0
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: $i0 = staticinvoke <kawa.lib.characters: int char$To$Integer(gnu.text.Char)>($r2)
<kawa.lib.characters: int char$To$Integer(gnu.text.Char)>: $i0 = virtualinvoke $r0.<gnu.text.Char: int intValue()>()
<gnu.text.Char: int intValue()>: $i0 = r0.<gnu.text.Char: int value>
<gnu.text.Char: int intValue()>: return $i0
<kawa.lib.characters: int char$To$Integer(gnu.text.Char)>: return $i0
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: staticinvoke <gnu.text.Char: void print(int,gnu.lists.Consumer)>($i0, $r1)
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: $c2 = (char) $i0
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: $i0 = (int) $c2
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: interfaceinvoke $r0.<gnu.lists.Consumer: void write(int)>($i0)
