Source: $i1 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
$i1 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>() in <gnu.kawa.lispexpr.LispReader: int readHexEscape()>
Sink: interfaceinvoke $r0.<gnu.lists.Consumer: void write(int)>($i0) in <gnu.text.Char: void print(int,gnu.lists.Consumer)>

<gnu.kawa.lispexpr.LispReader: int readHexEscape()>: $i1 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
<gnu.kawa.lispexpr.LispReader: int readHexEscape()>: $c2 = (char) $i1
<gnu.kawa.lispexpr.LispReader: int readHexEscape()>: $i3 = staticinvoke <java.lang.Character: int digit(char,int)>($c2, 16)
<gnu.kawa.lispexpr.LispReader: int readHexEscape()>: i0 = i0 + $i3
<gnu.kawa.lispexpr.LispReader: int readHexEscape()>: return i0
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: return
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: return $r9
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: $r4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>($i4, $r3)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r2, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke $r1.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>(r0, $i0, -1)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>(i3)
<gnu.text.Lexer: void tokenBufferAppend(int)>: $r1 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, $i0)
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r5 = $r1.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: specialinvoke $r10.<java.lang.String: void <init>(char[],int,int)>($r5, $i1, $i0)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r8 = virtualinvoke $r10.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r8
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3)
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: return $r4
<com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.expr.ModuleMethod: void apply(gnu.mapping.CallContext)>: virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r5)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: return
<gnu.expr.ModuleMethod: void apply(gnu.mapping.CallContext)>: $r5 = virtualinvoke r0.<gnu.expr.ModuleMethod: java.lang.Object apply3(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r6, $r7)
<gnu.expr.ModuleMethod: java.lang.Object apply3(java.lang.Object,java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke $r4.<gnu.expr.ModuleBody: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>(r0, $r1, $r2, $r3)
<kawa.lib.lists: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.lists: java.lang.Object assoc(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>($r2, $r3, $r5)
<kawa.lib.lists: java.lang.Object assoc(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r6 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r6, $r0)
<gnu.kawa.reflect.SlotGet: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: r7 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>()
<gnu.kawa.reflect.SlotGet: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.lists: java.lang.Object assoc(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r6 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r6, $r0)
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke $r4.<gnu.bytecode.Type: java.lang.Object coerceFromObject(java.lang.Object)>($r2)
<gnu.bytecode.ObjectType: java.lang.Object coerceFromObject(java.lang.Object)>: return $r1
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.lists: java.lang.Object assoc(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r6 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r6, $r0)
<gnu.expr.ModuleMethod: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke $r3.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>(r0, $r1, $r2)
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: staticinvoke <kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>($r2, $r6)
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: $r2 = (gnu.text.Char) $r0
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: $i0 = staticinvoke <kawa.lib.characters: int char$To$Integer(gnu.text.Char)>($r2)
<kawa.lib.characters: int char$To$Integer(gnu.text.Char)>: $i0 = virtualinvoke $r0.<gnu.text.Char: int intValue()>()
<gnu.text.Char: int intValue()>: $i0 = r0.<gnu.text.Char: int value>
<gnu.text.Char: int intValue()>: return $i0
<kawa.lib.characters: int char$To$Integer(gnu.text.Char)>: return $i0
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: staticinvoke <gnu.text.Char: void print(int,gnu.lists.Consumer)>($i0, $r1)
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: $c2 = (char) $i0
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: $i0 = (int) $c2
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: interfaceinvoke $r0.<gnu.lists.Consumer: void write(int)>($i0)
