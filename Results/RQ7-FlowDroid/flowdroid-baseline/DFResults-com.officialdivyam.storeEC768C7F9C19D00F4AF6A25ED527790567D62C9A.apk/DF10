Source: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
$i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in <gnu.text.LineBufferedReader: int fill(int)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.LineBufferedReader: int fill(int)>: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
<gnu.text.LineBufferedReader: int fill(int)>: $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int fill(int)>: r0 := @this: gnu.text.LineBufferedReader
<gnu.text.LineBufferedReader: int read()>: r0 := @this: gnu.text.LineBufferedReader
<gnu.text.LineBufferedReader: int peek()>: r0 := @this: gnu.text.LineBufferedReader
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: $r5 = r0.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader port>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: $r5 = r0.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader port>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: virtualinvoke $r5.<gnu.text.LineBufferedReader: int read()>()
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r2 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>($r1, $r3)
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
<io.kodular.contact_dymapps.Official_Divyam.Screen1$frame: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: virtualinvoke $r4.<io.kodular.contact_dymapps.Official_Divyam.Screen1: void addToGlobalVars(java.lang.Object,java.lang.Object)>($r2, $r3)
<io.kodular.contact_dymapps.Official_Divyam.Screen1: void addToGlobalVars(java.lang.Object,java.lang.Object)>: $r3 = staticinvoke <gnu.lists.LList: gnu.lists.Pair list2(java.lang.Object,java.lang.Object)>($r1, $r2)
<gnu.lists.LList: gnu.lists.Pair list2(java.lang.Object,java.lang.Object)>: specialinvoke $r3.<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>($r0, $r4)
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: r0.<gnu.lists.Pair: java.lang.Object car> = $r1
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: return
<gnu.lists.LList: gnu.lists.Pair list2(java.lang.Object,java.lang.Object)>: return $r3
<io.kodular.contact_dymapps.Official_Divyam.Screen1: void addToGlobalVars(java.lang.Object,java.lang.Object)>: r0.<io.kodular.contact_dymapps.Official_Divyam.Screen1: gnu.lists.LList global$Mnvars$Mnto$Mncreate> = $r3
<io.kodular.contact_dymapps.Official_Divyam.Screen1: void addToGlobalVars(java.lang.Object,java.lang.Object)>: return
<io.kodular.contact_dymapps.Official_Divyam.Screen1$frame: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r4 = r0.<io.kodular.contact_dymapps.Official_Divyam.Screen1$frame: io.kodular.contact_dymapps.Official_Divyam.Screen1 $main>
<io.kodular.contact_dymapps.Official_Divyam.Screen1$frame: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r6
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r2 = r0.<gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: r0 := @this: gnu.expr.ModuleMethod
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r2 = r0.<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
