Source: $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
$i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>() in <gnu.text.Lexer: int read()>
Sink: interfaceinvoke $r0.<gnu.lists.Consumer: void write(int)>($i0) in <gnu.text.Char: void print(int,gnu.lists.Consumer)>

<gnu.text.Lexer: int read()>: $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
<gnu.text.Lexer: int read()>: return $i0
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $i0 = $i2
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $r5 = virtualinvoke $r6.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>($r1, $i0, $i1)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>($i0)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: r0 := @this: gnu.kawa.lispexpr.ReaderTypespec
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: r0 := @this: gnu.kawa.lispexpr.LispReader
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: r0 := @this: gnu.kawa.lispexpr.LispReader
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: r0 := @this: gnu.kawa.lispexpr.LispReader
<gnu.kawa.lispexpr.LispReader: java.lang.Object readCommand()>: r0 := @this: gnu.kawa.lispexpr.LispReader
<gnu.kawa.lispexpr.LispLanguage: boolean parse(gnu.expr.Compilation,int)>: $r6 = (gnu.kawa.lispexpr.LispReader) $r3
<gnu.kawa.lispexpr.LispLanguage: boolean parse(gnu.expr.Compilation,int)>: $i1 = virtualinvoke $r3.<gnu.text.Lexer: int peek()>()
<gnu.text.Lexer: int peek()>: return $i0
<gnu.kawa.lispexpr.LispLanguage: boolean parse(gnu.expr.Compilation,int)>: $r6 = (gnu.kawa.lispexpr.LispReader) $r3
<gnu.kawa.lispexpr.LispLanguage: boolean parse(gnu.expr.Compilation,int)>: $r7 = virtualinvoke $r6.<gnu.kawa.lispexpr.LispReader: java.lang.Object readCommand()>()
<gnu.kawa.lispexpr.LispReader: java.lang.Object readCommand()>: $r1 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>()
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: $r4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>($i4, $r3)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r2, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>($i0, $i1, $r2)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r7, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke $r1.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>(r0, $i0, -1)
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r8 = virtualinvoke r24.<gnu.kawa.util.GeneralHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r25, $r1)
<gnu.kawa.util.AbstractHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>: $r1 = $r2
<gnu.kawa.util.AbstractHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>: return $r1
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r8
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r8 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r7, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r6 = <gnu.mapping.Values: gnu.mapping.Values empty>
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r6
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: return $r9
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: throw $r6
<gnu.kawa.lispexpr.LispReader: java.lang.Object readCommand()>: return $r1
<gnu.kawa.lispexpr.LispLanguage: boolean parse(gnu.expr.Compilation,int)>: return 1
<gnu.expr.Compilation: void process(int)>: throw $r14
<gnu.expr.ModuleExp: java.lang.Object evalModule1(gnu.mapping.Environment,gnu.expr.Compilation,java.net.URL,gnu.mapping.OutPort)>: return null
<gnu.expr.ModuleExp: boolean evalModule(gnu.mapping.Environment,gnu.mapping.CallContext,gnu.expr.Compilation,java.net.URL,gnu.mapping.OutPort)>: staticinvoke <gnu.expr.ModuleExp: void evalModule2(gnu.mapping.Environment,gnu.mapping.CallContext,gnu.expr.Language,gnu.expr.ModuleExp,java.lang.Object)>($r0, $r1, $r6, $r5, $r7)
<gnu.expr.ModuleExp: void evalModule2(gnu.mapping.Environment,gnu.mapping.CallContext,gnu.expr.Language,gnu.expr.ModuleExp,java.lang.Object)>: virtualinvoke $r1.<gnu.mapping.CallContext: void runUntilDone()>()
<gnu.mapping.CallContext: void runUntilDone()>: virtualinvoke $r1.<gnu.mapping.Procedure: void apply(gnu.mapping.CallContext)>(r0)
<gnu.expr.ModuleMethod: void apply(gnu.mapping.CallContext)>: $r5 = virtualinvoke r0.<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>($r9)
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: $r2 = virtualinvoke $r3.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>(r0, $r1)
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>($r1, $r4)
<io.kodular.contact_dymapps.Official_Divyam.Screen2$frame: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: virtualinvoke $r3.<io.kodular.contact_dymapps.Official_Divyam.Screen2: void processException(java.lang.Object)>($r2)
<io.kodular.contact_dymapps.Official_Divyam.Screen2: void processException(java.lang.Object)>: $r5 = virtualinvoke $r4.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r1, $r2)
<gnu.kawa.functions.GetNamedPart: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke $r3.<gnu.mapping.Values: java.lang.Object canonicalize()>()
<gnu.mapping.Values: java.lang.Object canonicalize()>: r0 = <gnu.mapping.Values: gnu.mapping.Values empty>
<gnu.mapping.Values: java.lang.Object canonicalize()>: return r0
<gnu.kawa.functions.GetNamedPart: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<io.kodular.contact_dymapps.Official_Divyam.Screen2: void processException(java.lang.Object)>: $r5 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>($r5)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r2[0] = $r1
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: $r2 = virtualinvoke $r3.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>(r0, $r1)
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = $r2[0]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r4, $r5, $r6)
<kawa.lib.lists: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>($r2, $r3, $r5)
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r0, $r3)
<gnu.expr.ModuleMethod: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke $r3.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>(r0, $r1, $r2)
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: staticinvoke <kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>($r2, $r6)
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: $r2 = (gnu.text.Char) $r0
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: $i0 = staticinvoke <kawa.lib.characters: int char$To$Integer(gnu.text.Char)>($r2)
<kawa.lib.characters: int char$To$Integer(gnu.text.Char)>: $i0 = virtualinvoke $r0.<gnu.text.Char: int intValue()>()
<gnu.text.Char: int intValue()>: $i0 = r0.<gnu.text.Char: int value>
<gnu.text.Char: int intValue()>: return $i0
<kawa.lib.characters: int char$To$Integer(gnu.text.Char)>: return $i0
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: staticinvoke <gnu.text.Char: void print(int,gnu.lists.Consumer)>($i0, $r1)
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: $c2 = (char) $i0
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: $i0 = (int) $c2
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: interfaceinvoke $r0.<gnu.lists.Consumer: void write(int)>($i0)
