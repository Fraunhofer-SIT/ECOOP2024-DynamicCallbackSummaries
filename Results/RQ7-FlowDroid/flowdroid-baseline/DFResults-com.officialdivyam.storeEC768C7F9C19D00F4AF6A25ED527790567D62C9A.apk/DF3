Source: $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
$i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>() in <gnu.text.Lexer: int read()>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.Lexer: int read()>: $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
<gnu.text.Lexer: int read()>: return $i0
<gnu.kawa.lispexpr.LispReader: int readEscape()>: return $i0
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: virtualinvoke $r0.<gnu.text.Lexer: void tokenBufferAppend(int)>(i3)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r3 = $r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>($r3, $i1, $i0)
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r4 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: return $r4
<gnu.kawa.lispexpr.ReaderString: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r2
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.expr.GenericProc: java.lang.Object applyN(java.lang.Object[])>: return $r4
<gnu.kawa.reflect.Invoke: java.lang.Object applyN(java.lang.Object[])>: virtualinvoke $r25.<gnu.mapping.MethodProc: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r5, $r19)
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r3[0] = $r1
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r3)
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r6 = $r1[0]
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r3 = virtualinvoke $r7.<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r3, $r6)
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r6 = $r1[0]
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: r0 := @this: gnu.kawa.functions.NamedPart
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r3[1] = $r2
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<gnu.kawa.reflect.Invoke: java.lang.Object applyN(java.lang.Object[])>: $r19 = $r1[$i2]
<gnu.kawa.reflect.Invoke: java.lang.Object applyN(java.lang.Object[])>: return $r5
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r8[0] = $r3
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r3 = r0.<gnu.kawa.functions.NamedPart: java.lang.Object container>
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: return $r3
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<kawa.lib.ports: java.lang.Object callWithInputFile(gnu.text.Path,gnu.mapping.Procedure)>: $r0 := @parameter0: gnu.text.Path
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r5 = (gnu.mapping.Procedure) $r3
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: specialinvoke $r13.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r14, "call-with-input-file", 2, $r3)
<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>: return
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r5 = $r2[1]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: r0 := @this: gnu.expr.ModuleBody
<kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: r0 := @this: kawa.lib.misc
<gnu.expr.ModuleBody: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: $r5[1] = $r3
<gnu.expr.ModuleBody: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: r0 := @this: gnu.expr.ModuleBody
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r5 = $r2[1]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = $r2[0]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
<kawa.lib.lists: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<kawa.lib.lists: java.lang.Object assq(java.lang.Object,java.lang.Object)>: $r6 = (gnu.lists.Pair) $r5
<kawa.lib.lists: java.lang.Object assq(java.lang.Object,java.lang.Object)>: $r5 = virtualinvoke $r6.<gnu.lists.Pair: java.lang.Object getCar()>()
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: $r2 = r0.<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: $r1 = virtualinvoke $r2.<gnu.lists.Pair: java.lang.Object getCar()>()
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: return $r1
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: $r2 = r0.<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getCar()>: return $r1
<kawa.lib.lists: java.lang.Object assq(java.lang.Object,java.lang.Object)>: $r3 = $r6
<kawa.lib.lists: java.lang.Object assq(java.lang.Object,java.lang.Object)>: return $r3
<kawa.lib.lists: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<kawa.lib.numbers: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
