Source: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, r2)
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r4 = $r7
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>($r4)
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
<gnu.text.FilePath: void <init>(java.io.File)>: $r2 = virtualinvoke $r1.<java.io.File: java.lang.String toString()>()
<gnu.text.FilePath: void <init>(java.io.File)>: r0.<gnu.text.FilePath: java.lang.String path> = $r2
<gnu.text.FilePath: void <init>(java.io.File)>: return
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: return $r1
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: return r0
<gnu.text.Path: gnu.text.Path resolve(gnu.text.Path)>: return r0
<gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>: r1 = $r6
<gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>: return r1
<gnu.kawa.xml.KNode: gnu.text.Path baseURI()>: return $r1
<kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>: $r0 = $r1
<kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>: return $r0
<kawa.lib.misc: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<com.google.youngandroid.runtime$frame4: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: $r2 = virtualinvoke $r3.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>(r0, $r1)
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
<kawa.lib.std_syntax: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.std_syntax: java.lang.Object datum$To$SyntaxObject(java.lang.Object,java.lang.Object)>($r2, $r3)
<kawa.lib.std_syntax: java.lang.Object datum$To$SyntaxObject(java.lang.Object,java.lang.Object)>: $r0 = staticinvoke <kawa.lang.SyntaxForms: java.lang.Object makeWithTemplate(java.lang.Object,java.lang.Object)>($r0, $r1)
<kawa.lang.SyntaxForms: java.lang.Object makeWithTemplate(java.lang.Object,java.lang.Object)>: $r0 = interfaceinvoke $r2.<kawa.lang.SyntaxForm: java.lang.Object getDatum()>()
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getDatum()>: $r1 = r0.<kawa.lang.SyntaxForms$PairSyntaxForm: gnu.lists.Pair datum>
<kawa.lang.SyntaxForms$PairSyntaxForm: java.lang.Object getDatum()>: return $r1
<kawa.lang.SyntaxForms: java.lang.Object makeWithTemplate(java.lang.Object,java.lang.Object)>: return $r2
<kawa.lib.std_syntax: java.lang.Object datum$To$SyntaxObject(java.lang.Object,java.lang.Object)>: return $r0
<kawa.lib.std_syntax: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
