Source: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
$r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, r2)
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r4 = $r7
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>($r4)
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
<gnu.text.FilePath: void <init>(java.io.File)>: r0.<gnu.text.FilePath: java.io.File file> = $r1
<gnu.text.FilePath: void <init>(java.io.File)>: return
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: return $r1
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: return r0
<gnu.text.Path: gnu.text.Path resolve(gnu.text.Path)>: return r0
<gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>: r1 = $r6
<gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>: return r1
<gnu.kawa.xml.KNode: gnu.text.Path baseURI()>: return $r1
<kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>: $r0 = $r1
<kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>: return $r0
<kawa.lib.misc: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r4 = staticinvoke <kawa.lib.numbers: java.lang.Number exact(java.lang.Number)>($r4)
<kawa.lib.numbers: java.lang.Number exact(java.lang.Number)>: $r0 = staticinvoke <gnu.kawa.functions.Arithmetic: java.lang.Number toExact(java.lang.Number)>($r0)
<gnu.kawa.functions.Arithmetic: java.lang.Number toExact(java.lang.Number)>: $r1 = (gnu.math.Numeric) $r0
<gnu.kawa.functions.Arithmetic: java.lang.Number toExact(java.lang.Number)>: $r1 = virtualinvoke $r1.<gnu.math.Numeric: gnu.math.Numeric toExact()>()
<gnu.math.Complex: gnu.math.Complex toExact()>: $r1 = virtualinvoke r0.<gnu.math.Complex: gnu.math.RealNum re()>()
<gnu.math.RealNum: gnu.math.RealNum re()>: return r0
<gnu.math.Complex: gnu.math.Complex toExact()>: $r3 = virtualinvoke $r1.<gnu.math.RealNum: gnu.math.RatNum toExact()>()
<gnu.math.RealNum: gnu.math.RatNum toExact()>: return $r1
<gnu.math.Complex: gnu.math.Complex toExact()>: $r1 = virtualinvoke r0.<gnu.math.Complex: gnu.math.RealNum re()>()
<gnu.math.CComplex: gnu.math.RealNum re()>: $r1 = r0.<gnu.math.CComplex: gnu.math.RealNum real>
<gnu.math.CComplex: gnu.math.RealNum re()>: return $r1
<gnu.math.Complex: gnu.math.Complex toExact()>: return r0
<gnu.kawa.functions.Arithmetic: java.lang.Number toExact(java.lang.Number)>: return $r1
<kawa.lib.numbers: java.lang.Number exact(java.lang.Number)>: return $r0
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
