Source: i1 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
i1 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>() in <gnu.kawa.lispexpr.LispReader: int readEscape(int)>
Sink: interfaceinvoke $r0.<gnu.lists.Consumer: void write(int)>($i0) in <gnu.text.Char: void print(int,gnu.lists.Consumer)>

<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: i1 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: return i1
<gnu.kawa.lispexpr.LispReader: int readEscape()>: return $i0
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: virtualinvoke $r0.<gnu.text.Lexer: void tokenBufferAppend(int)>(i3)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r3 = $r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>($r3, $i1, $i0)
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r4 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: return $r4
<gnu.kawa.lispexpr.ReaderString: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r2
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: $r2 = virtualinvoke $r3.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>(r0, $r1)
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.numbers: java.lang.Object divAndMod(gnu.math.RealNum,gnu.math.RealNum)>($r4, $r5)
<kawa.lib.numbers: java.lang.Object divAndMod(gnu.math.RealNum,gnu.math.RealNum)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r0, $r1)
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r3)
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: $r2 = $r1[0]
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r3[1] = $r2
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.numbers: java.lang.Object divAndMod(gnu.math.RealNum,gnu.math.RealNum)>: $r3 = virtualinvoke $r6.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r4, $r1)
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.numbers: java.lang.Object divAndMod(gnu.math.RealNum,gnu.math.RealNum)>: $r0 := @parameter0: gnu.math.RealNum
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3)
<gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>: $r2 = staticinvoke <gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>($r0)
<gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>: $r1 = (gnu.math.RealNum) $r0
<gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>: $r0 := @parameter0: java.lang.Object
<gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>: throw $r3
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r5 = $r2[1]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = $r2[0]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
<kawa.lib.lists: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: staticinvoke <kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>($r2, $r6)
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: $r2 = (gnu.text.Char) $r0
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: $i0 = staticinvoke <kawa.lib.characters: int char$To$Integer(gnu.text.Char)>($r2)
<kawa.lib.characters: int char$To$Integer(gnu.text.Char)>: $i0 = virtualinvoke $r0.<gnu.text.Char: int intValue()>()
<gnu.text.Char: int intValue()>: $i0 = r0.<gnu.text.Char: int value>
<gnu.text.Char: int intValue()>: return $i0
<kawa.lib.characters: int char$To$Integer(gnu.text.Char)>: return $i0
<kawa.lib.ports: void writeChar(java.lang.Object,gnu.mapping.OutPort)>: staticinvoke <gnu.text.Char: void print(int,gnu.lists.Consumer)>($i0, $r1)
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: $c2 = (char) $i0
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: $i0 = (int) $c2
<gnu.text.Char: void print(int,gnu.lists.Consumer)>: interfaceinvoke $r0.<gnu.lists.Consumer: void write(int)>($i0)
