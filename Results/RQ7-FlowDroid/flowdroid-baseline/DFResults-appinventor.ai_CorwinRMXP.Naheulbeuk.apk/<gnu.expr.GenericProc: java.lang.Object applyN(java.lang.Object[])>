    public java.lang.Object applyN(java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Object[] $r1;
        gnu.mapping.MethodProc r2;
        gnu.mapping.WrongType $r6;
        gnu.mapping.CallContext $r5;
        int $i0, $i1;
        gnu.mapping.MethodProc[] $r3;
        java.lang.Object $r4;
        gnu.expr.GenericProc r0;

        r0 := @this: gnu.expr.GenericProc;

        $r1 := @parameter0: java.lang.Object[];

        $i0 = r0.<gnu.expr.GenericProc: int count>;

        if $i0 != 1 goto label1;

        $r3 = r0.<gnu.expr.GenericProc: gnu.mapping.MethodProc[] methods>;

        r2 = $r3[0];

        $r4 = virtualinvoke r2.<gnu.mapping.MethodProc: java.lang.Object applyN(java.lang.Object[])>($r1);

        return $r4;

     label1:
        $i0 = lengthof $r1;

        staticinvoke <gnu.expr.GenericProc: void checkArgCount(gnu.mapping.Procedure,int)>(r0, $i0);

        $r5 = staticinvoke <gnu.mapping.CallContext: gnu.mapping.CallContext getInstance()>();

        $i0 = 0;

     label2:
        $i1 = r0.<gnu.expr.GenericProc: int count>;

        if $i0 >= $i1 goto label4;

        $r3 = r0.<gnu.expr.GenericProc: gnu.mapping.MethodProc[] methods>;

        r2 = $r3[$i0];

        $i1 = virtualinvoke r2.<gnu.mapping.MethodProc: int matchN(java.lang.Object[],gnu.mapping.CallContext)>($r1, $r5);

        if $i1 != 0 goto label3;

        $r4 = virtualinvoke $r5.<gnu.mapping.CallContext: java.lang.Object runUntilValue()>();

        return $r4;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $r6 = new gnu.mapping.WrongType;

        specialinvoke $r6.<gnu.mapping.WrongType: void <init>(gnu.mapping.Procedure,int,java.lang.ClassCastException)>(r0, -1, null);

        throw $r6;
    }
