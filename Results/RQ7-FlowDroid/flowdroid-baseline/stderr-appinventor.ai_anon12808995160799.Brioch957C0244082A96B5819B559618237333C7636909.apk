[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loading sources and sinks from SourcesSinks/UnconstrainedSourcesSinks.xml...
[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loaded 273 sources and 91 sinks from the XML file
[main] INFO soot.jimple.infoflow.android.SetupApplication - Initializing Soot...
[main] INFO soot.jimple.infoflow.android.SetupApplication - Loading dex files...
[main] INFO soot.jimple.infoflow.android.SetupApplication - ARSC file parsing took 0.030953169 seconds
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230,400 MiB
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 9 components...
[main] WARN soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Cannot generate constructor for phantom class androidx.core.content.FileProvider
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Collecting callbacks in DEFAULT mode...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Callback analysis done.
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 9 components...
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[FlowDroid Timeout Watcher] WARN soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - Timeout reached, stopping the solvers...
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Running incremental callback analysis for 8 components...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Incremental callback analysis done.
[main] WARN soot.jimple.infoflow.android.SetupApplication - Aborted callback collection because of low memory
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] WARN soot.jimple.infoflow.android.SetupApplication - Callback analysis aborted early due to time or memory exhaustion
[main] INFO soot.jimple.infoflow.android.SetupApplication - Entry point calculation done.
[main] INFO soot.jimple.infoflow.android.source.AccessPathBasedSourceSinkManager - Created a SourceSinkManager with 273 sources, 91 sinks, and 76 callback methods.
[main] INFO soot.jimple.infoflow.android.SetupApplication - Collecting callbacks and building a callgraph took 379 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication - Running data flow analysis on storagepath2-data/androidApps/2022-AndroZoo-PlayStore/appinventor.ai_anon12808995160799.Brioch957C0244082A96B5819B559618237333C7636909.apk with 273 sources and 91 sinks...
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Implicit flow tracking is NOT enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Exceptional flow tracking is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Running with a maximum access path length of 5
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using path-agnostic result collection
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Recursive access path shortening is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Taint analysis enabled: true
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using alias algorithm FlowSensitive
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230,400 MiB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph construction took 0 seconds
[main] INFO soot.jimple.infoflow.codeOptimization.InterproceduralConstantValuePropagator - Removing side-effect free methods is disabled
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Dead code elimination took 22.2328998 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph has 197152 edges
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Starting Taint Analysis
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] WARN soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Running with limited join point abstractions can break context-sensitive path builders
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Looking for sources and sinks...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Source lookup done, found 82 sources and 284 sinks.
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<gnu.text.LineBufferedReader: char[] buffer>]
[FlowDroid Timeout Watcher] WARN soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - Timeout reached, stopping the solvers...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper hits: 1140648
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper misses: 24028883
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - IFDS problem with 2484190 forward and 77624969 backward edges solved in 871 seconds, processing 4 results...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Current memory consumption: 45737 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after cleanup: 6687 MB
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 1 with 4 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 4 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after path building: 8849 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Path reconstruction took 89 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in method <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in method <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: void <init>(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<gnu.text.FilePath: java.io.File file> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: void <init>(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Path: gnu.text.Path resolve(gnu.text.Path)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r1 = $r6
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.KNode: gnu.text.Path baseURI()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in method <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.std_syntax: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in method <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: gnu.mapping.TtyInPort
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.LineBufferedReader: int read()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.std_syntax: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void lineStart(boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r1, $i0, $i1) in method <gnu.mapping.LogWriter: void echo(char[],int,int)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in method <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.TtyInPort: int fill(int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<gnu.mapping.OutPort: void echo(char[],int,int)>($r2, $i1, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.OutPort: void echo(char[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<gnu.mapping.LogWriter: void echo(char[],int,int)>($r1, $i0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.LogWriter: void echo(char[],int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r1, $i0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1) in method <gnu.lists.PrintConsumer: void writeObject(java.lang.Object)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in method <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: void <init>(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<gnu.text.FilePath: java.io.File file> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: void <init>(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.text.Path: gnu.text.Path resolve(gnu.text.Path)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r1 = $r6
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.kawa.xml.KNode: gnu.text.Path baseURI()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object baseUri()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <kawa.lib.misc: java.lang.Object apply0(gnu.expr.ModuleMethod)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: java.lang.Object apply0()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.expr.ModuleMethod: void apply(gnu.mapping.CallContext)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.CallContext: void writeValue(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Data flow solver took 1021 seconds. Maximum memory consumption: 45737 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication - Found 3 leaks
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'SummaryStatistics'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Telemetry'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'Telemetry_sha256Hash_idx' for table 'Telemetry
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Callbacks'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallbackSummaries'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'CallbackSummaries_sha256Hash_idx' for table 'CallbackSummaries
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'AppSizes'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'AppSizes_sha256Hash_idx' for table 'AppSizes
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallgraphSizes'
