    public static final void setConfig(com.vk.api.sdk.VKApiConfig)
    {
        com.vk.api.sdk.VKApiManager $r2;
        com.vk.api.sdk.VK $r1;
        kotlin.jvm.functions.Function0 $r7;
        com.vk.api.sdk.VKKeyValueStorage $r4;
        com.vk.api.sdk.auth.VKAuthManager $r3;
        com.vk.api.sdk.VKApiCredentials$Companion $r5;
        com.vk.api.sdk.VK$setConfig$1 $r6;
        kotlin.Lazy $r8;
        com.vk.api.sdk.VKApiConfig $r0;

        $r0 := @parameter0: com.vk.api.sdk.VKApiConfig;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "config");

        $r1 = <com.vk.api.sdk.VK: com.vk.api.sdk.VK INSTANCE>;

        <com.vk.api.sdk.VK: com.vk.api.sdk.VKApiConfig config> = $r0;

        $r2 = new com.vk.api.sdk.VKApiManager;

        specialinvoke $r2.<com.vk.api.sdk.VKApiManager: void <init>(com.vk.api.sdk.VKApiConfig)>($r0);

        virtualinvoke $r1.<com.vk.api.sdk.VK: void setApiManager$core_release(com.vk.api.sdk.VKApiManager)>($r2);

        $r3 = new com.vk.api.sdk.auth.VKAuthManager;

        $r4 = virtualinvoke $r0.<com.vk.api.sdk.VKApiConfig: com.vk.api.sdk.VKKeyValueStorage getKeyValueStorage()>();

        specialinvoke $r3.<com.vk.api.sdk.auth.VKAuthManager: void <init>(com.vk.api.sdk.VKKeyValueStorage)>($r4);

        <com.vk.api.sdk.VK: com.vk.api.sdk.auth.VKAuthManager authManager> = $r3;

        $r2 = virtualinvoke $r1.<com.vk.api.sdk.VK: com.vk.api.sdk.VKApiManager getApiManager$core_release()>();

        $r5 = <com.vk.api.sdk.VKApiCredentials: com.vk.api.sdk.VKApiCredentials$Companion Companion>;

        $r6 = <com.vk.api.sdk.VK$setConfig$1: com.vk.api.sdk.VK$setConfig$1 INSTANCE>;

        $r7 = (kotlin.jvm.functions.Function0) $r6;

        $r8 = virtualinvoke $r5.<com.vk.api.sdk.VKApiCredentials$Companion: kotlin.Lazy lazyFrom(kotlin.jvm.functions.Function0)>($r7);

        virtualinvoke $r2.<com.vk.api.sdk.VKApiManager: void setCredentials(kotlin.Lazy)>($r8);

        return;
    }
