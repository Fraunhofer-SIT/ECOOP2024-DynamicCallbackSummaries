Source: $r1 = interfaceinvoke $r2.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>($r1, null)
$r1 = interfaceinvoke $r2.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>($r1, null) in <com.vk.api.sdk.VKPreferencesKeyValueStorage: java.lang.String get(java.lang.String)>
Sink: virtualinvoke $r5.<java.io.FileOutputStream: void write(byte[])>($r7) in <com.facebook.internal.instrument.InstrumentUtility: void writeFile(java.lang.String,java.lang.String)>

<com.vk.api.sdk.VKPreferencesKeyValueStorage: java.lang.String get(java.lang.String)>: $r1 = interfaceinvoke $r2.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>($r1, null)
<com.vk.api.sdk.VKPreferencesKeyValueStorage: java.lang.String get(java.lang.String)>: return $r1
<com.vk.api.sdk.auth.VKAccessToken$Companion: com.vk.api.sdk.auth.VKAccessToken restore(com.vk.api.sdk.VKKeyValueStorage)>: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7)
<com.vk.api.sdk.auth.VKAccessToken$Companion: com.vk.api.sdk.auth.VKAccessToken restore(com.vk.api.sdk.VKKeyValueStorage)>: $r8 = (java.util.Map) $r2
<com.vk.api.sdk.auth.VKAccessToken$Companion: com.vk.api.sdk.auth.VKAccessToken restore(com.vk.api.sdk.VKKeyValueStorage)>: $r8 = (java.util.Map) $r2
<com.vk.api.sdk.auth.VKAccessToken$Companion: com.vk.api.sdk.auth.VKAccessToken restore(com.vk.api.sdk.VKKeyValueStorage)>: specialinvoke $r9.<com.vk.api.sdk.auth.VKAccessToken: void <init>(java.util.Map)>($r8)
<com.vk.api.sdk.auth.VKAccessToken: void <init>(java.util.Map)>: $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("secret")
<com.vk.api.sdk.auth.VKAccessToken: void <init>(java.util.Map)>: $r3 = (java.lang.String) $r2
<com.vk.api.sdk.auth.VKAccessToken: void <init>(java.util.Map)>: r0.<com.vk.api.sdk.auth.VKAccessToken: java.lang.String secret> = $r3
<com.vk.api.sdk.auth.VKAccessToken: void <init>(java.util.Map)>: return
<com.vk.api.sdk.auth.VKAccessToken$Companion: com.vk.api.sdk.auth.VKAccessToken restore(com.vk.api.sdk.VKKeyValueStorage)>: return $r9
<com.vk.api.sdk.auth.VKAuthManager: com.vk.api.sdk.auth.VKAccessToken getCurrentToken()>: return $r2
<com.vk.api.sdk.VK$setConfig$1: com.vk.api.sdk.auth.VKAccessToken invoke()>: return $r3
<kotlin.SynchronizedLazyImpl: java.lang.Object getValue()>: r0.<kotlin.SynchronizedLazyImpl: java.lang.Object _value> = $r1
<kotlin.SynchronizedLazyImpl: java.lang.Object getValue()>: return $r4
<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: java.lang.String getCustomEndpoint()>: $r2 = virtualinvoke $r1.<com.vk.api.sdk.VKApiConfig: kotlin.Lazy getCustomApiEndpoint()>()
<com.vk.api.sdk.VKApiConfig: kotlin.Lazy getCustomApiEndpoint()>: r1 = r0.<com.vk.api.sdk.VKApiConfig: kotlin.Lazy customApiEndpoint>
<com.vk.api.sdk.VKApiConfig: kotlin.Lazy getCustomApiEndpoint()>: r0 := @this: com.vk.api.sdk.VKApiConfig
<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: java.lang.String getCustomEndpoint()>: $r1 = r0.<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: com.vk.api.sdk.VKApiConfig apiConfig>
<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: java.lang.String getCustomEndpoint()>: return $r4
<com.vk.api.sdk.okhttp.OkHttpExecutor: void <init>(com.vk.api.sdk.okhttp.OkHttpExecutorConfig)>: return
<com.vk.api.sdk.VKApiManager$executor$2: com.vk.api.sdk.okhttp.OkHttpExecutor invoke()>: specialinvoke $r2.<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: void <init>(com.vk.api.sdk.VKApiConfig)>($r3)
<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: void <init>(com.vk.api.sdk.VKApiConfig)>: $r4 = virtualinvoke r0.<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: java.lang.String getAccessToken()>()
<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: java.lang.String getAccessToken()>: return $r4
<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: void <init>(com.vk.api.sdk.VKApiConfig)>: return
<com.vk.api.sdk.VKApiManager$executor$2: com.vk.api.sdk.okhttp.OkHttpExecutor invoke()>: specialinvoke $r1.<com.vk.api.sdk.okhttp.OkHttpExecutor: void <init>(com.vk.api.sdk.okhttp.OkHttpExecutorConfig)>($r2)
<com.vk.api.sdk.okhttp.OkHttpExecutor: void <init>(com.vk.api.sdk.okhttp.OkHttpExecutorConfig)>: $r8 = virtualinvoke $r1.<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: java.lang.String getAccessToken()>()
<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: java.lang.String getAccessToken()>: $r1 = r0.<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: com.vk.api.sdk.VKApiConfig apiConfig>
<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: java.lang.String getAccessToken()>: $r2 = virtualinvoke $r1.<com.vk.api.sdk.VKApiConfig: kotlin.Lazy getAccessToken$core_release()>()
<com.vk.api.sdk.VKApiConfig: kotlin.Lazy getAccessToken$core_release()>: r1 = r0.<com.vk.api.sdk.VKApiConfig: kotlin.Lazy accessToken>
<com.vk.api.sdk.VKApiConfig: kotlin.Lazy getAccessToken$core_release()>: return r1
<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: java.lang.String getAccessToken()>: $r3 = interfaceinvoke $r2.<kotlin.Lazy: java.lang.Object getValue()>()
<kotlin.SynchronizedLazyImpl: java.lang.Object getValue()>: $r5 = r0.<kotlin.SynchronizedLazyImpl: kotlin.jvm.functions.Function0 initializer>
<kotlin.SynchronizedLazyImpl: java.lang.Object getValue()>: $r1 = interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>()
<com.vk.api.sdk.utils.DefaultUserAgent$stringify$2: java.lang.String invoke()>: $r4 = r0.<com.vk.api.sdk.utils.DefaultUserAgent$stringify$2: com.vk.api.sdk.utils.DefaultUserAgent this$0>
<com.vk.api.sdk.utils.DefaultUserAgent$stringify$2: java.lang.String invoke()>: $r5 = virtualinvoke $r4.<com.vk.api.sdk.utils.DefaultUserAgent: java.lang.String getPrefix()>()
<com.vk.api.sdk.utils.DefaultUserAgent: java.lang.String getPrefix()>: r1 = r0.<com.vk.api.sdk.utils.DefaultUserAgent: java.lang.String prefix>
<com.vk.api.sdk.utils.DefaultUserAgent: java.lang.String getPrefix()>: return r1
<com.vk.api.sdk.utils.DefaultUserAgent$stringify$2: java.lang.String invoke()>: $r3[0] = $r5
<com.vk.api.sdk.utils.DefaultUserAgent$stringify$2: java.lang.String invoke()>: $r3[3] = $r5
<com.vk.api.sdk.utils.DefaultUserAgent$stringify$2: java.lang.String invoke()>: $r5 = <android.os.Build$VERSION: java.lang.String RELEASE>
<com.vk.api.sdk.utils.DefaultUserAgent$stringify$2: java.lang.String invoke()>: return $r5
<kotlin.SynchronizedLazyImpl: java.lang.Object getValue()>: return $r4
<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: java.lang.String getAccessToken()>: return $r4
<com.vk.api.sdk.okhttp.OkHttpExecutor: void <init>(com.vk.api.sdk.okhttp.OkHttpExecutorConfig)>: return
<com.vk.api.sdk.VKApiManager$executor$2: com.vk.api.sdk.okhttp.OkHttpExecutor invoke()>: return $r1
<kotlin.SynchronizedLazyImpl: java.lang.Object getValue()>: throw $r6
<com.vk.api.sdk.okhttp.OkHttpExecutorConfig: java.lang.String getCustomEndpoint()>: return $r4
<com.vk.api.sdk.okhttp.OkHttpExecutor: void <init>(com.vk.api.sdk.okhttp.OkHttpExecutorConfig)>: return
<com.vk.api.sdk.VKApiManager$executor$2: com.vk.api.sdk.okhttp.OkHttpExecutor invoke()>: return $r1
<kotlin.SynchronizedLazyImpl: java.lang.Object getValue()>: return $r4
<com.vk.api.sdk.VKApiManager: com.vk.api.sdk.okhttp.OkHttpExecutor getExecutor()>: return $r3
<com.vk.api.sdk.VKApiManager: void setCredentials(kotlin.Lazy)>: return
<com.vk.api.sdk.VK: void setConfig(com.vk.api.sdk.VKApiConfig)>: return
<com.vk.api.sdk.VK: void initialize(android.content.Context)>: return
<com.vk.api.sdk.internal.VKInitProvider: boolean onCreate()>: return 0
<dummyMainClass: void dummyMainMethod(java.lang.String[])>: staticinvoke <dummyMainClass: com.facebook.FacebookActivity dummyMainMethod_com_facebook_FacebookActivity(android.content.Intent)>(null)
<dummyMainClass: com.facebook.FacebookActivity dummyMainMethod_com_facebook_FacebookActivity(android.content.Intent)>: virtualinvoke $r15.<com.facebook.appevents.aam.MetadataViewObserver: void onGlobalFocusChanged(android.view.View,android.view.View)>($r2, $r2)
<com.facebook.appevents.aam.MetadataViewObserver: void onGlobalFocusChanged(android.view.View,android.view.View)>: staticinvoke <com.facebook.internal.instrument.crashshield.CrashShieldHandler: void handleThrowable(java.lang.Throwable,java.lang.Object)>($r3, r0)
<com.facebook.internal.instrument.crashshield.CrashShieldHandler: void handleThrowable(java.lang.Throwable,java.lang.Object)>: virtualinvoke $r4.<com.facebook.internal.instrument.InstrumentData: void save()>()
<com.facebook.internal.instrument.InstrumentData: void save()>: $r2 = virtualinvoke r0.<com.facebook.internal.instrument.InstrumentData: java.lang.String toString()>()
<com.facebook.internal.instrument.InstrumentData: java.lang.String toString()>: $r1 = specialinvoke r0.<com.facebook.internal.instrument.InstrumentData: org.json.JSONObject getParameters()>()
<com.facebook.internal.instrument.InstrumentData: org.json.JSONObject getParameters()>: $r3 = specialinvoke r0.<com.facebook.internal.instrument.InstrumentData: org.json.JSONObject getExceptionReportParameters()>()
<com.facebook.internal.instrument.InstrumentData: org.json.JSONObject getExceptionReportParameters()>: $r3 = <android.os.Build$VERSION: java.lang.String RELEASE>
<com.facebook.internal.instrument.InstrumentData: org.json.JSONObject getExceptionReportParameters()>: virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("device_os_version", $r3)
<com.facebook.internal.instrument.InstrumentData: org.json.JSONObject getExceptionReportParameters()>: return $r2
<com.facebook.internal.instrument.InstrumentData: org.json.JSONObject getParameters()>: return $r3
<com.facebook.internal.instrument.InstrumentData: java.lang.String toString()>: $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String toString()>()
<com.facebook.internal.instrument.InstrumentData: java.lang.String toString()>: return $r2
<com.facebook.internal.instrument.InstrumentData: void save()>: staticinvoke <com.facebook.internal.instrument.InstrumentUtility: void writeFile(java.lang.String,java.lang.String)>($r1, $r2)
<com.facebook.internal.instrument.InstrumentUtility: void writeFile(java.lang.String,java.lang.String)>: $r7 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6)
<com.facebook.internal.instrument.InstrumentUtility: void writeFile(java.lang.String,java.lang.String)>: virtualinvoke $r5.<java.io.FileOutputStream: void write(byte[])>($r7)
