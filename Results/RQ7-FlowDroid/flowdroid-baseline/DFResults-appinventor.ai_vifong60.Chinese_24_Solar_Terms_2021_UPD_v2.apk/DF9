Source: $i2 = virtualinvoke $r1.<gnu.text.Lexer: int read()>()
$i2 = virtualinvoke $r1.<gnu.text.Lexer: int read()>() in <gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $i2 = virtualinvoke $r1.<gnu.text.Lexer: int read()>()
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $i1 = $i2
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $r5 = virtualinvoke r6.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>($r1, $i1, $i0)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>($i0)
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) $i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r1[i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r1 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r5 = $r1.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: specialinvoke $r9.<java.lang.String: void <init>(char[],int,int)>($r5, $i1, $i0)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r9
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r5
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object clarify1(java.lang.Object)>: $r3 = staticinvoke <kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>($r2, $r0)
<kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>: specialinvoke $r2.<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1)
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: r0.<gnu.lists.Pair: java.lang.Object car> = $r1
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: return
<kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>: return $r2
<com.google.youngandroid.runtime: java.lang.Object clarify1(java.lang.Object)>: return $r3
<com.google.youngandroid.runtime: java.lang.Object clarify1(java.lang.Object)>: $r3 = staticinvoke <kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>($r2, $r0)
<kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>: specialinvoke $r2.<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1)
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: r0.<gnu.lists.Pair: java.lang.Object cdr> = $r2
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: return
<kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>: return $r2
<com.google.youngandroid.runtime: java.lang.Object clarify1(java.lang.Object)>: return $r3
<com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
