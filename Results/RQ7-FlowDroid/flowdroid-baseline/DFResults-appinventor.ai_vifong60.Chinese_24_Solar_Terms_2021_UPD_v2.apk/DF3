Source: $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
$r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r5, $r2)
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: r1 = $r7
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>(r1)
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
<gnu.text.FilePath: void <init>(java.io.File)>: r0.<gnu.text.FilePath: java.io.File file> = $r1
<gnu.text.FilePath: void <init>(java.io.File)>: return
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: return $r1
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: return r0
<gnu.text.Path: gnu.text.Path resolve(gnu.text.Path)>: return r0
<gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>: return r1
<gnu.kawa.xml.KNode: gnu.text.Path baseURI()>: return $r1
<kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>: return $r2
<kawa.lib.misc: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.numbers: java.lang.Object divAndMod(gnu.math.RealNum,gnu.math.RealNum)>: $r0 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3)
<gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>: $r2 = staticinvoke <gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>($r0)
<gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>: $r4 = staticinvoke <gnu.math.RatNum: gnu.math.RatNum asRatNumOrNull(java.lang.Object)>(r0)
<gnu.math.RatNum: gnu.math.RatNum asRatNumOrNull(java.lang.Object)>: $r3 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>(r0)
<gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>()
<gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>: return r1
<gnu.math.RatNum: gnu.math.RatNum asRatNumOrNull(java.lang.Object)>: return $r3
<gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>: return $r4
<gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>: return $r2
<kawa.lib.numbers: java.lang.Object divAndMod(gnu.math.RealNum,gnu.math.RealNum)>: $r0 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3)
<gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>: throw $r3
<kawa.lib.numbers: java.lang.Object divAndMod(gnu.math.RealNum,gnu.math.RealNum)>: specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r9, "r", -2, $r3)
<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>: return
<kawa.lib.numbers: java.lang.Object divAndMod(gnu.math.RealNum,gnu.math.RealNum)>: $r3 = virtualinvoke $r6.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r4, $r1)
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>(r3)
<gnu.kawa.functions.DivideOp: java.lang.Object applyN(java.lang.Object[])>: r2 = $r1[0]
<gnu.kawa.functions.DivideOp: java.lang.Object applyN(java.lang.Object[])>: return r2
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: r3[1] = $r2
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.numbers: java.lang.Object divAndMod(gnu.math.RealNum,gnu.math.RealNum)>: $r0 := @parameter0: gnu.math.RealNum
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2)
<gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>: $r2 = staticinvoke <gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>($r0)
<gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>: r1 = (gnu.math.RealNum) r0
<gnu.math.RealNum: gnu.math.RealNum asRealNumOrNull(java.lang.Object)>: return r1
<gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>: return $r2
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: r0 := @this: gnu.expr.ModuleMethod
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r4 = virtualinvoke $r3.<gnu.lists.Pair: java.lang.Object getCar()>()
<gnu.lists.Pair: java.lang.Object getCar()>: r1 = r0.<gnu.lists.Pair: java.lang.Object car>
<gnu.lists.Pair: java.lang.Object getCar()>: r0 := @this: gnu.lists.Pair
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r3 = (gnu.lists.Pair) $r1
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: return $r1
<kawa.lib.lists: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleBody: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<com.google.youngandroid.runtime: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleBody: java.lang.Object apply0(gnu.expr.ModuleMethod)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<kawa.lib.misc: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<kawa.lib.numbers: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
