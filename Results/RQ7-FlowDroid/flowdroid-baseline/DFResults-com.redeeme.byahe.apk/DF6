Source: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
$i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in <gnu.mapping.TtyInPort: int fill(int)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.mapping.TtyInPort: int fill(int)>: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
<gnu.mapping.TtyInPort: int fill(int)>: $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
<gnu.mapping.TtyInPort: int fill(int)>: return $i0
<gnu.text.LineBufferedReader: int read()>: r0 := @this: gnu.text.LineBufferedReader
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: $r5 = r0.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader port>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: $r5 = r0.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader port>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: $i2 = virtualinvoke $r5.<gnu.text.LineBufferedReader: int peek()>()
<gnu.text.LineBufferedReader: int peek()>: return $i0
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: $r5 = r0.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader port>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: $r5 = r0.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader port>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: virtualinvoke $r5.<gnu.text.LineBufferedReader: int read()>()
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
