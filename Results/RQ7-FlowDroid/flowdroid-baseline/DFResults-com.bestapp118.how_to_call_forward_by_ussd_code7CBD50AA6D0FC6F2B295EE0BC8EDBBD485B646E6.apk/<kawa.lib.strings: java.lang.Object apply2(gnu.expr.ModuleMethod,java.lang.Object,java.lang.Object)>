    public java.lang.Object apply2(gnu.expr.ModuleMethod, java.lang.Object, java.lang.Object)
    {
        gnu.mapping.Values r14;
        gnu.expr.ModuleMethod $r1;
        java.lang.ClassCastException $r6, $r7, $r10, $r11, $r12;
        kawa.lib.strings r0;
        int $i0;
        java.lang.Boolean r13;
        java.lang.Number $r9;
        boolean $z0;
        java.lang.CharSequence $r8;
        char $c1;
        gnu.mapping.WrongType $r15;
        gnu.text.Char $r5;
        gnu.lists.CharSeq $r4;
        java.lang.Object $r2, $r3;

        r0 := @this: kawa.lib.strings;

        $r1 := @parameter0: gnu.expr.ModuleMethod;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $i0 = $r1.<gnu.expr.ModuleMethod: int selector>;

        if $i0 == 2 goto label22;

        if $i0 == 6 goto label17;

        if $i0 == 17 goto label12;

        lookupswitch($i0)
        {
            case 8: goto label10;
            case 9: goto label08;
            case 10: goto label06;
            case 11: goto label04;
            case 12: goto label02;
            default: goto label01;
        };

     label01:
        $r2 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r2, $r3);

        return $r2;

     label02:
        $z0 = staticinvoke <kawa.lib.strings: boolean isString$Gr$Eq(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label03;

        r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r13;

     label03:
        r13 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r13;

     label04:
        $z0 = staticinvoke <kawa.lib.strings: boolean isString$Ls$Eq(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label05;

        r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r13;

     label05:
        r13 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r13;

     label06:
        $z0 = staticinvoke <kawa.lib.strings: boolean isString$Gr(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label07;

        r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r13;

     label07:
        r13 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r13;

     label08:
        $z0 = staticinvoke <kawa.lib.strings: boolean isString$Ls(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label09;

        r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r13;

     label09:
        r13 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r13;

     label10:
        $z0 = staticinvoke <kawa.lib.strings: boolean isString$Eq(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label11;

        r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r13;

     label11:
        r13 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r13;

     label12:
        $r4 = (gnu.lists.CharSeq) $r2;

     label13:
        $r5 = (gnu.text.Char) $r3;

        $c1 = virtualinvoke $r5.<gnu.text.Char: char charValue()>();

     label14:
        staticinvoke <kawa.lib.strings: void stringFill$Ex(gnu.lists.CharSeq,char)>($r4, $c1);

        r14 = <gnu.mapping.Values: gnu.mapping.Values empty>;

        return r14;

     label15:
        $r6 := @caughtexception;

        $r15 = new gnu.mapping.WrongType;

        specialinvoke $r15.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r6, "string-fill!", 2, $r3);

        throw $r15;

     label16:
        $r7 := @caughtexception;

        $r15 = new gnu.mapping.WrongType;

        specialinvoke $r15.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r7, "string-fill!", 1, $r2);

        throw $r15;

     label17:
        $r8 = (java.lang.CharSequence) $r2;

     label18:
        $r9 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r9.<java.lang.Number: int intValue()>();

     label19:
        $c1 = staticinvoke <kawa.lib.strings: char stringRef(java.lang.CharSequence,int)>($r8, $i0);

        $i0 = (int) $c1;

        $r5 = staticinvoke <gnu.text.Char: gnu.text.Char make(int)>($i0);

        return $r5;

     label20:
        $r10 := @caughtexception;

        $r15 = new gnu.mapping.WrongType;

        specialinvoke $r15.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r10, "string-ref", 2, $r3);

        throw $r15;

     label21:
        $r11 := @caughtexception;

        $r15 = new gnu.mapping.WrongType;

        specialinvoke $r15.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r11, "string-ref", 1, $r2);

        throw $r15;

     label22:
        $r9 = (java.lang.Number) $r2;

        $i0 = virtualinvoke $r9.<java.lang.Number: int intValue()>();

     label23:
        $r8 = staticinvoke <kawa.lib.strings: java.lang.CharSequence makeString(int,java.lang.Object)>($i0, $r3);

        return $r8;

     label24:
        $r12 := @caughtexception;

        $r15 = new gnu.mapping.WrongType;

        specialinvoke $r15.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r12, "make-string", 1, $r2);

        throw $r15;

        catch java.lang.ClassCastException from label12 to label13 with label16;
        catch java.lang.ClassCastException from label13 to label14 with label15;
        catch java.lang.ClassCastException from label17 to label18 with label21;
        catch java.lang.ClassCastException from label18 to label19 with label20;
        catch java.lang.ClassCastException from label22 to label23 with label24;
    }
