    public java.lang.Object apply2(gnu.expr.ModuleMethod, java.lang.Object, java.lang.Object)
    {
        gnu.expr.ModuleMethod $r1;
        gnu.math.Quantity $r14;
        gnu.math.IntNum $r21, $r22;
        boolean $z0;
        java.lang.CharSequence $r15;
        gnu.mapping.WrongType $r7;
        gnu.math.Complex $r11;
        gnu.math.DComplex $r5;
        java.lang.Double $r27;
        java.lang.ClassCastException $r6, $r8, $r12, $r13, $r16, $r17, $r19, $r20, $r23, $r24, $r25, $r26, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35;
        gnu.math.RealNum $r9, $r10;
        int $i0;
        kawa.lib.numbers r0;
        java.lang.Boolean r36;
        java.lang.Number $r4, $r18;
        double $d0, $d1;
        java.lang.Object $r2, $r3;

        r0 := @this: kawa.lib.numbers;

        $r1 := @parameter0: gnu.expr.ModuleMethod;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $i0 = $r1.<gnu.expr.ModuleMethod: int selector>;

        if $i0 == 15 goto label49;

        if $i0 == 16 goto label44;

        if $i0 == 25 goto label39;

        if $i0 == 33 goto label34;

        if $i0 == 48 goto label28;

        if $i0 == 53 goto label22;

        if $i0 == 60 goto label17;

        if $i0 == 62 goto label12;

        if $i0 == 66 goto label11;

        if $i0 == 37 goto label06;

        if $i0 == 38 goto label01;

        $r2 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r2, $r3);

        return $r2;

     label01:
        $r4 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

     label02:
        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

     label03:
        $r5 = staticinvoke <kawa.lib.numbers: gnu.math.DComplex makePolar(double,double)>($d0, $d1);

        return $r5;

     label04:
        $r6 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r6, "make-polar", 2, $r3);

        throw $r7;

     label05:
        $r8 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r8, "make-polar", 1, $r2);

        throw $r7;

     label06:
        $r9 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label07:
        $r10 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3);

     label08:
        $r11 = staticinvoke <kawa.lib.numbers: gnu.math.Complex makeRectangular(gnu.math.RealNum,gnu.math.RealNum)>($r9, $r10);

        return $r11;

     label09:
        $r12 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r12, "make-rectangular", 2, $r3);

        throw $r7;

     label10:
        $r13 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r13, "make-rectangular", 1, $r2);

        throw $r7;

     label11:
        $r14 = staticinvoke <kawa.lib.numbers: gnu.math.Quantity makeQuantity(java.lang.Object,java.lang.Object)>($r2, $r3);

        return $r14;

     label12:
        $r15 = (java.lang.CharSequence) $r2;

     label13:
        $r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

     label14:
        $r2 = staticinvoke <kawa.lib.numbers: java.lang.Object string$To$Number(java.lang.CharSequence,int)>($r15, $i0);

        return $r2;

     label15:
        $r16 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r16, "string->number", 2, $r3);

        throw $r7;

     label16:
        $r17 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r17, "string->number", 1, $r2);

        throw $r7;

     label17:
        $r4 = (java.lang.Number) $r2;

     label18:
        $r18 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r18.<java.lang.Number: int intValue()>();

     label19:
        $r15 = staticinvoke <kawa.lib.numbers: java.lang.CharSequence number$To$String(java.lang.Number,int)>($r4, $i0);

        return $r15;

     label20:
        $r19 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r19, "number->string", 2, $r3);

        throw $r7;

     label21:
        $r20 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r20, "number->string", 1, $r2);

        throw $r7;

     label22:
        $r21 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label23:
        $r22 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r3);

     label24:
        $z0 = staticinvoke <kawa.lib.numbers: boolean logtest(gnu.math.IntNum,gnu.math.IntNum)>($r21, $r22);

        if $z0 == 0 goto label25;

        r36 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r36;

     label25:
        r36 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r36;

     label26:
        $r23 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r23, "logtest", 2, $r3);

        throw $r7;

     label27:
        $r24 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r24, "logtest", 1, $r2);

        throw $r7;

     label28:
        $r21 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label29:
        $r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

     label30:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isBitwiseBitSet(gnu.math.IntNum,int)>($r21, $i0);

        if $z0 == 0 goto label31;

        r36 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r36;

     label31:
        r36 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r36;

     label32:
        $r25 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r25, "bitwise-bit-set?", 2, $r3);

        throw $r7;

     label33:
        $r26 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r26, "bitwise-bit-set?", 1, $r2);

        throw $r7;

     label34:
        $r4 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

     label35:
        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

     label36:
        $d0 = staticinvoke <kawa.lib.numbers: double lambda1(double,double)>($d0, $d1);

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r27;

     label37:
        $r28 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r28, "lambda", 2, $r3);

        throw $r7;

     label38:
        $r29 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r29, "lambda", 1, $r2);

        throw $r7;

     label39:
        $r9 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label40:
        $r10 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3);

     label41:
        $r9 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum rationalize(gnu.math.RealNum,gnu.math.RealNum)>($r9, $r10);

        return $r9;

     label42:
        $r30 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r30, "rationalize", 2, $r3);

        throw $r7;

     label43:
        $r31 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r31, "rationalize", 1, $r2);

        throw $r7;

     label44:
        $r9 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label45:
        $r10 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3);

     label46:
        $r2 = staticinvoke <kawa.lib.numbers: java.lang.Object div0AndMod0(gnu.math.RealNum,gnu.math.RealNum)>($r9, $r10);

        return $r2;

     label47:
        $r32 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r32, "div0-and-mod0", 2, $r3);

        throw $r7;

     label48:
        $r33 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r33, "div0-and-mod0", 1, $r2);

        throw $r7;

     label49:
        $r9 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label50:
        $r10 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r3);

     label51:
        $r2 = staticinvoke <kawa.lib.numbers: java.lang.Object divAndMod(gnu.math.RealNum,gnu.math.RealNum)>($r9, $r10);

        return $r2;

     label52:
        $r34 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r34, "div-and-mod", 2, $r3);

        throw $r7;

     label53:
        $r35 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r35, "div-and-mod", 1, $r2);

        throw $r7;

        catch java.lang.ClassCastException from label01 to label02 with label05;
        catch java.lang.ClassCastException from label02 to label03 with label04;
        catch java.lang.ClassCastException from label06 to label07 with label10;
        catch java.lang.ClassCastException from label07 to label08 with label09;
        catch java.lang.ClassCastException from label12 to label13 with label16;
        catch java.lang.ClassCastException from label13 to label14 with label15;
        catch java.lang.ClassCastException from label17 to label18 with label21;
        catch java.lang.ClassCastException from label18 to label19 with label20;
        catch java.lang.ClassCastException from label22 to label23 with label27;
        catch java.lang.ClassCastException from label23 to label24 with label26;
        catch java.lang.ClassCastException from label28 to label29 with label33;
        catch java.lang.ClassCastException from label29 to label30 with label32;
        catch java.lang.ClassCastException from label34 to label35 with label38;
        catch java.lang.ClassCastException from label35 to label36 with label37;
        catch java.lang.ClassCastException from label39 to label40 with label43;
        catch java.lang.ClassCastException from label40 to label41 with label42;
        catch java.lang.ClassCastException from label44 to label45 with label48;
        catch java.lang.ClassCastException from label45 to label46 with label47;
        catch java.lang.ClassCastException from label49 to label50 with label53;
        catch java.lang.ClassCastException from label50 to label51 with label52;
    }
