Source: $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
$r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
Sink: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r5, $r1)
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r3 = $r7
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>($r3)
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
<gnu.text.FilePath: void <init>(java.io.File)>: r0.<gnu.text.FilePath: java.io.File file> = $r2
<gnu.text.FilePath: void <init>(java.io.File)>: return
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: return $r1
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: return r0
<gnu.text.Path: gnu.text.Path resolve(gnu.text.Path)>: return r0
<gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>: return $r5
<gnu.kawa.xml.KNode: gnu.text.Path baseURI()>: return $r1
<kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>: return $r2
<kawa.lib.misc: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r5
<gnu.mapping.TtyInPort: void lineStart(boolean)>: return
<gnu.text.LineBufferedReader: int read()>: return -1
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.mapping.TtyInPort: int read()>: r0 := @this: gnu.mapping.TtyInPort
<gnu.text.LineBufferedReader: int read()>: $z0 = virtualinvoke r0.<gnu.text.LineBufferedReader: boolean getConvertCR()>()
<gnu.text.LineBufferedReader: boolean getConvertCR()>: return 1
<gnu.text.LineBufferedReader: int read()>: $r1 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int read()>: specialinvoke r0.<gnu.text.LineBufferedReader: void reserve(char[],int)>($r1, 1)
<gnu.text.LineBufferedReader: void reserve(char[],int)>: r0.<gnu.text.LineBufferedReader: char[] buffer> = $r1
<gnu.text.LineBufferedReader: void reserve(char[],int)>: return
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: return
<gnu.text.LineBufferedReader: int read()>: $i2 = virtualinvoke r0.<gnu.text.LineBufferedReader: int fill(int)>($i2)
<gnu.mapping.TtyInPort: int fill(int)>: return $i0
<gnu.text.LineBufferedReader: int read()>: $r1 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int read()>: specialinvoke r0.<gnu.text.LineBufferedReader: void reserve(char[],int)>($r1, 1)
<gnu.text.LineBufferedReader: void reserve(char[],int)>: r0.<gnu.text.LineBufferedReader: char[] buffer> = $r1
<gnu.text.LineBufferedReader: void reserve(char[],int)>: return
<gnu.text.LineBufferedReader: int read()>: r0 := @this: gnu.text.LineBufferedReader
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: $r4 = r0.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader port>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: r0 := @this: gnu.kawa.lispexpr.LispReader
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: r0 := @this: gnu.kawa.lispexpr.LispReader
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: specialinvoke $r1.<gnu.kawa.lispexpr.LispReader: void <init>(gnu.text.LineBufferedReader)>($r0)
<gnu.kawa.lispexpr.LispReader: void <init>(gnu.text.LineBufferedReader)>: specialinvoke r0.<gnu.text.Lexer: void <init>(gnu.text.LineBufferedReader)>($r1)
<gnu.text.Lexer: void <init>(gnu.text.LineBufferedReader)>: r0.<gnu.text.Lexer: gnu.text.LineBufferedReader port> = $r1
<gnu.text.Lexer: void <init>(gnu.text.LineBufferedReader)>: r0 := @this: gnu.text.Lexer
<gnu.kawa.lispexpr.LispReader: void <init>(gnu.text.LineBufferedReader)>: return
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: $r0 := @parameter0: gnu.mapping.InPort
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r5 = (gnu.mapping.InPort) $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r6, "read", 1, $r2)
<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>: return
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r5 = (gnu.mapping.InPort) $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r5 = (gnu.mapping.InPort) $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.ports: java.lang.Object lambda1(java.lang.Object)>($r2)
<kawa.lib.ports: java.lang.Object lambda1(java.lang.Object)>: $r1 = staticinvoke <gnu.mapping.WrongType: gnu.mapping.WrongType make(java.lang.ClassCastException,gnu.mapping.Procedure,int,java.lang.Object)>($r4, $r0, 1, $r2)
<gnu.mapping.WrongType: gnu.mapping.WrongType make(java.lang.ClassCastException,gnu.mapping.Procedure,int,java.lang.Object)>: return $r3
<kawa.lib.ports: java.lang.Object lambda1(java.lang.Object)>: $r3 = (gnu.mapping.InPort) $r2
<kawa.lib.ports: java.lang.Object lambda1(java.lang.Object)>: return $r3
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r1
<kawa.lib.numbers: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r3 = r0.<gnu.kawa.functions.NamedPart: java.lang.Object container>
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: throw $r13
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = r0.<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2)
