Source: $i0 = virtualinvoke $r2.<gnu.text.LineBufferedReader: int read()>()
$i0 = virtualinvoke $r2.<gnu.text.LineBufferedReader: int read()>() in <gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>
Sink: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1) in <gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>

<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $i0 = virtualinvoke $r2.<gnu.text.LineBufferedReader: int read()>()
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>($i0)
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $r1[$i1] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: $r1 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r5 = $r1.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: specialinvoke $r8.<java.lang.String: void <init>(char[],int,int)>($r5, $i1, $i0)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r8
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r5
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: return
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.mapping.TtyInPort: int read()>: return $i0
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.mapping.TtyInPort: int read()>: r0 := @this: gnu.mapping.TtyInPort
<gnu.text.LineBufferedReader: int read()>: $z0 = virtualinvoke r0.<gnu.text.LineBufferedReader: boolean getConvertCR()>()
<gnu.text.LineBufferedReader: boolean getConvertCR()>: return 1
<gnu.text.LineBufferedReader: int read()>: $r1 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int read()>: specialinvoke r0.<gnu.text.LineBufferedReader: void reserve(char[],int)>($r1, 1)
<gnu.text.LineBufferedReader: void reserve(char[],int)>: r0.<gnu.text.LineBufferedReader: char[] buffer> = $r1
<gnu.text.LineBufferedReader: void reserve(char[],int)>: return
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: return
<gnu.text.LineBufferedReader: int read()>: $i2 = virtualinvoke r0.<gnu.text.LineBufferedReader: int fill(int)>($i2)
<gnu.mapping.TtyInPort: int fill(int)>: return $i0
<gnu.text.LineBufferedReader: int read()>: $r1 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int read()>: specialinvoke r0.<gnu.text.LineBufferedReader: void reserve(char[],int)>($r1, 1)
<gnu.text.LineBufferedReader: void reserve(char[],int)>: r0.<gnu.text.LineBufferedReader: char[] buffer> = $r1
<gnu.text.LineBufferedReader: void reserve(char[],int)>: return
<gnu.text.LineBufferedReader: int read()>: r0 := @this: gnu.text.LineBufferedReader
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: $r4 = r0.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader port>
<gnu.kawa.lispexpr.LispReader: java.lang.Object handlePostfix(java.lang.Object,gnu.kawa.lispexpr.ReadTable,int,int)>: r0 := @this: gnu.kawa.lispexpr.LispReader
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: r0 := @this: gnu.kawa.lispexpr.LispReader
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: specialinvoke $r1.<gnu.kawa.lispexpr.LispReader: void <init>(gnu.text.LineBufferedReader)>($r0)
<gnu.kawa.lispexpr.LispReader: void <init>(gnu.text.LineBufferedReader)>: specialinvoke r0.<gnu.text.Lexer: void <init>(gnu.text.LineBufferedReader)>($r1)
<gnu.text.Lexer: void <init>(gnu.text.LineBufferedReader)>: r0.<gnu.text.Lexer: gnu.text.LineBufferedReader port> = $r1
<gnu.text.Lexer: void <init>(gnu.text.LineBufferedReader)>: r0 := @this: gnu.text.Lexer
<gnu.kawa.lispexpr.LispReader: void <init>(gnu.text.LineBufferedReader)>: return
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: $r0 := @parameter0: gnu.mapping.InPort
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r5 = (gnu.mapping.InPort) $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r6, "read", 1, $r2)
<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>: return
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r5 = (gnu.mapping.InPort) $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r5 = (gnu.mapping.InPort) $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.ports: java.lang.Object lambda1(java.lang.Object)>($r2)
<kawa.lib.ports: java.lang.Object lambda1(java.lang.Object)>: $r1 = staticinvoke <gnu.mapping.WrongType: gnu.mapping.WrongType make(java.lang.ClassCastException,gnu.mapping.Procedure,int,java.lang.Object)>($r4, $r0, 1, $r2)
<gnu.mapping.WrongType: gnu.mapping.WrongType make(java.lang.ClassCastException,gnu.mapping.Procedure,int,java.lang.Object)>: return $r3
<kawa.lib.ports: java.lang.Object lambda1(java.lang.Object)>: $r3 = (gnu.mapping.InPort) $r2
<kawa.lib.ports: java.lang.Object lambda1(java.lang.Object)>: return $r3
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r1
<kawa.lib.numbers: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r3 = r0.<gnu.kawa.functions.NamedPart: java.lang.Object container>
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: throw $r13
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: r0 := @this: gnu.mapping.ProcedureN
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r1 := @parameter0: java.lang.Object
<kawa.lib.lists: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: $r5 = (gnu.mapping.Procedure) $r4
<kawa.lib.lists: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: r0 := @this: kawa.lib.lists
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r3 = $r6[2]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r1 = $r6[0]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r1 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r5, $r1, $r2)
<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r4[0] = $r2
<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r4[1] = $r1
<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: r0 := @this: gnu.expr.ModuleBody
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r1 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r5, $r1, $r2)
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r22 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r3)
<gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>: $r2 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>($r0)
<gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>: $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>: return $r1
<gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>: throw $r3
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return r36
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r2 = $r6[1]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r1 = $r6[0]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r1 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r5, $r1, $r2)
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r4 = (java.lang.Number) $r2
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>()
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0)
<kawa.lib.numbers: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r27
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r1
<com.google.youngandroid.runtime: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r1
<kawa.lib.strings: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>()
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: $r4 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r4)
<com.google.youngandroid.runtime: java.lang.Object makeDisjunct(java.lang.Object)>: return $r4
<com.google.youngandroid.runtime: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: void apply(gnu.mapping.CallContext)>: virtualinvoke $r2.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r1)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
<gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>: interfaceinvoke $r0.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r1)
<gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1)
