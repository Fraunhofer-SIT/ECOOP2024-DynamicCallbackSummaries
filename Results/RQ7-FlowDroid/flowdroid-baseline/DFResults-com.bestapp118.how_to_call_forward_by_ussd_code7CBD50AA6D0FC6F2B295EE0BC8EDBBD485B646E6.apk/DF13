Source: $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
$i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>() in <gnu.text.Lexer: int read()>
Sink: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1) in <gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>

<gnu.text.Lexer: int read()>: $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
<gnu.text.Lexer: int read()>: return $i0
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $c3 = (char) $i2
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $i1 = staticinvoke <java.lang.Character: int digit(char,int)>($c3, 10)
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $i0 = $i1
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $r4 = virtualinvoke $r5.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>($r1, $i1, $i0)
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: virtualinvoke $r9.<gnu.kawa.util.GeneralHashTable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r6)
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r9 = $r2.<gnu.kawa.lispexpr.LispReader: gnu.kawa.util.GeneralHashTable sharedStructureTable>
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r2 = (gnu.kawa.lispexpr.LispReader) $r1
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r6 = virtualinvoke $r9.<gnu.kawa.util.GeneralHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r10, $r1)
<gnu.kawa.util.AbstractHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>: return $r2
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r6
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r4
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r8 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r7, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke $r1.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>(r0, $i1, -1)
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: r23 = <java.lang.Boolean: java.lang.Boolean FALSE>
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: return r23
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readAndHandleToken(int,int,gnu.kawa.lispexpr.ReadTable)>: return $r9
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: throw $r6
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: return
<gnu.text.LineBufferedReader: int read()>: return -1
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.mapping.TtyInPort: int read()>: return $i0
<gnu.text.LineBufferedReader: int read()>: return $i0
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: return r5
<kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>: return $r3
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r3
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r0 = <java.lang.Boolean: java.lang.Boolean FALSE>
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: return $r0
<kawa.lib.lists: java.lang.Object apply3(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply3(java.lang.Object,java.lang.Object,java.lang.Object)>: return $r4
<gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>: virtualinvoke $r0.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: return
<gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>: $r3 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r3, $r4)
<gnu.expr.ModuleMethod: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r3 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>(r0, $r3, $r1)
<kawa.lib.lists: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object)>($r2, $r3)
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>($r2, $r0, $r1)
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r5 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r1, $r5)
<gnu.expr.ModuleMethod: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r3 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>(r0, $r3, $r1)
<kawa.lib.strings: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r5 = (gnu.text.Char) $r3
<kawa.lib.strings: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: throw $r15
<gnu.expr.ModuleMethod: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: r0 := @this: gnu.expr.ModuleMethod
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r5 = virtualinvoke $r4.<gnu.lists.Pair: java.lang.Object getCar()>()
<gnu.lists.Pair: java.lang.Object getCar()>: r1 = r0.<gnu.lists.Pair: java.lang.Object car>
<gnu.lists.Pair: java.lang.Object getCar()>: return r1
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: $r4 = (gnu.lists.Pair) $r2
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object,gnu.mapping.Procedure)>: return $r2
<kawa.lib.lists: java.lang.Object member(java.lang.Object,java.lang.Object)>: return $r2
<kawa.lib.lists: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r3
<gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>: virtualinvoke $r0.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: return
<gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>: $r3 = virtualinvoke $r1.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>($r3)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: $r3 = virtualinvoke $r11.<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r3, $r8)
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r2 = virtualinvoke $r4.<gnu.bytecode.Type: java.lang.Object coerceFromObject(java.lang.Object)>($r1)
<gnu.bytecode.ObjectType: java.lang.Object coerceFromObject(java.lang.Object)>: $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>()
<gnu.bytecode.ObjectType: java.lang.Object coerceFromObject(java.lang.Object)>: return $r3
<gnu.kawa.functions.Convert: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r2
<gnu.kawa.functions.NamedPart: java.lang.Object applyN(java.lang.Object[])>: return $r3
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>: virtualinvoke $r0.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
<gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>: interfaceinvoke $r0.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r1)
<gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1)
