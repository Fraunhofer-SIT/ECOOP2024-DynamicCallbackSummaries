Source: $i4 = virtualinvoke $r2.<gnu.text.LineBufferedReader: int read()>()
$i4 = virtualinvoke $r2.<gnu.text.LineBufferedReader: int read()>() in <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
Sink: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: $i4 = virtualinvoke $r2.<gnu.text.LineBufferedReader: int read()>()
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: $r5 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>($i4, $r4)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r2, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke $r1.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>(r0, $i1, -1)
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>($i1)
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $r1[$i1] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: $r1 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: r0 := @this: gnu.text.Lexer
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r2 = (gnu.kawa.lispexpr.LispReader) $r1
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r6 = virtualinvoke $r9.<gnu.kawa.util.GeneralHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r10, $r1)
<gnu.kawa.util.AbstractHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>: return $r2
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r6
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r5
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: return
<gnu.text.LineBufferedReader: int read()>: $z0 = virtualinvoke r0.<gnu.text.LineBufferedReader: boolean getConvertCR()>()
<gnu.text.LineBufferedReader: boolean getConvertCR()>: return 1
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.text.LineBufferedReader: int read()>: return $i0
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, $i1, $i2)
<gnu.text.LineBufferedReader: void readLine(java.lang.StringBuffer,char)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: specialinvoke $r3.<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>($r6, 0, $i2)
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: virtualinvoke $r1.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r2, 0)
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: r0.<gnu.lists.FString: char[] data> = $r2
<gnu.lists.FString: void <init>(java.lang.StringBuffer,int,int)>: return
<kawa.standard.read_line: java.lang.Object apply(gnu.text.LineBufferedReader,java.lang.String)>: return $r3
<kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader,gnu.mapping.Symbol)>: return $r3
<kawa.lib.ports: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r1
<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r1
<kawa.lib.strings: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r3
<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r1
<com.niotron.sajeednandargi.OnlineShoppingSweden.WebView$frame: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r2 = virtualinvoke $r1.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r2)
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r24 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum round(gnu.math.RealNum)>($r24)
<kawa.lib.numbers: gnu.math.RealNum round(gnu.math.RealNum)>: $r0 = virtualinvoke $r0.<gnu.math.RealNum: gnu.math.RealNum toInt(int)>($i0)
<gnu.math.RealNum: gnu.math.RealNum toInt(int)>: $d0 = virtualinvoke r0.<gnu.math.RealNum: double doubleValue()>()
<gnu.math.IntFraction: double doubleValue()>: return #NaN
<gnu.math.RealNum: gnu.math.RealNum toInt(int)>: $d0 = virtualinvoke r0.<gnu.math.RealNum: double doubleValue()>()
<gnu.math.IntFraction: double doubleValue()>: $r3 = r0.<gnu.math.IntFraction: gnu.math.IntNum den>
<gnu.math.IntFraction: double doubleValue()>: $r3 = r0.<gnu.math.IntFraction: gnu.math.IntNum den>
<gnu.math.IntFraction: double doubleValue()>: return #-Infinity
<gnu.math.RealNum: gnu.math.RealNum toInt(int)>: return $r1
<kawa.lib.numbers: gnu.math.RealNum round(gnu.math.RealNum)>: return $r0
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r24
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2)
