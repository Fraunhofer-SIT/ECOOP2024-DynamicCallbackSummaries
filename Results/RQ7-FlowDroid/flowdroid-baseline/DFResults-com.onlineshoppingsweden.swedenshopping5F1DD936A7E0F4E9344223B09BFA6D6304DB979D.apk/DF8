Source: $i1 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i0, $i1)
$i1 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i0, $i1) in <gnu.text.LineBufferedReader: int fill(int)>
Sink: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.LineBufferedReader: int fill(int)>: $i1 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i0, $i1)
<gnu.text.LineBufferedReader: int fill(int)>: $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int fill(int)>: r0 := @this: gnu.text.LineBufferedReader
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r2)
<gnu.kawa.functions.MultiplyOp: java.lang.Object applyN(java.lang.Object[])>: $r3 = virtualinvoke $r5.<gnu.math.Numeric: gnu.math.Numeric mul(java.lang.Object)>($r6)
<gnu.math.DQuantity: gnu.math.Numeric mul(java.lang.Object)>: $r5 = virtualinvoke $r5.<gnu.math.Numeric: gnu.math.Numeric mulReversed(gnu.math.Numeric)>(r0)
<gnu.math.Quantity: gnu.math.Numeric mulReversed(gnu.math.Numeric)>: r0 = staticinvoke <gnu.math.Quantity: gnu.math.Quantity times(gnu.math.Quantity,gnu.math.Quantity)>($r2, r0)
<gnu.math.Quantity: gnu.math.Quantity times(gnu.math.Quantity,gnu.math.Quantity)>: $r5 = virtualinvoke $r1.<gnu.math.Quantity: gnu.math.Complex number()>()
<gnu.math.Unit: gnu.math.Complex number()>: r0 := @this: gnu.math.Unit
<gnu.math.Quantity: gnu.math.Quantity times(gnu.math.Quantity,gnu.math.Quantity)>: $r3 = virtualinvoke $r1.<gnu.math.Quantity: gnu.math.Unit unit()>()
<gnu.math.BaseUnit: gnu.math.Unit unit()>: return r0
<gnu.math.Quantity: gnu.math.Quantity times(gnu.math.Quantity,gnu.math.Quantity)>: $r2 = staticinvoke <gnu.math.Unit: gnu.math.Unit times(gnu.math.Unit,gnu.math.Unit)>($r2, $r3)
<gnu.math.Unit: gnu.math.Unit times(gnu.math.Unit,gnu.math.Unit)>: return $r1
<gnu.math.Quantity: gnu.math.Quantity times(gnu.math.Quantity,gnu.math.Quantity)>: $r3 = virtualinvoke $r1.<gnu.math.Quantity: gnu.math.Unit unit()>()
<gnu.math.DQuantity: gnu.math.Unit unit()>: r1 = r0.<gnu.math.DQuantity: gnu.math.Unit unt>
<gnu.math.DQuantity: gnu.math.Unit unit()>: r0 := @this: gnu.math.DQuantity
<gnu.math.Quantity: gnu.math.Quantity times(gnu.math.Quantity,gnu.math.Quantity)>: $r0 := @parameter0: gnu.math.Quantity
<gnu.math.Quantity: gnu.math.Numeric mulReversed(gnu.math.Numeric)>: r0 := @this: gnu.math.Quantity
<gnu.math.DQuantity: gnu.math.Numeric mul(java.lang.Object)>: return $r5
<gnu.kawa.functions.MultiplyOp: java.lang.Object applyN(java.lang.Object[])>: return $r3
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2)
