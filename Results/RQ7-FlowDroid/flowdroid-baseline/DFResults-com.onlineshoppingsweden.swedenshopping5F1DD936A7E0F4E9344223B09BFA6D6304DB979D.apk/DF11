Source: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
$i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in <gnu.mapping.TtyInPort: int fill(int)>
Sink: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.mapping.TtyInPort: int fill(int)>: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
<gnu.mapping.TtyInPort: int fill(int)>: $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
<gnu.mapping.TtyInPort: int fill(int)>: r0 := @this: gnu.mapping.TtyInPort
<gnu.text.LineBufferedReader: int read()>: r0 := @this: gnu.text.LineBufferedReader
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r2 = virtualinvoke $r1.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r2)
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.ports: java.lang.Object inputPortLineNumber(gnu.text.LineBufferedReader)>($r3)
<kawa.lib.ports: java.lang.Object inputPortLineNumber(gnu.text.LineBufferedReader)>: $r4 = virtualinvoke $r0.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r1, $r4)
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r2 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r3)
<gnu.kawa.functions.DivideOp: java.lang.Object applyN(java.lang.Object[])>: $r3 = staticinvoke <gnu.kawa.functions.Arithmetic: java.math.BigInteger asBigInteger(java.lang.Object)>($r3)
<gnu.kawa.functions.Arithmetic: java.math.BigInteger asBigInteger(java.lang.Object)>: $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<gnu.kawa.functions.Arithmetic: java.math.BigInteger asBigInteger(java.lang.Object)>: specialinvoke $r1.<java.math.BigInteger: void <init>(java.lang.String)>($r2)
<gnu.kawa.functions.Arithmetic: java.math.BigInteger asBigInteger(java.lang.Object)>: return $r1
<gnu.kawa.functions.DivideOp: java.lang.Object applyN(java.lang.Object[])>: $r9 = staticinvoke <gnu.kawa.functions.Arithmetic: java.math.BigDecimal asBigDecimal(java.lang.Object)>($r3)
<gnu.kawa.functions.Arithmetic: java.math.BigDecimal asBigDecimal(java.lang.Object)>: $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<gnu.kawa.functions.Arithmetic: java.math.BigDecimal asBigDecimal(java.lang.Object)>: return $r1
<gnu.kawa.functions.DivideOp: java.lang.Object applyN(java.lang.Object[])>: $r3 = virtualinvoke r0.<gnu.kawa.functions.DivideOp: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r2, $r3)
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r2 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r3)
<gnu.kawa.functions.DivideOp: java.lang.Object applyN(java.lang.Object[])>: $r3 = virtualinvoke $r5.<gnu.math.Numeric: gnu.math.Numeric toInexact()>()
<gnu.math.Numeric: gnu.math.Numeric toInexact()>: return r0
<gnu.kawa.functions.DivideOp: java.lang.Object applyN(java.lang.Object[])>: $r15 = (java.lang.Number) $r3
<gnu.kawa.functions.DivideOp: java.lang.Object applyN(java.lang.Object[])>: $l6 = virtualinvoke $r15.<java.lang.Number: long longValue()>()
<gnu.kawa.functions.DivideOp: java.lang.Object applyN(java.lang.Object[])>: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6)
<gnu.kawa.functions.DivideOp: java.lang.Object applyN(java.lang.Object[])>: return $r3
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r2
<gnu.kawa.functions.DivideOp: java.lang.Object applyN(java.lang.Object[])>: return $r3
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r2
<kawa.lib.ports: java.lang.Object inputPortLineNumber(gnu.text.LineBufferedReader)>: return $r4
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2)
