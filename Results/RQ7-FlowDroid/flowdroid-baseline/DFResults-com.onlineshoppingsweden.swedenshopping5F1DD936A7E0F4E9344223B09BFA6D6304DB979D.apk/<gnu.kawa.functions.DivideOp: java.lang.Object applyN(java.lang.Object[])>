    public java.lang.Object applyN(java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Object[] $r1;
        long $l6, $l7;
        gnu.math.RatNum $r13;
        java.math.BigDecimal $r9, $r10;
        byte $b5;
        gnu.math.RealNum $r8;
        int $i0, $i1, $i2, $i3, $i4, $i8, $i9;
        gnu.math.IntNum $r2, $r12;
        java.lang.Number $r15;
        boolean $z0;
        double $d0, $d1, $d2;
        java.math.RoundingMode $r11;
        java.math.MathContext $r14;
        gnu.kawa.functions.DivideOp r0;
        gnu.math.Numeric $r5, $r6, $r7;
        float $f0;
        java.lang.Object $r3, $r4;

        r0 := @this: gnu.kawa.functions.DivideOp;

        $r1 := @parameter0: java.lang.Object[];

        $i0 = lengthof $r1;

        if $i0 != 0 goto label01;

        $r2 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum one()>();

        return $r2;

     label01:
        $r3 = $r1[0];

        $r3 = (java.lang.Number) $r3;

        if $i0 != 1 goto label02;

        $r2 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum one()>();

        $r3 = virtualinvoke r0.<gnu.kawa.functions.DivideOp: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r2, $r3);

        return $r3;

     label02:
        $i2 = staticinvoke <gnu.kawa.functions.Arithmetic: int classifyValue(java.lang.Object)>($r3);

        $i1 = 1;

     label03:
        if $i1 >= $i0 goto label54;

        $r4 = $r1[$i1];

        $i3 = staticinvoke <gnu.kawa.functions.Arithmetic: int classifyValue(java.lang.Object)>($r4);

        if $i2 >= $i3 goto label04;

        $i2 = $i3;

     label04:
        if $i2 >= 4 goto label07;

        $i3 = r0.<gnu.kawa.functions.DivideOp: int op>;

        if $i3 == 4 goto label05;

        if $i3 == 5 goto label05;

        $i3 = r0.<gnu.kawa.functions.DivideOp: int rounding_mode>;

        if $i3 != 3 goto label06;

        if $i2 == 1 goto label07;

        if $i2 != 2 goto label06;

        goto label07;

     label05:
        $i2 = 4;

     label06:
        $i3 = 4;

        goto label08;

     label07:
        $i3 = $i2;

     label08:
        $i4 = r0.<gnu.kawa.functions.DivideOp: int op>;

        if $i4 != 5 goto label10;

        if $i2 > 10 goto label10;

        if $i2 == 8 goto label09;

        if $i2 == 7 goto label09;

        $i2 = 9;

     label09:
        $i3 = 10;

        goto label13;

     label10:
        if $i3 == 8 goto label11;

        if $i3 != 7 goto label13;

     label11:
        $i3 = r0.<gnu.kawa.functions.DivideOp: int op>;

        if $i3 != 7 goto label12;

        $i2 = 9;

     label12:
        $i3 = 9;

     label13:
        if $i3 == 1 goto label45;

        if $i3 == 2 goto label42;

        if $i3 == 4 goto label36;

        if $i3 == 5 goto label25;

        if $i3 == 9 goto label19;

        $r5 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.Numeric asNumeric(java.lang.Object)>($r3);

        $r6 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.Numeric asNumeric(java.lang.Object)>($r4);

        $i4 = r0.<gnu.kawa.functions.DivideOp: int op>;

        if $i4 != 8 goto label15;

        $z0 = virtualinvoke $r6.<gnu.math.Numeric: boolean isZero()>();

        if $z0 == 0 goto label15;

        $z0 = virtualinvoke $r6.<gnu.math.Numeric: boolean isExact()>();

        if $z0 == 0 goto label14;

        return $r5;

     label14:
        $r5 = virtualinvoke $r5.<gnu.math.Numeric: gnu.math.Numeric toInexact()>();

        return $r5;

     label15:
        $r7 = virtualinvoke $r5.<gnu.math.Numeric: gnu.math.Numeric div(java.lang.Object)>($r6);

        $r3 = $r7;

        $i4 = r0.<gnu.kawa.functions.DivideOp: int op>;

        if $i4 != 8 goto label16;

        $r8 = (gnu.math.RealNum) $r7;

        $i4 = virtualinvoke r0.<gnu.kawa.functions.DivideOp: int getRoundingMode()>();

        $r8 = virtualinvoke $r8.<gnu.math.RealNum: gnu.math.RealNum toInt(int)>($i4);

        $r6 = virtualinvoke $r8.<gnu.math.RealNum: gnu.math.Numeric mul(java.lang.Object)>($r6);

        $r3 = virtualinvoke $r5.<gnu.math.Numeric: gnu.math.Numeric sub(java.lang.Object)>($r6);

     label16:
        $i4 = r0.<gnu.kawa.functions.DivideOp: int op>;

        if $i4 == 5 goto label18;

        if $i4 == 6 goto label17;

        if $i4 != 7 goto label48;

        $r8 = (gnu.math.RealNum) $r3;

        $i2 = r0.<gnu.kawa.functions.DivideOp: int rounding_mode>;

        $r3 = virtualinvoke $r8.<gnu.math.RealNum: gnu.math.IntNum toExactInt(int)>($i2);

        $i2 = 4;

        $i3 = 4;

        goto label48;

     label17:
        $r8 = (gnu.math.RealNum) $r3;

        $i4 = r0.<gnu.kawa.functions.DivideOp: int rounding_mode>;

        $r3 = virtualinvoke $r8.<gnu.math.RealNum: gnu.math.RealNum toInt(int)>($i4);

        goto label48;

     label18:
        $r5 = (gnu.math.Numeric) $r3;

        $r3 = virtualinvoke $r5.<gnu.math.Numeric: gnu.math.Numeric toInexact()>();

        goto label48;

     label19:
        $d0 = staticinvoke <gnu.kawa.functions.Arithmetic: double asDouble(java.lang.Object)>($r3);

        $d1 = $d0;

        $d2 = staticinvoke <gnu.kawa.functions.Arithmetic: double asDouble(java.lang.Object)>($r4);

        $i4 = r0.<gnu.kawa.functions.DivideOp: int op>;

        lookupswitch($i4)
        {
            case 4: goto label24;
            case 5: goto label24;
            case 6: goto label23;
            case 7: goto label22;
            case 8: goto label20;
            default: goto label48;
        };

     label20:
        $b5 = $d2 cmpl 0.0;

        if $b5 == 0 goto label21;

        $d1 = $d0 / $d2;

        $i4 = virtualinvoke r0.<gnu.kawa.functions.DivideOp: int getRoundingMode()>();

        $d1 = staticinvoke <gnu.math.RealNum: double toInt(double,int)>($d1, $i4);

        $d2 = $d1 * $d2;

        $d1 = $d0 - $d2;

     label21:
        $r3 = staticinvoke <gnu.math.DFloNum: gnu.math.DFloNum make(double)>($d1);

        goto label48;

     label22:
        $d0 = $d0 / $d2;

        $i2 = virtualinvoke r0.<gnu.kawa.functions.DivideOp: int getRoundingMode()>();

        $r3 = staticinvoke <gnu.math.RealNum: gnu.math.IntNum toExactInt(double,int)>($d0, $i2);

        $i2 = 4;

        $i3 = 4;

        goto label48;

     label23:
        $d0 = $d0 / $d2;

        $i4 = virtualinvoke r0.<gnu.kawa.functions.DivideOp: int getRoundingMode()>();

        $d0 = staticinvoke <gnu.math.RealNum: double toInt(double,int)>($d0, $i4);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        goto label48;

     label24:
        $d0 = $d0 / $d2;

        $r3 = staticinvoke <gnu.math.DFloNum: gnu.math.DFloNum make(double)>($d0);

        goto label48;

     label25:
        $r9 = staticinvoke <gnu.kawa.functions.Arithmetic: java.math.BigDecimal asBigDecimal(java.lang.Object)>($r3);

        $r10 = staticinvoke <gnu.kawa.functions.Arithmetic: java.math.BigDecimal asBigDecimal(java.lang.Object)>($r4);

        $i4 = virtualinvoke r0.<gnu.kawa.functions.DivideOp: int getRoundingMode()>();

        if $i4 == 1 goto label30;

        if $i4 == 2 goto label29;

        if $i4 == 3 goto label28;

        if $i4 != 5 goto label27;

        $i4 = virtualinvoke $r10.<java.math.BigDecimal: int signum()>();

        if $i4 >= 0 goto label26;

        $r11 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        goto label27;

     label26:
        $r11 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;

     label27:
        $r11 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        goto label31;

     label28:
        $r11 = <java.math.RoundingMode: java.math.RoundingMode DOWN>;

        goto label31;

     label29:
        $r11 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        goto label31;

     label30:
        $r11 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;

     label31:
        $r14 = new java.math.MathContext;

        specialinvoke $r14.<java.math.MathContext: void <init>(int,java.math.RoundingMode)>(0, $r11);

        $i4 = r0.<gnu.kawa.functions.DivideOp: int op>;

        if $i4 == 4 goto label35;

        if $i4 == 6 goto label34;

        if $i4 == 7 goto label33;

        if $i4 != 8 goto label48;

     label32:
        virtualinvoke $r9.<java.math.BigDecimal: java.math.BigDecimal remainder(java.math.BigDecimal,java.math.MathContext)>($r10, $r14);

        goto label32;

     label33:
        $r9 = virtualinvoke $r9.<java.math.BigDecimal: java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal,java.math.MathContext)>($r10, $r14);

        $r3 = virtualinvoke $r9.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        $i2 = 3;

        $i3 = 3;

        goto label48;

     label34:
        virtualinvoke $r9.<java.math.BigDecimal: java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal,java.math.MathContext)>($r10, $r14);

        goto label32;

     label35:
        virtualinvoke $r9.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal)>($r10);

        goto label32;

     label36:
        $i4 = r0.<gnu.kawa.functions.DivideOp: int op>;

        if $i4 == 4 goto label39;

        if $i4 == 6 goto label38;

        if $i4 == 7 goto label38;

        if $i4 != 8 goto label48;

     label37:
        $r2 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.IntNum asIntNum(java.lang.Object)>($r3);

        $r12 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.IntNum asIntNum(java.lang.Object)>($r4);

        $i4 = virtualinvoke r0.<gnu.kawa.functions.DivideOp: int getRoundingMode()>();

        $r3 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum remainder(gnu.math.IntNum,gnu.math.IntNum,int)>($r2, $r12, $i4);

        goto label37;

     label38:
        $r2 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.IntNum asIntNum(java.lang.Object)>($r3);

        $r12 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.IntNum asIntNum(java.lang.Object)>($r4);

        $i4 = virtualinvoke r0.<gnu.kawa.functions.DivideOp: int getRoundingMode()>();

        $r3 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum quotient(gnu.math.IntNum,gnu.math.IntNum,int)>($r2, $r12, $i4);

        goto label37;

     label39:
        $r2 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.IntNum asIntNum(java.lang.Object)>($r3);

        $r12 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.IntNum asIntNum(java.lang.Object)>($r4);

        $r13 = staticinvoke <gnu.math.RatNum: gnu.math.RatNum make(gnu.math.IntNum,gnu.math.IntNum)>($r2, $r12);

        $r3 = $r13;

        $z0 = $r13 instanceof gnu.math.IntNum;

        if $z0 == 0 goto label40;

        $i3 = 4;

        goto label41;

     label40:
        $i3 = 6;

     label41:
        $i2 = $i3;

        goto label48;

     label42:
        $l6 = staticinvoke <gnu.kawa.functions.Arithmetic: long asLong(java.lang.Object)>($r3);

        $l7 = staticinvoke <gnu.kawa.functions.Arithmetic: long asLong(java.lang.Object)>($r4);

        $i4 = r0.<gnu.kawa.functions.DivideOp: int op>;

        if $i4 == 8 goto label43;

        $l6 = $l6 / $l7;

        goto label44;

     label43:
        $l6 = $l6 % $l7;

     label44:
        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        goto label48;

     label45:
        $i4 = staticinvoke <gnu.kawa.functions.Arithmetic: int asInt(java.lang.Object)>($r3);

        $i8 = staticinvoke <gnu.kawa.functions.Arithmetic: int asInt(java.lang.Object)>($r4);

        $i9 = r0.<gnu.kawa.functions.DivideOp: int op>;

        if $i9 == 8 goto label46;

        $i4 = $i4 / $i8;

        goto label47;

     label46:
        $i4 = $i4 % $i8;

     label47:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

     label48:
        if $i2 == $i3 goto label53;

        if $i2 == 1 goto label52;

        if $i2 == 2 goto label51;

        if $i2 == 3 goto label50;

        if $i2 == 7 goto label49;

        if $i2 != 8 goto label53;

        $r15 = (java.lang.Number) $r3;

        $d0 = virtualinvoke $r15.<java.lang.Number: double doubleValue()>();

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        goto label53;

     label49:
        $r15 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r15.<java.lang.Number: float floatValue()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        goto label53;

     label50:
        $r3 = staticinvoke <gnu.kawa.functions.Arithmetic: java.math.BigInteger asBigInteger(java.lang.Object)>($r3);

        goto label53;

     label51:
        $r15 = (java.lang.Number) $r3;

        $l6 = virtualinvoke $r15.<java.lang.Number: long longValue()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        goto label53;

     label52:
        $r15 = (java.lang.Number) $r3;

        $i3 = virtualinvoke $r15.<java.lang.Number: int intValue()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

     label53:
        $i1 = $i1 + 1;

        goto label03;

     label54:
        return $r3;
    }
