    public gnu.math.Numeric mul(java.lang.Object)
    {
        gnu.math.DQuantity r0, $r2;
        java.lang.IllegalArgumentException $r6;
        gnu.math.RealNum $r3;
        gnu.math.Numeric $r5;
        java.lang.Object $r1;
        boolean $z0;
        double $d0, $d1;
        gnu.math.Unit $r4;

        r0 := @this: gnu.math.DQuantity;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof gnu.math.DQuantity;

        if $z0 == 0 goto label1;

        $r2 = (gnu.math.DQuantity) $r1;

        r0 = staticinvoke <gnu.math.DQuantity: gnu.math.DQuantity times(gnu.math.DQuantity,gnu.math.DQuantity)>(r0, $r2);

        return r0;

     label1:
        $z0 = $r1 instanceof gnu.math.RealNum;

        if $z0 == 0 goto label2;

        $r2 = new gnu.math.DQuantity;

        $d0 = r0.<gnu.math.DQuantity: double factor>;

        $r3 = (gnu.math.RealNum) $r1;

        $d1 = virtualinvoke $r3.<gnu.math.RealNum: double doubleValue()>();

        $d0 = $d0 * $d1;

        $r4 = virtualinvoke r0.<gnu.math.DQuantity: gnu.math.Unit unit()>();

        specialinvoke $r2.<gnu.math.DQuantity: void <init>(double,gnu.math.Unit)>($d0, $r4);

        return $r2;

     label2:
        $z0 = $r1 instanceof gnu.math.Numeric;

        if $z0 == 0 goto label3;

        $r5 = (gnu.math.Numeric) $r1;

        $r5 = virtualinvoke $r5.<gnu.math.Numeric: gnu.math.Numeric mulReversed(gnu.math.Numeric)>(r0);

        return $r5;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;
    }
