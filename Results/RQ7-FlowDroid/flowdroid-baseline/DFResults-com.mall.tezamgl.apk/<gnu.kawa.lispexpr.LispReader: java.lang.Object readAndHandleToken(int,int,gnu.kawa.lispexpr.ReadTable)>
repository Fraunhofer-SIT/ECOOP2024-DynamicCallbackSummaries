    protected java.lang.Object readAndHandleToken(int, int, gnu.kawa.lispexpr.ReadTable) throws java.io.IOException, gnu.text.SyntaxException
    {
        gnu.kawa.lispexpr.ReadTable $r1;
        gnu.mapping.Symbol $r9;
        int $i0, $i1, $i3, i4, i5, i6, i7, i8, i9, $i11;
        gnu.kawa.lispexpr.ReadTableEntry $r7;
        java.lang.String $r5, r6, $r8;
        boolean $z0;
        gnu.kawa.lispexpr.LispReader r0;
        char $c2, c10;
        gnu.expr.Keyword $r10;
        char[] $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: gnu.kawa.lispexpr.LispReader;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: gnu.kawa.lispexpr.ReadTable;

        $c2 = staticinvoke <gnu.kawa.lispexpr.LispReader: char getReadCase()>();

        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>($i0, $c2, $r1);

        $i0 = r0.<gnu.kawa.lispexpr.LispReader: int tokenBufferLength>;

        $z0 = r0.<gnu.kawa.lispexpr.LispReader: boolean seenEscapes>;

        if $z0 != 0 goto label01;

        $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        $i3 = $i0 - $i1;

        $r3 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object parseNumber(char[],int,int,char,int,int)>($r2, $i1, $i3, 0, 0, 1);

        if $r3 == null goto label01;

        $z0 = $r3 instanceof java.lang.String;

        if $z0 != 0 goto label01;

        return $r3;

     label01:
        $c2 = staticinvoke <gnu.kawa.lispexpr.LispReader: char getReadCase()>();

        $i3 = $c2;

        i4 = (int) $c2;

        if i4 != 73 goto label07;

        $i3 = 0;

        i4 = 0;

        i5 = $i1;

     label02:
        if i5 >= $i0 goto label06;

        $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        $c2 = $r2[i5];

        i6 = (int) $c2;

        if i6 != 65535 goto label04;

        i5 = i5 + 1;

     label03:
        i5 = i5 + 1;

        goto label02;

     label04:
        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c2);

        if $z0 == 0 goto label05;

        i4 = i4 + 1;

        goto label03;

     label05:
        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c2);

        if $z0 == 0 goto label03;

        $i3 = $i3 + 1;

        goto label03;

     label06:
        if i4 != 0 goto label11;

        $i3 = 68;

     label07:
        i4 = $i1 + 2;

        if $i0 < i4 goto label13;

        $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        i4 = $i0 + -1;

        $c2 = $r2[i4];

        i4 = (int) $c2;

        if i4 != 125 goto label13;

        $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        i4 = $i0 + -2;

        $c2 = $r2[i4];

        i4 = (int) $c2;

        if i4 == 65535 goto label13;

        i4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int peek()>();

        if i4 != 58 goto label13;

        $z0 = 1;

     label08:
        i4 = -1;

        i5 = -1;

        i6 = -1;

        i7 = 0;

        i8 = $i1;

        i9 = $i1;

     label09:
        if i9 >= $i0 goto label23;

        $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        $c2 = $r2[i9];

        c10 = $c2;

        $i11 = (int) $c2;

        if $i11 != 65535 goto label14;

        i9 = i9 + 1;

        if i9 >= $i0 goto label10;

        $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        $i11 = i8;

        i8 = i8 + 1;

        $r4 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        $c2 = $r4[i9];

        $r2[$i11] = $c2;

     label10:
        i9 = i9 + 1;

        goto label09;

     label11:
        if $i3 != 0 goto label12;

        $i3 = 85;

        goto label07;

     label12:
        $i3 = 80;

        goto label07;

     label13:
        $z0 = 0;

        goto label08;

     label14:
        if $z0 == 0 goto label16;

        $i11 = (int) $c2;

        if $i11 != 123 goto label18;

        if i5 >= 0 goto label15;

        i5 = i8;

     label15:
        i7 = i7 + 1;

     label16:
        if i7 <= 0 goto label19;

     label17:
        $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        $i11 = i8;

        i8 = i8 + 1;

        $r2[$i11] = c10;

        goto label10;

     label18:
        $i11 = (int) $c2;

        if $i11 != 125 goto label16;

        i7 = i7 + -1;

        if i7 < 0 goto label16;

        if i7 != 0 goto label16;

        if i6 >= 0 goto label16;

        i6 = i8;

        goto label16;

     label19:
        $i11 = (int) $c2;

        if $i11 != 58 goto label21;

        if i4 < 0 goto label20;

        i4 = -1;

        goto label17;

     label20:
        i4 = i8;

        goto label17;

     label21:
        if $i3 != 85 goto label22;

        c10 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c2);

        goto label17;

     label22:
        if $i3 != 68 goto label17;

        c10 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c2);

        goto label17;

     label23:
        $i0 = i8;

        $i3 = i8 - $i1;

        if i5 < 0 goto label27;

        if i6 <= i5 goto label27;

        if i5 <= 0 goto label26;

        r6 = new java.lang.String;

        $r5 = r6;

        $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        $i0 = i5 - $i1;

        specialinvoke r6.<java.lang.String: void <init>(char[],int,int)>($r2, $i1, $i0);

     label24:
        r6 = $r5;

        $i0 = i5 + 1;

        $r8 = new java.lang.String;

        $r5 = $r8;

        $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        $i1 = i6 - $i0;

        specialinvoke $r8.<java.lang.String: void <init>(char[],int,int)>($r2, $i0, $i1);

        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>();

        $i0 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>();

        $r7 = virtualinvoke $r1.<gnu.kawa.lispexpr.ReadTable: gnu.kawa.lispexpr.ReadTableEntry lookup(int)>($i0);

        $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r7, $r1);

        $z0 = $r3 instanceof gnu.mapping.SimpleSymbol;

        if $z0 != 0 goto label25;

        virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void error(java.lang.String)>("expected identifier in symbol after \'{URI}:\'");

     label25:
        $r8 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r9 = staticinvoke <gnu.mapping.Symbol: gnu.mapping.Symbol valueOf(java.lang.String,java.lang.String,java.lang.String)>($r8, $r5, r6);

        return $r9;

     label26:
        $r5 = null;

        goto label24;

     label27:
        $z0 = $r1.<gnu.kawa.lispexpr.ReadTable: boolean initialColonIsKeyword>;

        if $z0 == 0 goto label28;

        if i4 != $i1 goto label28;

        if $i3 <= 1 goto label28;

        $i1 = $i1 + 1;

        $r5 = new java.lang.String;

        $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        $i0 = $i0 - $i1;

        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r2, $i1, $i0);

        r6 = virtualinvoke $r5.<java.lang.String: java.lang.String intern()>();

        $r10 = staticinvoke <gnu.expr.Keyword: gnu.expr.Keyword make(java.lang.String)>(r6);

        return $r10;

     label28:
        $z0 = $r1.<gnu.kawa.lispexpr.ReadTable: boolean finalColonIsKeyword>;

        if $z0 == 0 goto label30;

        $i0 = $i0 + -1;

        if i4 != $i0 goto label30;

        if $i3 > 1 goto label29;

        $z0 = r0.<gnu.kawa.lispexpr.LispReader: boolean seenEscapes>;

        if $z0 == 0 goto label30;

     label29:
        $r5 = new java.lang.String;

        $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        $i0 = $i3 + -1;

        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r2, $i1, $i0);

        r6 = virtualinvoke $r5.<java.lang.String: java.lang.String intern()>();

        $r10 = staticinvoke <gnu.expr.Keyword: gnu.expr.Keyword make(java.lang.String)>(r6);

        return $r10;

     label30:
        $r5 = new java.lang.String;

        $r2 = r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r2, $i1, $i3);

        $r3 = virtualinvoke $r1.<gnu.kawa.lispexpr.ReadTable: java.lang.Object makeSymbol(java.lang.String)>($r5);

        return $r3;
    }
