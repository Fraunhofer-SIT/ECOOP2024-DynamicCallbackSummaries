[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loading sources and sinks from SourcesSinks/UnconstrainedSourcesSinks.xml...
[main] INFO soot.jimple.infoflow.android.source.parsers.xml.XMLSourceSinkParser - Loaded 273 sources and 91 sinks from the XML file
[main] INFO soot.jimple.infoflow.android.SetupApplication - Initializing Soot...
[main] INFO soot.jimple.infoflow.android.SetupApplication - Loading dex files...
[main] INFO soot.jimple.infoflow.android.SetupApplication - ARSC file parsing took 0.135073027 seconds
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230,400 MiB
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 61 components...
[main] WARN soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Cannot generate constructor for phantom class androidx.lifecycle.ProcessLifecycleOwnerInitializer
[main] WARN soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Cannot generate constructor for phantom class androidx.work.impl.WorkManagerInitializer
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Collecting callbacks in DEFAULT mode...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Callback analysis done.
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 67 components...
[main] WARN soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Cannot create valid constructor for com.appsflyer.Foreground$Listener, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for f.a.a.a.j, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for f.g.a.j, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for f.g.a.d, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.i.i.l, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.b.f.h0, because it is abstract and cannot substitute with subclass
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Running incremental callback analysis for 57 components...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Incremental callback analysis done.
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 67 components...
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for f.a.a.a.j, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for f.g.a.j, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for f.g.a.d, because it is an interface and cannot substitute with subclass
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Running incremental callback analysis for 5 components...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Incremental callback analysis done.
[main] INFO soot.jimple.infoflow.android.entryPointCreators.AndroidEntryPointCreator - Creating Android entry point for 67 components...
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for f.a.a.a.j, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot generate constructor for phantom class androidx.fragment.app.Fragment
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.ActivityEntryPointCreator - Cannot create valid constructor for d.o.a.z, because it is abstract and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for f.g.a.j, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.android.entryPointCreators.components.BroadcastReceiverEntryPointCreator - Cannot create valid constructor for f.g.a.d, because it is an interface and cannot substitute with subclass
[main] INFO soot.jimple.infoflow.android.SetupApplication - Constructing the callgraph...
[FlowDroid Timeout Watcher] WARN soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - Timeout reached, stopping the solvers...
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Running incremental callback analysis for 2 components...
[main] INFO soot.jimple.infoflow.android.callbacks.DefaultCallbackAnalyzer - Incremental callback analysis done.
[main] WARN soot.jimple.infoflow.android.SetupApplication - Aborted callback collection because of low memory
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] WARN soot.jimple.infoflow.android.SetupApplication - Callback analysis aborted early due to time or memory exhaustion
[main] INFO soot.jimple.infoflow.android.SetupApplication - Entry point calculation done.
[main] INFO soot.jimple.infoflow.android.source.AccessPathBasedSourceSinkManager - Created a SourceSinkManager with 273 sources, 91 sinks, and 200 callback methods.
[main] INFO soot.jimple.infoflow.android.SetupApplication - Collecting callbacks and building a callgraph took 182 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication - Running data flow analysis on storagepath2-data/androidApps/2021-AndroZoo-PlayStore/com.free.vpn.tunnel.secure4E56C739935BBB814D11BBED42990A6D08C25329.apk with 273 sources and 91 sinks...
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Implicit flow tracking is NOT enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Exceptional flow tracking is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Running with a maximum access path length of 5
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using path-agnostic result collection
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Recursive access path shortening is enabled
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Taint analysis enabled: true
[main] INFO soot.jimple.infoflow.InfoflowConfiguration - Using alias algorithm FlowSensitive
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Registered a memory warning system for 230,400 MiB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph construction took 0 seconds
[main] INFO soot.jimple.infoflow.codeOptimization.InterproceduralConstantValuePropagator - Removing side-effect free methods is disabled
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Dead code elimination took 2.035690285 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Callgraph has 31615 edges
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Starting Taint Analysis
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Using context- and flow-sensitive solver
[main] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher started
[main] WARN soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Running with limited join point abstractions can break context-sensitive path builders
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Looking for sources and sinks...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Source lookup done, found 70 sources and 268 sinks.
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int d>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int c>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int d>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int e>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int c>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int e>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int k>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int f>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int k>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int f>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int h>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<f.c.b.o.a.k.c: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<f.c.b.o.a.k.c: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<f.c.b.o.a.k.c: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int h>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<f.c.b.o.a.k.c: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<f.c.b.o.a.k.c: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<f.c.b.o.a.k.c: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int d>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int c>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int e>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int k>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int f>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int h>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int d>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.b: int d>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.SubsParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.SubsParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.SubsParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int c>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.b: int e>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int d>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int d>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.b: int d>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.SubsParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.SubsParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<com.free.vpn.tunnel.base.report.param.SubsParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int e>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int c>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int c>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.b: int e>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: java.lang.String a>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.SubsParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.SubsParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<com.free.vpn.tunnel.base.report.param.SubsParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int d>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int e>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int e>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int k>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int c>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=boolean fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int e>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int f>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int d>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int d>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=long fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int d>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int i>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=int fields=[<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int k>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int k>]
[FlowDroid] WARN soot.jimple.infoflow.data.AccessPathFactory - Primitive types cannot have fields: baseType=char fields=[<f.c.b.o.a.k.c: java.util.List b>, <java.util.Collection: java.lang.Object[] innerArray>, <f.c.b.o.a.k.a: int b>]
[FlowDroid Timeout Watcher] WARN soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - Timeout reached, stopping the solvers...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper hits: 5936099
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Taint wrapper misses: 28128215
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - IFDS problem with 38877445 forward and 57435689 backward edges solved in 901 seconds, processing 8 results...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Current memory consumption: 141570 MB
[FlowDroid Timeout Watcher] INFO soot.jimple.infoflow.memory.FlowDroidTimeoutWatcher - FlowDroid timeout watcher terminated
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after cleanup: 85406 MB
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 1 with 5 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 5 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 4...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 5...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$ShutdownBatchPathBuilder - Running path reconstruction batch 2 with 3 elements
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Obtainted 3 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 1...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 2...
[main] INFO soot.jimple.infoflow.data.pathBuilders.DefaultPathBuilderFactory$RepeatableContextSensitivePathBuilder - Building path 3...
[main] INFO soot.jimple.infoflow.memory.MemoryWarningSystem - Shutting down the memory warning system...
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Memory consumption after path building: 121999 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Path reconstruction took 7965 seconds
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r1.<java.io.Writer: void write(char[],int,int)>($r2, 0, $i0) in method <f.c.b.o.c.p.a: java.lang.String p3(java.io.Reader)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r0.<java.io.Reader: int read(char[])>($r2) in method <f.c.b.o.c.p.a: java.lang.String p3(java.io.Reader)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String p3(java.io.Reader)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r0.<java.io.Reader: int read(char[])>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String p3(java.io.Reader)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.io.Writer: void write(char[],int,int)>($r2, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializeWriter: void write(int)>($i0) in method <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r1, "android_id") in method <f.c.b.o.c.p.a: java.lang.String C1()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String C1()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r1, "android_id")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String C1()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String C1()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: com.free.vpn.tunnel.base.report.param.AdEventParam a()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r0.<com.free.vpn.tunnel.base.report.param.AdEventParam: void setUuid(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.AdEventParam: void setUuid(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.AdEventParam: void setUuid(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: com.free.vpn.tunnel.base.report.param.AdEventParam a()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void g(java.lang.String,java.util.List,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r3, $r0, null, null, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r5.<com.alibaba.fastjson.serializer.ObjectSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r0, $r1, null, null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>($r10)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c5 = $c4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = (int) $c5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializeWriter: void write(int)>($i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r3 = virtualinvoke $r2.<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>() in method <f.c.b.o.c.e: java.lang.String r()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String r()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String r()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String r()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String y()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: com.free.vpn.tunnel.base.report.param.SubsParam b()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r0.<com.free.vpn.tunnel.base.report.param.SubsParam: void setCountry(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.SubsParam: void setCountry(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.free.vpn.tunnel.base.report.param.SubsParam: java.lang.String country> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.SubsParam: void setCountry(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: com.free.vpn.tunnel.base.report.param.SubsParam b()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void e(java.lang.String,java.lang.String,double,long,java.lang.String,boolean,boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r3, $r0, null, null, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r5.<com.alibaba.fastjson.serializer.ObjectSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r0, $r1, null, null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>($r10)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c5 = $c4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = (int) $c5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializeWriter: void write(int)>($i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r0 = virtualinvoke $r4.<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>() in method <f.c.b.o.c.p.a: java.lang.String Q0()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String Q0()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = virtualinvoke $r4.<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String Q0()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<com.free.vpn.tunnel.base.report.param.ConnParam: void setOperator(java.lang.String)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setOperator(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String operator> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setOperator(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <f.c.b.o.c.q.a: void c(com.free.vpn.tunnel.base.report.param.ConnParam)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void c(com.free.vpn.tunnel.base.report.param.ConnParam)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r9.<com.free.vpn.tunnel.base.report.event.ReportConnectEvent: void <init>(com.free.vpn.tunnel.base.report.param.ConnParam)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.event.ReportConnectEvent: void <init>(com.free.vpn.tunnel.base.report.param.ConnParam)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.free.vpn.tunnel.base.report.event.ReportConnectEvent: com.free.vpn.tunnel.base.report.param.ConnParam connectParam> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.event.ReportConnectEvent: void <init>(com.free.vpn.tunnel.base.report.param.ConnParam)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void c(com.free.vpn.tunnel.base.report.param.ConnParam)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <f.c.b.o.c.q.a: void i(java.lang.Object)>($r9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void i(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r3, $r0, null, null, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r5.<com.alibaba.fastjson.serializer.ObjectSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r0, $r1, null, null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>($r10)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c5 = $c4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = (int) $c5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializeWriter: void write(int)>($i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r3 = virtualinvoke $r2.<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>() in method <f.c.b.o.c.e: java.lang.String p()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String p()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String p()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String y()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: com.free.vpn.tunnel.base.report.param.SubsParam b()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r0.<com.free.vpn.tunnel.base.report.param.SubsParam: void setCountry(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.SubsParam: void setCountry(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.free.vpn.tunnel.base.report.param.SubsParam: java.lang.String country> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.SubsParam: void setCountry(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: com.free.vpn.tunnel.base.report.param.SubsParam b()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void e(java.lang.String,java.lang.String,double,long,java.lang.String,boolean,boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r3, $r0, null, null, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r5.<com.alibaba.fastjson.serializer.ObjectSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r0, $r1, null, null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>($r10)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c5 = $c4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = (int) $c5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializeWriter: void write(int)>($i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r4) in method <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r4, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r7.<java.lang.String: void <init>(byte[])>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.s.a: java.lang.String c()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.s.a: java.lang.String c()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.a: java.lang.String m()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.a: f.c.b.o.a.k.c j()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = staticinvoke <d.b0.s: f.c.b.o.a.k.c a0(java.lang.String)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <d.b0.s: f.c.b.o.a.k.c a0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r2.<org.json.JSONObject: void <init>(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <d.b0.s: f.c.b.o.a.k.c a0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String optString(java.lang.String)>("lastUpdated")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <d.b0.s: f.c.b.o.a.k.c a0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0.<f.c.b.o.a.k.c: java.lang.String a> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <d.b0.s: f.c.b.o.a.k.c a0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.a: f.c.b.o.a.k.c j()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<f.c.b.o.a.a: f.c.b.o.a.k.c c> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.a: f.c.b.o.a.k.c j()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<f.c.b.o.a.a: f.c.b.o.a.k.c c>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.a: f.c.b.o.a.k.c j()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.ads.debug.AdsCacheStatusActivity: void onCreate(android.os.Bundle)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>($r9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r3, $r0, null, null, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r5.<com.alibaba.fastjson.serializer.ObjectSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r0, $r1, null, null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>($r10)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c5 = $c4
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = (int) $c5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializeWriter: void write(int)>($i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r11.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r5, 0, $i0) in method <d.b0.s: java.util.List q()> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r5) in method <d.b0.s: java.util.List q()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <d.b0.s: java.util.List q()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <d.b0.s: java.util.List q()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r11.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r5, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r8.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r1) in method <f.c.b.l.v: void l(android.content.Context,f.c.b.i,boolean,boolean)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r6 = virtualinvoke $r23.<java.io.ObjectInputStream: java.lang.Object readObject()>() in method <f.c.b.l.v: void i(android.content.Context)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: void i(android.content.Context)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r6 = virtualinvoke $r23.<java.io.ObjectInputStream: java.lang.Object readObject()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: void i(android.content.Context)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r12 = (f.c.b.i) $r6
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: void i(android.content.Context)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r12)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: void i(android.content.Context)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<f.c.b.l.v: java.util.HashMap a>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: void i(android.content.Context)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r15
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: f.c.b.i d(android.content.Context,java.lang.String,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = <f.c.b.l.v: f.c.b.l.v b>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: f.c.b.i d(android.content.Context,java.lang.String,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = staticinvoke <f.c.b.l.v: f.c.b.i e(java.lang.String)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: f.c.b.i e(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = <f.c.b.l.v: f.c.b.l.v b>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: f.c.b.i e(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = $r3.<f.c.b.l.v: java.util.HashMap a>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: f.c.b.i e(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: f.c.b.i e(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = (f.c.b.i) $r5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: f.c.b.i e(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: f.c.b.i d(android.content.Context,java.lang.String,int,int)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: f.c.b.i c(android.content.Context,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.LaunchVPN: void onCreate(android.os.Bundle)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r8 = $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.LaunchVPN: void onCreate(android.os.Bundle)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r8.<f.c.b.i: int a(android.content.Context)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.i: int a(android.content.Context)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $z0 = virtualinvoke r0.<f.c.b.i: boolean v()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.i: boolean v()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<f.c.b.i: f.c.b.l.d[] a0>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.i: boolean v()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2[$i1]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.i: boolean v()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $z0 = virtualinvoke $r3.<f.c.b.l.d: boolean c()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.d: boolean c()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return 0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.i: boolean v()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2[$i1]
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.i: boolean v()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<f.c.b.i: f.c.b.l.d[] a0>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.i: boolean v()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.i: int a(android.content.Context)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.LaunchVPN: void onCreate(android.os.Bundle)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.free.vpn.LaunchVPN: f.c.b.i a> = $r8
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.LaunchVPN: void onCreate(android.os.Bundle)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r8.<f.c.b.i: int a(android.content.Context)>(r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.i: int a(android.content.Context)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $i0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.LaunchVPN: void onCreate(android.os.Bundle)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.free.vpn.LaunchVPN: void onActivityResult(int,int,android.content.Intent)>(70, -1, null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.LaunchVPN: void onActivityResult(int,int,android.content.Intent)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.free.vpn.LaunchVPN: f.c.b.i a>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.LaunchVPN: void onActivityResult(int,int,android.content.Intent)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <f.c.b.l.v: void l(android.content.Context,f.c.b.i,boolean,boolean)>(r0, $r2, 0, 0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.l.v: void l(android.content.Context,f.c.b.i,boolean,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r8.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r4, 0, $i0) in method <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r4) in method <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r4, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r12.<java.util.zip.ZipOutputStream: void write(byte[],int,int)>($r7, 0, $i1) in method <d.v.d: void c(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.io.File,java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r7) in method <d.v.d: void c(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.io.File,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <d.v.d: void c(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.io.File,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r7)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <d.v.d: void c(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.io.File,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r12.<java.util.zip.ZipOutputStream: void write(byte[],int,int)>($r7, 0, $i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0) in method <com.alibaba.fastjson.serializer.SerializeWriter: void flush()> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r1, "android_id") in method <f.c.b.o.c.p.a: java.lang.String C1()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String C1()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r1, "android_id")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String C1()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String C1()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: com.free.vpn.tunnel.base.report.param.AdEventParam a()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r0.<com.free.vpn.tunnel.base.report.param.AdEventParam: void setUuid(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.AdEventParam: void setUuid(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.AdEventParam: void setUuid(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: com.free.vpn.tunnel.base.report.param.AdEventParam a()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void g(java.lang.String,java.util.List,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r3, $r0, null, null, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r5.<com.alibaba.fastjson.serializer.ObjectSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r0, $r1, null, null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>($r10)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.String: void getChars(int,int,char[],int)>(0, $i2, $r2, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.alibaba.fastjson.serializer.SerializeWriter: char[] buf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.SerializeWriter
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.alibaba.fastjson.serializer.JSONSerializer: com.alibaba.fastjson.serializer.SerializeWriter out>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.JSONSerializer
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.MiscCodec
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.JSONSerializer
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void <init>(com.alibaba.fastjson.serializer.SerializeWriter,com.alibaba.fastjson.serializer.SerializeConfig)>($r1, $r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void <init>(com.alibaba.fastjson.serializer.SerializeWriter,com.alibaba.fastjson.serializer.SerializeConfig)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.alibaba.fastjson.serializer.JSONSerializer: com.alibaba.fastjson.serializer.SerializeWriter out> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void <init>(com.alibaba.fastjson.serializer.SerializeWriter,com.alibaba.fastjson.serializer.SerializeConfig)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<com.alibaba.fastjson.serializer.SerializeWriter: void close()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void close()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializeWriter: void flush()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void flush()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.alibaba.fastjson.serializer.SerializeWriter: char[] buf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void flush()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r3 = virtualinvoke $r2.<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>() in method <f.c.b.o.c.e: java.lang.String r()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String r()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String r()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String r()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String y()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<com.free.vpn.tunnel.base.report.param.ConnParam: void setCountry(java.lang.String)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setCountry(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setCountry(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<com.free.vpn.tunnel.base.report.param.ConnParam: void setConnCountryName(java.lang.String)>($r5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setConnCountryName(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <f.c.b.o.b.c: f.c.b.o.b.c k()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> <f.c.b.o.b.c: f.c.b.o.b.c r> = $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> throw $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <f.c.b.o.b.c: f.c.b.o.b.c k()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = <f.c.b.o.b.c: f.c.b.o.b.c r>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<com.free.vpn.tunnel.base.report.param.ConnParam: void setConnCountryName(java.lang.String)>($r5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setConnCountryName(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<com.free.vpn.tunnel.base.report.param.ConnParam: void setErrorMsg(java.lang.String)>(null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setErrorMsg(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <f.c.b.o.b.c: f.c.b.o.b.c k()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = <f.c.b.o.b.c: f.c.b.o.b.c r>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <f.c.b.o.b.c: f.c.b.o.b.c k()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = <f.c.b.o.b.c: f.c.b.o.b.c r>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<com.free.vpn.tunnel.base.report.param.ConnParam: void setSessionId(java.lang.String)>($r5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setSessionId(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<com.free.vpn.tunnel.base.report.param.ConnParam: void setErrorMsg(java.lang.String)>(null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setErrorMsg(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <f.c.b.o.c.q.a: void c(com.free.vpn.tunnel.base.report.param.ConnParam)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void c(com.free.vpn.tunnel.base.report.param.ConnParam)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r5 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r3, $r0, null, null, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r5.<com.alibaba.fastjson.serializer.ObjectSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r0, $r1, null, null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MapSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.JSONSerializer
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 := @parameter0: java.lang.Object
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 := @parameter0: java.lang.Object
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.event.ReportConnectEvent: void <init>(com.free.vpn.tunnel.base.report.param.ConnParam)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.free.vpn.tunnel.base.report.event.ReportConnectEvent: com.free.vpn.tunnel.base.report.param.ConnParam connectParam> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.event.ReportConnectEvent: void <init>(com.free.vpn.tunnel.base.report.param.ConnParam)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void c(com.free.vpn.tunnel.base.report.param.ConnParam)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <f.c.b.o.c.q.a: void i(java.lang.Object)>($r9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void i(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r3, $r0, null, null, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r5.<com.alibaba.fastjson.serializer.ObjectSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r0, $r1, null, null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>($r10)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.String: void getChars(int,int,char[],int)>(0, $i2, $r2, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.alibaba.fastjson.serializer.SerializeWriter: char[] buf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.SerializeWriter
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.alibaba.fastjson.serializer.JSONSerializer: com.alibaba.fastjson.serializer.SerializeWriter out>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.JSONSerializer
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.MiscCodec
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.JSONSerializer
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void <init>(com.alibaba.fastjson.serializer.SerializeWriter,com.alibaba.fastjson.serializer.SerializeConfig)>($r1, $r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void <init>(com.alibaba.fastjson.serializer.SerializeWriter,com.alibaba.fastjson.serializer.SerializeConfig)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.alibaba.fastjson.serializer.JSONSerializer: com.alibaba.fastjson.serializer.SerializeWriter out> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void <init>(com.alibaba.fastjson.serializer.SerializeWriter,com.alibaba.fastjson.serializer.SerializeConfig)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<com.alibaba.fastjson.serializer.SerializeWriter: void close()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void close()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializeWriter: void flush()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void flush()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.alibaba.fastjson.serializer.SerializeWriter: char[] buf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void flush()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r3 = virtualinvoke $r2.<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>() in method <f.c.b.o.c.e: java.lang.String p()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String p()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String p()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.e: java.lang.String y()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<com.free.vpn.tunnel.base.report.param.ConnParam: void setCountry(java.lang.String)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setCountry(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.free.vpn.tunnel.base.report.param.ConnParam: java.lang.String country> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setCountry(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<com.free.vpn.tunnel.base.report.param.ConnParam: void setConnIP(java.lang.String)>($r5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setConnIP(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <f.c.b.o.b.c: f.c.b.o.b.c k()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = <f.c.b.o.b.c: f.c.b.o.b.c r>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <f.c.b.o.b.c: f.c.b.o.b.c k()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = <f.c.b.o.b.c: f.c.b.o.b.c r>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<com.free.vpn.tunnel.base.report.param.ConnParam: void setConnIP(java.lang.String)>($r5)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setConnIP(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<com.free.vpn.tunnel.base.report.param.ConnParam: void setConnProtocol(java.lang.String)>("V2Ray")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setConnProtocol(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <f.c.b.o.b.c: f.c.b.o.b.c k()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = <f.c.b.o.b.c: f.c.b.o.b.c r>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <f.c.b.o.b.c: f.c.b.o.b.c k()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = <f.c.b.o.b.c: f.c.b.o.b.c r>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: f.c.b.o.b.c k()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = virtualinvoke $r2.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam q>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.c: com.free.vpn.tunnel.base.report.param.ConnParam e()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r3.<com.free.vpn.tunnel.base.report.param.ConnParam: void setConnProtocol(java.lang.String)>("V2Ray")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.ConnParam: void setConnProtocol(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.b.d.j: void k(boolean,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <f.c.b.o.c.q.a: void c(com.free.vpn.tunnel.base.report.param.ConnParam)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void c(com.free.vpn.tunnel.base.report.param.ConnParam)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r5 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r3, $r0, null, null, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r5.<com.alibaba.fastjson.serializer.ObjectSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r0, $r1, null, null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MapSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.JSONSerializer
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 := @parameter0: java.lang.Object
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 := @parameter0: java.lang.Object
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.event.ReportConnectEvent: void <init>(com.free.vpn.tunnel.base.report.param.ConnParam)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.free.vpn.tunnel.base.report.event.ReportConnectEvent: com.free.vpn.tunnel.base.report.param.ConnParam connectParam> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.event.ReportConnectEvent: void <init>(com.free.vpn.tunnel.base.report.param.ConnParam)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void c(com.free.vpn.tunnel.base.report.param.ConnParam)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> staticinvoke <f.c.b.o.c.q.a: void i(java.lang.Object)>($r9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void i(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>($r0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r3, $r0, null, null, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r5.<com.alibaba.fastjson.serializer.ObjectSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r0, $r1, null, null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>($r10)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<java.lang.String: void getChars(int,int,char[],int)>(0, $i2, $r2, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.alibaba.fastjson.serializer.SerializeWriter: char[] buf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithSingleQuote(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.SerializeWriter
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = r0.<com.alibaba.fastjson.serializer.JSONSerializer: com.alibaba.fastjson.serializer.SerializeWriter out>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.JSONSerializer
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.MiscCodec
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0 := @this: com.alibaba.fastjson.serializer.JSONSerializer
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void <init>(com.alibaba.fastjson.serializer.SerializeWriter,com.alibaba.fastjson.serializer.SerializeConfig)>($r1, $r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void <init>(com.alibaba.fastjson.serializer.SerializeWriter,com.alibaba.fastjson.serializer.SerializeConfig)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.alibaba.fastjson.serializer.JSONSerializer: com.alibaba.fastjson.serializer.SerializeWriter out> = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void <init>(com.alibaba.fastjson.serializer.SerializeWriter,com.alibaba.fastjson.serializer.SerializeConfig)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r1.<com.alibaba.fastjson.serializer.SerializeWriter: void close()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void close()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializeWriter: void flush()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void flush()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = r0.<com.alibaba.fastjson.serializer.SerializeWriter: char[] buf>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void flush()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializeWriter: void write(int)>($i1) in method <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithDoubleQuote(java.lang.String,char,boolean)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r1, "android_id") in method <f.c.b.o.c.p.a: java.lang.String C1()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String C1()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r1, "android_id")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String C1()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r3 = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String C1()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r3
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: com.free.vpn.tunnel.base.report.param.AdEventParam a()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r0.<com.free.vpn.tunnel.base.report.param.AdEventParam: void setUuid(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.AdEventParam: void setUuid(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<com.free.vpn.tunnel.base.report.param.AdEventParam: java.lang.String uuid> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.base.report.param.AdEventParam: void setUuid(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: com.free.vpn.tunnel.base.report.param.AdEventParam a()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.q.a: void g(java.lang.String,java.util.List,java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r3, $r0, null, null, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r5.<com.alibaba.fastjson.serializer.ObjectSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r0, $r1, null, null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>($r10)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithDoubleQuote(java.lang.String,char,boolean)>($r1, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithDoubleQuote(java.lang.String,char,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithDoubleQuote(java.lang.String,char,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c6 = $c5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithDoubleQuote(java.lang.String,char,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = (int) $c6
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithDoubleQuote(java.lang.String,char,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializeWriter: void write(int)>($i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r4) in method <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r4, 0, $i0)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r4 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r7.<java.lang.String: void <init>(byte[])>($r4)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.c.p.a: java.lang.String O0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r7
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.s.a: java.lang.String c()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = $r2
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.s.a: java.lang.String c()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.a: java.lang.String m()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.a: f.c.b.o.a.k.c j()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = staticinvoke <d.b0.s: f.c.b.o.a.k.c a0(java.lang.String)>($r2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <d.b0.s: f.c.b.o.a.k.c a0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> specialinvoke $r2.<org.json.JSONObject: void <init>(java.lang.String)>($r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <d.b0.s: f.c.b.o.a.k.c a0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String optString(java.lang.String)>("lastUpdated")
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <d.b0.s: f.c.b.o.a.k.c a0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r0.<f.c.b.o.a.k.c: java.lang.String a> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <d.b0.s: f.c.b.o.a.k.c a0(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r0
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.a: f.c.b.o.a.k.c j()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> r0.<f.c.b.o.a.a: f.c.b.o.a.k.c c> = $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.a: f.c.b.o.a.k.c j()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r1 = r0.<f.c.b.o.a.a: f.c.b.o.a.k.c c>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <f.c.b.o.a.a: f.c.b.o.a.k.c j()>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.free.vpn.tunnel.ads.debug.AdsCacheStatusActivity: void onCreate(android.os.Bundle)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>($r9)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r2 = staticinvoke <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>($r3, $r0, null, null, $i0, $r1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.JSON: java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializeConfig,com.alibaba.fastjson.serializer.SerializeFilter[],java.lang.String,int,com.alibaba.fastjson.serializer.SerializerFeature[])>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r7.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>($r3)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.Object)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> interfaceinvoke $r5.<com.alibaba.fastjson.serializer.ObjectSerializer: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r0, $r1, null, null)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $r10 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.MiscCodec: void write(com.alibaba.fastjson.serializer.JSONSerializer,java.lang.Object,java.lang.Object,java.lang.reflect.Type)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>($r10)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.JSONSerializer: void write(java.lang.String)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke $r2.<com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithDoubleQuote(java.lang.String,char,boolean)>($r1, 0, 1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithDoubleQuote(java.lang.String,char,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithDoubleQuote(java.lang.String,char,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $c6 = $c5
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithDoubleQuote(java.lang.String,char,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> $i1 = (int) $c6
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 	 -> <com.alibaba.fastjson.serializer.SerializeWriter: void writeStringWithDoubleQuote(java.lang.String,char,boolean)>
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - 		 -> virtualinvoke r0.<com.alibaba.fastjson.serializer.SerializeWriter: void write(int)>($i1)
[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - Data flow solver took 8927 seconds. Maximum memory consumption: 141570 MB
[main] INFO soot.jimple.infoflow.android.SetupApplication - Found 8 leaks
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'SummaryStatistics'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Telemetry'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'Telemetry_sha256Hash_idx' for table 'Telemetry
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'Callbacks'
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallbackSummaries'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'CallbackSummaries_sha256Hash_idx' for table 'CallbackSummaries
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'AppSizes'
[main] INFO com.j256.ormlite.table.TableUtils - creating index 'AppSizes_sha256Hash_idx' for table 'AppSizes
[main] INFO com.j256.ormlite.table.TableUtils - creating table 'CallgraphSizes'
