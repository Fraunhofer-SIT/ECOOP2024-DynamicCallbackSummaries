    public java.lang.Object applyN(java.lang.Object[]) throws java.lang.Throwable
    {
        gnu.kawa.reflect.Invoke r0;
        gnu.bytecode.ArrayType $r11;
        gnu.expr.Language $r21;
        byte $b5;
        boolean $z0, $z1;
        gnu.expr.TypeValue $r7;
        gnu.mapping.Procedure $r8;
        gnu.bytecode.ObjectType $r4;
        gnu.expr.Keyword $r12;
        java.lang.StringBuilder $r23;
        java.lang.Throwable $r1;
        gnu.bytecode.Type $r6;
        java.lang.Object[] $r2, $r9;
        gnu.bytecode.ClassType $r20;
        int $i1, $i2, $i3, $i4, $i6, $i7;
        java.lang.String $r13, $r14;
        java.lang.Number $r15;
        gnu.mapping.MethodProc $r18, $r22;
        char $c0;
        java.lang.RuntimeException $r17, $r24;
        gnu.expr.PairClassType $r10;
        gnu.mapping.CallContext $r19;
        java.lang.Object $r3, $r16;
        java.lang.Class $r5;

        r0 := @this: gnu.kawa.reflect.Invoke;

        $r2 := @parameter0: java.lang.Object[];

        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i2 = (int) $c0;

        if $i2 == 80 goto label33;

        $i1 = lengthof $r2;

        staticinvoke <gnu.mapping.Procedure: void checkArgCount(gnu.mapping.Procedure,int)>(r0, $i1);

        $i2 = 0;

        $r3 = $r2[0];

        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i4 = (int) $c0;

        if $i4 == 86 goto label01;

        $i4 = (int) $c0;

        if $i4 == 42 goto label01;

        $r4 = staticinvoke <gnu.kawa.reflect.Invoke: gnu.bytecode.ObjectType typeFrom(java.lang.Object,gnu.kawa.reflect.Invoke)>($r3, r0);

        goto label02;

     label01:
        $r5 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <gnu.bytecode.Type: gnu.bytecode.Type make(java.lang.Class)>($r5);

        $r4 = (gnu.bytecode.ObjectType) $r6;

     label02:
        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i3 = -1;

        $i4 = 1;

        $i6 = (int) $c0;

        if $i6 != 78 goto label14;

        $r3 = null;

        $z0 = $r4 instanceof gnu.expr.TypeValue;

        if $z0 == 0 goto label03;

        $r7 = (gnu.expr.TypeValue) $r4;

        $r8 = interfaceinvoke $r7.<gnu.expr.TypeValue: gnu.mapping.Procedure getConstructor()>();

        if $r8 == null goto label03;

        $i2 = $i1 + -1;

        $r9 = newarray (java.lang.Object)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 1, $r9, 0, $i2);

        $r3 = virtualinvoke $r8.<gnu.mapping.Procedure: java.lang.Object applyN(java.lang.Object[])>($r9);

        return $r3;

     label03:
        $z0 = $r4 instanceof gnu.expr.PairClassType;

        if $z0 == 0 goto label04;

        $r10 = (gnu.expr.PairClassType) $r4;

        $r4 = $r10.<gnu.expr.PairClassType: gnu.bytecode.ClassType instanceType>;

     label04:
        $z0 = $r4 instanceof gnu.bytecode.ArrayType;

        if $z0 == 0 goto label15;

        $r11 = (gnu.bytecode.ArrayType) $r4;

        $r6 = virtualinvoke $r11.<gnu.bytecode.ArrayType: gnu.bytecode.Type getComponentType()>();

        $i1 = lengthof $r2;

        $i1 = $i1 - 1;

        if $i1 < 2 goto label06;

        $r3 = $r2[1];

        $z0 = $r3 instanceof gnu.expr.Keyword;

        if $z0 == 0 goto label06;

        $r3 = $r2[1];

        $r12 = (gnu.expr.Keyword) $r3;

        $r13 = virtualinvoke $r12.<gnu.expr.Keyword: java.lang.String getName()>();

        $r14 = "length";

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 != 0 goto label05;

        $r14 = "size";

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label06;

     label05:
        $r3 = $r2[2];

        $r15 = (java.lang.Number) $r3;

        $i3 = virtualinvoke $r15.<java.lang.Number: int intValue()>();

        $i4 = 3;

        $z0 = 1;

        goto label07;

     label06:
        $i3 = $i1;

        $i4 = 1;

        $z0 = 0;

     label07:
        $r5 = virtualinvoke $r6.<gnu.bytecode.Type: java.lang.Class getReflectClass()>();

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r5, $i3);

     label08:
        if $i4 > $i1 goto label13;

        $r16 = $r2[$i4];

        if $z0 == 0 goto label12;

        $z1 = $r16 instanceof gnu.expr.Keyword;

        if $z1 == 0 goto label12;

        if $i4 >= $i1 goto label12;

        $r12 = (gnu.expr.Keyword) $r16;

        $r13 = virtualinvoke $r12.<gnu.expr.Keyword: java.lang.String getName()>();

     label09:
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

     label10:
        $i4 = $i4 + 1;

        $r16 = $r2[$i4];

        goto label12;

     label11:
        $r24 = new java.lang.RuntimeException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("non-integer keyword \'");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in array constructor");

        $r13 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r24;

     label12:
        $r16 = virtualinvoke $r6.<gnu.bytecode.Type: java.lang.Object coerceFromObject(java.lang.Object)>($r16);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r3, $i2, $r16);

        $i2 = $i2 + 1;

        $i4 = $i4 + 1;

        goto label08;

     label13:
        return $r3;

     label14:
        $r3 = $r2[1];

     label15:
        $r18 = virtualinvoke r0.<gnu.kawa.reflect.Invoke: gnu.mapping.MethodProc lookupMethods(gnu.bytecode.ObjectType,java.lang.Object)>($r4, $r3);

        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i6 = (int) $c0;

        if $i6 == 78 goto label20;

        $i4 = (int) $c0;

        if $i4 == 83 goto label16;

        $i4 = (int) $c0;

        if $i4 == 115 goto label16;

        $b5 = 1;

        goto label17;

     label16:
        $b5 = 2;

     label17:
        $i4 = $i1 - $b5;

        $r9 = newarray (java.lang.Object)[$i4];

        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i4 = (int) $c0;

        if $i4 == 86 goto label18;

        $i4 = (int) $c0;

        if $i4 != 42 goto label19;

     label18:
        $r3 = $r2[0];

        $r9[0] = $r3;

        $i2 = 1;

     label19:
        $i1 = $i1 - 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 2, $r9, $i2, $i1);

        $r3 = virtualinvoke $r18.<gnu.mapping.MethodProc: java.lang.Object applyN(java.lang.Object[])>($r9);

        return $r3;

     label20:
        $r19 = staticinvoke <gnu.mapping.CallContext: gnu.mapping.CallContext getInstance()>();

        $i2 = 0;

     label21:
        $i6 = lengthof $r2;

        if $i2 >= $i6 goto label22;

        $r3 = $r2[$i2];

        $z0 = $r3 instanceof gnu.expr.Keyword;

        if $z0 != 0 goto label22;

        $i2 = $i2 + 1;

        goto label21;

     label22:
        $i6 = lengthof $r2;

        if $i2 != $i6 goto label26;

        $i6 = virtualinvoke $r18.<gnu.mapping.MethodProc: int matchN(java.lang.Object[],gnu.mapping.CallContext)>($r2, $r19);

        $i3 = $i6;

        if $i6 != 0 goto label23;

        $r3 = virtualinvoke $r19.<gnu.mapping.CallContext: java.lang.Object runUntilValue()>();

        return $r3;

     label23:
        $r20 = (gnu.bytecode.ClassType) $r4;

        $r21 = r0.<gnu.kawa.reflect.Invoke: gnu.expr.Language language>;

        $r22 = staticinvoke <gnu.kawa.reflect.ClassMethods: gnu.mapping.MethodProc apply(gnu.bytecode.ObjectType,java.lang.String,char,gnu.expr.Language)>($r20, "valueOf", 0, $r21);

        if $r22 == null goto label25;

        $i1 = $i1 - 1;

        $r9 = newarray (java.lang.Object)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 1, $r9, 0, $i1);

        $i1 = virtualinvoke $r22.<gnu.mapping.MethodProc: int matchN(java.lang.Object[],gnu.mapping.CallContext)>($r9, $r19);

        if $i1 != 0 goto label24;

        $r3 = virtualinvoke $r19.<gnu.mapping.CallContext: java.lang.Object runUntilValue()>();

        return $r3;

     label24:
        $i3 = $i1;

     label25:
        $r3 = $r2[0];

        $r3 = virtualinvoke $r18.<gnu.mapping.MethodProc: java.lang.Object apply1(java.lang.Object)>($r3);

        goto label27;

     label26:
        $r9 = newarray (java.lang.Object)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r9, 0, $i2);

        $r3 = virtualinvoke $r18.<gnu.mapping.MethodProc: java.lang.Object applyN(java.lang.Object[])>($r9);

     label27:
        $i1 = $i2;

     label28:
        $i6 = $i1 + 1;

        $i7 = lengthof $r2;

        if $i6 >= $i7 goto label29;

        $r16 = $r2[$i1];

        $z0 = $r16 instanceof gnu.expr.Keyword;

        if $z0 == 0 goto label29;

        $r12 = (gnu.expr.Keyword) $r16;

        $r16 = $r2[$i6];

        $r13 = virtualinvoke $r12.<gnu.expr.Keyword: java.lang.String getName()>();

        staticinvoke <gnu.kawa.reflect.SlotSet: void apply(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(0, $r3, $r13, $r16);

        $i1 = $i1 + 2;

        goto label28;

     label29:
        $i6 = lengthof $r2;

        if $i2 == $i6 goto label30;

        $i4 = $i1;

     label30:
        $i2 = lengthof $r2;

        if $i4 == $i2 goto label35;

        $r20 = (gnu.bytecode.ClassType) $r4;

        $r21 = r0.<gnu.kawa.reflect.Invoke: gnu.expr.Language language>;

        $r22 = staticinvoke <gnu.kawa.reflect.ClassMethods: gnu.mapping.MethodProc apply(gnu.bytecode.ObjectType,java.lang.String,char,gnu.expr.Language)>($r20, "add", 0, $r21);

        if $r22 == null goto label32;

     label31:
        $i2 = lengthof $r2;

        if $i4 >= $i2 goto label35;

        $r16 = $r2[$i4];

        virtualinvoke $r22.<gnu.mapping.MethodProc: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r3, $r16);

        $i4 = $i4 + 1;

        goto label31;

     label32:
        $r17 = staticinvoke <gnu.mapping.MethodProc: java.lang.RuntimeException matchFailAsException(int,gnu.mapping.Procedure,java.lang.Object[])>($i3, $r18, $r2);

        throw $r17;

     label33:
        $r24 = new java.lang.RuntimeException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r0.<gnu.kawa.reflect.Invoke: java.lang.String getName()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": invoke-special not allowed at run time");

        $r13 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r24;

     label34:
        $r1 := @caughtexception;

        goto label11;

     label35:
        return $r3;

        catch java.lang.Throwable from label09 to label10 with label34;
    }
