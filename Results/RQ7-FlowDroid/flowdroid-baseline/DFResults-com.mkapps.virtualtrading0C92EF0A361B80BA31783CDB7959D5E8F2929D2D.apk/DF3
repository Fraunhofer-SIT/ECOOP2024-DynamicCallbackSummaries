Source: $i1 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i0, $i1)
$i1 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i0, $i1) in <gnu.text.LineBufferedReader: int fill(int)>
Sink: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.LineBufferedReader: int fill(int)>: $i1 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i0, $i1)
<gnu.text.LineBufferedReader: int fill(int)>: $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int fill(int)>: return $i1
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r2 = virtualinvoke $r1.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r2)
<kawa.lib.std_syntax: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r1
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2)
