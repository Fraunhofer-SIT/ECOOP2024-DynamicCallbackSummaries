Source: $i4 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
$i4 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>() in <gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>
Sink: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1) in <gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>

<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: $i4 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: $r4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>($i4, $r3)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r2, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke $r1.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>(r0, $i0, -1)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>($i0)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: throw $r9
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: $r4 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>($i4, $r3)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>($i0, $r2, $r1)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: $r3 = virtualinvoke $r1.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>(r0, $i0, -1)
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r8 = virtualinvoke r24.<gnu.kawa.util.GeneralHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r25, $r1)
<gnu.kawa.util.AbstractHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>: $r1 = $r2
<gnu.kawa.util.AbstractHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>: return $r1
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r8
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.Procedure: void apply(gnu.mapping.Procedure,gnu.mapping.CallContext)>: virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r3)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
<gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>: interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
<gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1)
