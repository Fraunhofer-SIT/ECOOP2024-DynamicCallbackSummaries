    public java.lang.Object apply1(gnu.expr.ModuleMethod, java.lang.Object)
    {
        gnu.expr.ModuleMethod $r1;
        gnu.math.RatNum $r6;
        java.lang.Integer $r11;
        gnu.math.Quantity $r10;
        gnu.math.IntNum $r7;
        boolean $z0;
        java.lang.CharSequence $r12;
        gnu.mapping.WrongType $r16;
        gnu.math.Complex $r8;
        java.lang.Double $r9;
        java.lang.ClassCastException $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51;
        gnu.math.RealNum $r5;
        int $i0;
        kawa.lib.numbers r0;
        java.lang.Boolean $r3;
        java.lang.Number $r4;
        double $d0;
        gnu.math.Duration $r14;
        java.lang.Object $r2;
        gnu.math.Unit $r13;

        r0 := @this: kawa.lib.numbers;

        $r1 := @parameter0: gnu.expr.ModuleMethod;

        $r2 := @parameter1: java.lang.Object;

        $i0 = $r1.<gnu.expr.ModuleMethod: int selector>;

        lookupswitch($i0)
        {
            case 1: goto label002;
            case 2: goto label005;
            case 3: goto label008;
            case 4: goto label011;
            case 5: goto label014;
            case 6: goto label017;
            case 7: goto label020;
            case 8: goto label023;
            case 9: goto label026;
            case 10: goto label030;
            case 11: goto label034;
            case 12: goto label001;
            case 13: goto label001;
            case 14: goto label038;
            case 15: goto label001;
            case 16: goto label001;
            case 17: goto label001;
            case 18: goto label001;
            case 19: goto label040;
            case 20: goto label042;
            case 21: goto label044;
            case 22: goto label046;
            case 23: goto label048;
            case 24: goto label050;
            case 25: goto label001;
            case 26: goto label052;
            case 27: goto label054;
            case 28: goto label056;
            case 29: goto label058;
            case 30: goto label060;
            case 31: goto label062;
            case 32: goto label064;
            case 33: goto label001;
            case 34: goto label066;
            case 35: goto label068;
            case 36: goto label070;
            case 37: goto label001;
            case 38: goto label001;
            case 39: goto label072;
            case 40: goto label074;
            case 41: goto label076;
            case 42: goto label078;
            case 43: goto label080;
            case 44: goto label082;
            case 45: goto label084;
            case 46: goto label086;
            case 47: goto label001;
            case 48: goto label001;
            case 49: goto label001;
            case 50: goto label001;
            case 51: goto label001;
            case 52: goto label001;
            case 53: goto label001;
            case 54: goto label088;
            case 55: goto label090;
            case 56: goto label092;
            case 57: goto label094;
            case 58: goto label001;
            case 59: goto label001;
            case 60: goto label096;
            case 61: goto label001;
            case 62: goto label098;
            case 63: goto label001;
            case 64: goto label100;
            case 65: goto label102;
            case 66: goto label001;
            case 67: goto label104;
            default: goto label001;
        };

     label001:
        $r2 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>($r1, $r2);

        return $r2;

     label002:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isNumber(java.lang.Object)>($r2);

        if $z0 == 0 goto label004;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label003:
        return $r3;

     label004:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label003;

     label005:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isQuantity(java.lang.Object)>($r2);

        if $z0 == 0 goto label007;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label006:
        return $r3;

     label007:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label006;

     label008:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isComplex(java.lang.Object)>($r2);

        if $z0 == 0 goto label010;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label009:
        return $r3;

     label010:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label009;

     label011:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isReal(java.lang.Object)>($r2);

        if $z0 == 0 goto label013;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label012:
        return $r3;

     label013:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label012;

     label014:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isRational(java.lang.Object)>($r2);

        if $z0 == 0 goto label016;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label015:
        return $r3;

     label016:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label015;

     label017:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isInteger(java.lang.Object)>($r2);

        if $z0 == 0 goto label019;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label018:
        return $r3;

     label019:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label018;

     label020:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isExact(java.lang.Object)>($r2);

        if $z0 == 0 goto label022;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label021:
        return $r3;

     label022:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label021;

     label023:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isInexact(java.lang.Object)>($r2);

        if $z0 == 0 goto label025;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label024:
        return $r3;

     label025:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label024;

     label026:
        $r4 = (java.lang.Number) $r2;

     label027:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isZero(java.lang.Number)>($r4);

        if $z0 == 0 goto label029;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label028:
        return $r3;

     label029:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label028;

     label030:
        $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label031:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isPositive(gnu.math.RealNum)>($r5);

        if $z0 == 0 goto label033;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label032:
        return $r3;

     label033:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label032;

     label034:
        $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label035:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isNegative(gnu.math.RealNum)>($r5);

        if $z0 == 0 goto label037;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label036:
        return $r3;

     label037:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label036;

     label038:
        $r4 = (java.lang.Number) $r2;

     label039:
        $r4 = staticinvoke <kawa.lib.numbers: java.lang.Number abs(java.lang.Number)>($r4);

        return $r4;

     label040:
        $r6 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RatNum coerceRatNum(java.lang.Object)>($r2);

     label041:
        $r7 = staticinvoke <kawa.lib.numbers: gnu.math.IntNum numerator(gnu.math.RatNum)>($r6);

        return $r7;

     label042:
        $r6 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RatNum coerceRatNum(java.lang.Object)>($r2);

     label043:
        $r7 = staticinvoke <kawa.lib.numbers: gnu.math.IntNum denominator(gnu.math.RatNum)>($r6);

        return $r7;

     label044:
        $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label045:
        $r5 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum floor(gnu.math.RealNum)>($r5);

        return $r5;

     label046:
        $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label047:
        $r5 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum ceiling(gnu.math.RealNum)>($r5);

        return $r5;

     label048:
        $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label049:
        $r5 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum truncate(gnu.math.RealNum)>($r5);

        return $r5;

     label050:
        $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label051:
        $r5 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum round(gnu.math.RealNum)>($r5);

        return $r5;

     label052:
        $r8 = (gnu.math.Complex) $r2;

     label053:
        $r8 = staticinvoke <kawa.lib.numbers: gnu.math.Complex exp(gnu.math.Complex)>($r8);

        return $r8;

     label054:
        $r8 = (gnu.math.Complex) $r2;

     label055:
        $r8 = staticinvoke <kawa.lib.numbers: gnu.math.Complex log(gnu.math.Complex)>($r8);

        return $r8;

     label056:
        $r4 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

     label057:
        $d0 = staticinvoke <kawa.lib.numbers: double sin(double)>($d0);

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r9;

     label058:
        $r4 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

     label059:
        $d0 = staticinvoke <kawa.lib.numbers: double cos(double)>($d0);

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r9;

     label060:
        $r4 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

     label061:
        $d0 = staticinvoke <kawa.lib.numbers: double tan(double)>($d0);

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r9;

     label062:
        $r4 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

     label063:
        $d0 = staticinvoke <kawa.lib.numbers: double asin(double)>($d0);

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r9;

     label064:
        $r4 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

     label065:
        $d0 = staticinvoke <kawa.lib.numbers: double acos(double)>($d0);

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r9;

     label066:
        $r4 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

     label067:
        $d0 = staticinvoke <kawa.lib.numbers: double lambda2(double)>($d0);

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r9;

     label068:
        $r10 = (gnu.math.Quantity) $r2;

     label069:
        $r10 = staticinvoke <kawa.lib.numbers: gnu.math.Quantity lambda3(gnu.math.Quantity)>($r10);

        return $r10;

     label070:
        $r4 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

     label071:
        $d0 = staticinvoke <kawa.lib.numbers: double lambda4(double)>($d0);

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r9;

     label072:
        $r8 = (gnu.math.Complex) $r2;

     label073:
        $r5 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum realPart(gnu.math.Complex)>($r8);

        return $r5;

     label074:
        $r8 = (gnu.math.Complex) $r2;

     label075:
        $r5 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum imagPart(gnu.math.Complex)>($r8);

        return $r5;

     label076:
        $r4 = (java.lang.Number) $r2;

     label077:
        $r4 = staticinvoke <kawa.lib.numbers: java.lang.Number magnitude(java.lang.Number)>($r4);

        return $r4;

     label078:
        $r8 = (gnu.math.Complex) $r2;

     label079:
        $r5 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum angle(gnu.math.Complex)>($r8);

        return $r5;

     label080:
        $r4 = (java.lang.Number) $r2;

     label081:
        $r4 = staticinvoke <kawa.lib.numbers: java.lang.Number inexact(java.lang.Number)>($r4);

        return $r4;

     label082:
        $r4 = (java.lang.Number) $r2;

     label083:
        $r4 = staticinvoke <kawa.lib.numbers: java.lang.Number exact(java.lang.Number)>($r4);

        return $r4;

     label084:
        $r4 = (java.lang.Number) $r2;

     label085:
        $r4 = staticinvoke <kawa.lib.numbers: java.lang.Number exact$To$Inexact(java.lang.Number)>($r4);

        return $r4;

     label086:
        $r4 = (java.lang.Number) $r2;

     label087:
        $r4 = staticinvoke <kawa.lib.numbers: java.lang.Number inexact$To$Exact(java.lang.Number)>($r4);

        return $r4;

     label088:
        $r7 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label089:
        $i0 = staticinvoke <kawa.lib.numbers: int logcount(gnu.math.IntNum)>($r7);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r11;

     label090:
        $r7 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label091:
        $i0 = staticinvoke <kawa.lib.numbers: int bitwiseBitCount(gnu.math.IntNum)>($r7);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r11;

     label092:
        $r7 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label093:
        $i0 = staticinvoke <kawa.lib.numbers: int bitwiseLength(gnu.math.IntNum)>($r7);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r11;

     label094:
        $r7 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label095:
        $i0 = staticinvoke <kawa.lib.numbers: int bitwiseFirstBitSet(gnu.math.IntNum)>($r7);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r11;

     label096:
        $r4 = (java.lang.Number) $r2;

     label097:
        $r12 = staticinvoke <kawa.lib.numbers: java.lang.CharSequence number$To$String(java.lang.Number)>($r4);

        return $r12;

     label098:
        $r12 = (java.lang.CharSequence) $r2;

     label099:
        $r2 = staticinvoke <kawa.lib.numbers: java.lang.Object string$To$Number(java.lang.CharSequence)>($r12);

        return $r2;

     label100:
        $r10 = (gnu.math.Quantity) $r2;

     label101:
        $r8 = staticinvoke <kawa.lib.numbers: gnu.math.Complex quantity$To$Number(gnu.math.Quantity)>($r10);

        return $r8;

     label102:
        $r10 = (gnu.math.Quantity) $r2;

     label103:
        $r13 = staticinvoke <kawa.lib.numbers: gnu.math.Unit quantity$To$Unit(gnu.math.Quantity)>($r10);

        return $r13;

     label104:
        $r14 = staticinvoke <kawa.lib.numbers: gnu.math.Duration duration(java.lang.Object)>($r2);

        return $r14;

     label105:
        $r15 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r15, "zero?", 1, $r2);

        throw $r16;

     label106:
        $r17 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r17, "positive?", 1, $r2);

        throw $r16;

     label107:
        $r18 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r18, "negative?", 1, $r2);

        throw $r16;

     label108:
        $r19 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r19, "abs", 1, $r2);

        throw $r16;

     label109:
        $r20 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r20, "numerator", 1, $r2);

        throw $r16;

     label110:
        $r21 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r21, "denominator", 1, $r2);

        throw $r16;

     label111:
        $r22 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r22, "floor", 1, $r2);

        throw $r16;

     label112:
        $r23 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r23, "ceiling", 1, $r2);

        throw $r16;

     label113:
        $r24 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r24, "truncate", 1, $r2);

        throw $r16;

     label114:
        $r25 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r25, "round", 1, $r2);

        throw $r16;

     label115:
        $r26 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r26, "exp", 1, $r2);

        throw $r16;

     label116:
        $r27 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r27, "log", 1, $r2);

        throw $r16;

     label117:
        $r28 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r28, "sin", 1, $r2);

        throw $r16;

     label118:
        $r29 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r29, "cos", 1, $r2);

        throw $r16;

     label119:
        $r30 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r30, "tan", 1, $r2);

        throw $r16;

     label120:
        $r31 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r31, "asin", 1, $r2);

        throw $r16;

     label121:
        $r32 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r32, "acos", 1, $r2);

        throw $r16;

     label122:
        $r33 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r33, "lambda", 1, $r2);

        throw $r16;

     label123:
        $r34 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r34, "lambda", 1, $r2);

        throw $r16;

     label124:
        $r35 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r35, "lambda", 1, $r2);

        throw $r16;

     label125:
        $r36 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r36, "real-part", 1, $r2);

        throw $r16;

     label126:
        $r37 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r37, "imag-part", 1, $r2);

        throw $r16;

     label127:
        $r38 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r38, "magnitude", 1, $r2);

        throw $r16;

     label128:
        $r39 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r39, "angle", 1, $r2);

        throw $r16;

     label129:
        $r40 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r40, "inexact", 1, $r2);

        throw $r16;

     label130:
        $r41 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r41, "exact", 1, $r2);

        throw $r16;

     label131:
        $r42 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r42, "exact->inexact", 1, $r2);

        throw $r16;

     label132:
        $r43 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r43, "inexact->exact", 1, $r2);

        throw $r16;

     label133:
        $r44 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r44, "logcount", 1, $r2);

        throw $r16;

     label134:
        $r45 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r45, "bitwise-bit-count", 1, $r2);

        throw $r16;

     label135:
        $r46 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r46, "bitwise-length", 1, $r2);

        throw $r16;

     label136:
        $r47 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r47, "bitwise-first-bit-set", 1, $r2);

        throw $r16;

     label137:
        $r48 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r48, "number->string", 1, $r2);

        throw $r16;

     label138:
        $r49 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r49, "string->number", 1, $r2);

        throw $r16;

     label139:
        $r50 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r50, "quantity->number", 1, $r2);

        throw $r16;

     label140:
        $r51 := @caughtexception;

        $r16 = new gnu.mapping.WrongType;

        specialinvoke $r16.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r51, "quantity->unit", 1, $r2);

        throw $r16;

        catch java.lang.ClassCastException from label026 to label027 with label105;
        catch java.lang.ClassCastException from label030 to label031 with label106;
        catch java.lang.ClassCastException from label034 to label035 with label107;
        catch java.lang.ClassCastException from label038 to label039 with label108;
        catch java.lang.ClassCastException from label040 to label041 with label109;
        catch java.lang.ClassCastException from label042 to label043 with label110;
        catch java.lang.ClassCastException from label044 to label045 with label111;
        catch java.lang.ClassCastException from label046 to label047 with label112;
        catch java.lang.ClassCastException from label048 to label049 with label113;
        catch java.lang.ClassCastException from label050 to label051 with label114;
        catch java.lang.ClassCastException from label052 to label053 with label115;
        catch java.lang.ClassCastException from label054 to label055 with label116;
        catch java.lang.ClassCastException from label056 to label057 with label117;
        catch java.lang.ClassCastException from label058 to label059 with label118;
        catch java.lang.ClassCastException from label060 to label061 with label119;
        catch java.lang.ClassCastException from label062 to label063 with label120;
        catch java.lang.ClassCastException from label064 to label065 with label121;
        catch java.lang.ClassCastException from label066 to label067 with label122;
        catch java.lang.ClassCastException from label068 to label069 with label123;
        catch java.lang.ClassCastException from label070 to label071 with label124;
        catch java.lang.ClassCastException from label072 to label073 with label125;
        catch java.lang.ClassCastException from label074 to label075 with label126;
        catch java.lang.ClassCastException from label076 to label077 with label127;
        catch java.lang.ClassCastException from label078 to label079 with label128;
        catch java.lang.ClassCastException from label080 to label081 with label129;
        catch java.lang.ClassCastException from label082 to label083 with label130;
        catch java.lang.ClassCastException from label084 to label085 with label131;
        catch java.lang.ClassCastException from label086 to label087 with label132;
        catch java.lang.ClassCastException from label088 to label089 with label133;
        catch java.lang.ClassCastException from label090 to label091 with label134;
        catch java.lang.ClassCastException from label092 to label093 with label135;
        catch java.lang.ClassCastException from label094 to label095 with label136;
        catch java.lang.ClassCastException from label096 to label097 with label137;
        catch java.lang.ClassCastException from label098 to label099 with label138;
        catch java.lang.ClassCastException from label100 to label101 with label139;
        catch java.lang.ClassCastException from label102 to label103 with label140;
    }
