    void <init>(java.lang.String, java.lang.String, boolean, byte[], boolean, boolean)
    {
        byte[] $r3;
        java.lang.Object[] $r7;
        com.itextpdf.text.pdf.IntHashtable $r11;
        short $s2;
        com.itextpdf.text.pdf.TrueTypeFont$FontHeader $r8;
        int $i0, $i1;
        com.itextpdf.text.pdf.TrueTypeFont$WindowsMetrics $r4, $r10;
        java.lang.String $r1, $r2, $r5, $r6;
        boolean $z0, $z1, $z2;
        com.itextpdf.text.pdf.TrueTypeFont r0;
        com.itextpdf.text.DocumentException $r13;
        java.lang.StringBuilder $r12;
        com.itextpdf.text.pdf.TrueTypeFont$HorizontalHeader $r9;

        r0 := @this: com.itextpdf.text.pdf.TrueTypeFont;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z2 := @parameter2: boolean;

        $r3 := @parameter3: byte[];

        $z0 := @parameter4: boolean;

        $z1 := @parameter5: boolean;

        specialinvoke r0.<com.itextpdf.text.pdf.BaseFont: void <init>()>();

        r0.<com.itextpdf.text.pdf.TrueTypeFont: boolean justNames> = 0;

        r0.<com.itextpdf.text.pdf.TrueTypeFont: boolean cff> = 0;

        r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String style> = "";

        $r8 = new com.itextpdf.text.pdf.TrueTypeFont$FontHeader;

        specialinvoke $r8.<com.itextpdf.text.pdf.TrueTypeFont$FontHeader: void <init>()>();

        r0.<com.itextpdf.text.pdf.TrueTypeFont: com.itextpdf.text.pdf.TrueTypeFont$FontHeader head> = $r8;

        $r9 = new com.itextpdf.text.pdf.TrueTypeFont$HorizontalHeader;

        specialinvoke $r9.<com.itextpdf.text.pdf.TrueTypeFont$HorizontalHeader: void <init>()>();

        r0.<com.itextpdf.text.pdf.TrueTypeFont: com.itextpdf.text.pdf.TrueTypeFont$HorizontalHeader hhea> = $r9;

        $r10 = new com.itextpdf.text.pdf.TrueTypeFont$WindowsMetrics;

        specialinvoke $r10.<com.itextpdf.text.pdf.TrueTypeFont$WindowsMetrics: void <init>()>();

        r0.<com.itextpdf.text.pdf.TrueTypeFont: com.itextpdf.text.pdf.TrueTypeFont$WindowsMetrics os_2> = $r10;

        $r11 = new com.itextpdf.text.pdf.IntHashtable;

        specialinvoke $r11.<com.itextpdf.text.pdf.IntHashtable: void <init>()>();

        r0.<com.itextpdf.text.pdf.TrueTypeFont: com.itextpdf.text.pdf.IntHashtable kerning> = $r11;

        r0.<com.itextpdf.text.pdf.TrueTypeFont: boolean isFixedPitch> = 0;

        r0.<com.itextpdf.text.pdf.TrueTypeFont: boolean justNames> = 0;

        $r5 = staticinvoke <com.itextpdf.text.pdf.TrueTypeFont: java.lang.String getBaseName(java.lang.String)>($r1);

        $r6 = staticinvoke <com.itextpdf.text.pdf.TrueTypeFont: java.lang.String getTTCName(java.lang.String)>($r5);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label1;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String style> = $r1;

     label1:
        r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String encoding> = $r2;

        r0.<com.itextpdf.text.pdf.TrueTypeFont: boolean embedded> = $z2;

        r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String fileName> = $r6;

        r0.<com.itextpdf.text.pdf.TrueTypeFont: int fontType> = 1;

        r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String ttcIndex> = "";

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label2;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i0);

        r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String ttcIndex> = $r1;

     label2:
        $r1 = r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String fileName>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".ttf");

        if $z2 != 0 goto label3;

        $r1 = r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String fileName>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".otf");

        if $z2 != 0 goto label3;

        $r1 = r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String fileName>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".ttc");

        if $z2 != 0 goto label3;

        $r13 = new com.itextpdf.text.DocumentException;

        $r7 = newarray (java.lang.Object)[1];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r1 = r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String fileName>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String style>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[0] = $r1;

        $r1 = staticinvoke <com.itextpdf.text.error_messages.MessageLocalization: java.lang.String getComposedMessage(java.lang.String,java.lang.Object[])>("1.is.not.a.ttf.otf.or.ttc.font.file", $r7);

        specialinvoke $r13.<com.itextpdf.text.DocumentException: void <init>(java.lang.String)>($r1);

        throw $r13;

     label3:
        virtualinvoke r0.<com.itextpdf.text.pdf.TrueTypeFont: void process(byte[],boolean)>(null, 0);

        $z2 = r0.<com.itextpdf.text.pdf.TrueTypeFont: boolean embedded>;

        if $z2 == 0 goto label4;

        $r4 = r0.<com.itextpdf.text.pdf.TrueTypeFont: com.itextpdf.text.pdf.TrueTypeFont$WindowsMetrics os_2>;

        $s2 = $r4.<com.itextpdf.text.pdf.TrueTypeFont$WindowsMetrics: short fsType>;

        $i0 = (int) $s2;

        if $i0 != 2 goto label4;

        $r13 = new com.itextpdf.text.DocumentException;

        $r7 = newarray (java.lang.Object)[1];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r1 = r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String fileName>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String style>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[0] = $r1;

        $r1 = staticinvoke <com.itextpdf.text.error_messages.MessageLocalization: java.lang.String getComposedMessage(java.lang.String,java.lang.Object[])>("1.cannot.be.embedded.due.to.licensing.restrictions", $r7);

        specialinvoke $r13.<com.itextpdf.text.DocumentException: void <init>(java.lang.String)>($r1);

        throw $r13;

     label4:
        $r1 = r0.<com.itextpdf.text.pdf.TrueTypeFont: java.lang.String encoding>;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z2 != 0 goto label5;

        staticinvoke <com.itextpdf.text.pdf.PdfEncodings: byte[] convertToBytes(java.lang.String,java.lang.String)>(" ", $r2);

     label5:
        virtualinvoke r0.<com.itextpdf.text.pdf.TrueTypeFont: void createEncoding()>();

        return;
    }
