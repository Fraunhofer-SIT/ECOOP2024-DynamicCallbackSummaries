    void <init>(java.lang.String, java.lang.String, boolean, byte[], byte[], boolean)
    {
        byte[] $r11, $r12;
        com.itextpdf.text.pdf.fonts.FontsResourceAnchor $r16, $r32;
        boolean $z0, $z1;
        java.lang.Exception $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.StringBuilder $r33;
        java.lang.ClassLoader $r19;
        java.lang.Throwable $r24, $r25, $r27, $r28, $r29;
        java.lang.Object[] $r14;
        java.io.ByteArrayOutputStream $r22, $r34;
        com.itextpdf.text.pdf.Type1Font r0;
        java.util.HashMap $r13, $r30;
        int $i0;
        java.lang.String $r9, $r10, $r17;
        java.io.PrintStream $r26;
        com.itextpdf.text.pdf.RandomAccessFileOrArray $r15, $r23, $r35;
        com.itextpdf.text.DocumentException $r31;
        java.lang.Class $r18;
        java.io.InputStream $r20, $r21;

        r0 := @this: com.itextpdf.text.pdf.Type1Font;

        $r9 := @parameter0: java.lang.String;

        $r10 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r11 := @parameter3: byte[];

        $r12 := @parameter4: byte[];

        $z1 := @parameter5: boolean;

        specialinvoke r0.<com.itextpdf.text.pdf.BaseFont: void <init>()>();

        r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String Weight> = "";

        r0.<com.itextpdf.text.pdf.Type1Font: float ItalicAngle> = 0.0F;

        r0.<com.itextpdf.text.pdf.Type1Font: boolean IsFixedPitch> = 0;

        r0.<com.itextpdf.text.pdf.Type1Font: int llx> = -50;

        r0.<com.itextpdf.text.pdf.Type1Font: int lly> = -200;

        r0.<com.itextpdf.text.pdf.Type1Font: int urx> = 1000;

        r0.<com.itextpdf.text.pdf.Type1Font: int ury> = 900;

        r0.<com.itextpdf.text.pdf.Type1Font: int UnderlinePosition> = -100;

        r0.<com.itextpdf.text.pdf.Type1Font: int UnderlineThickness> = 50;

        r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String EncodingScheme> = "FontSpecific";

        r0.<com.itextpdf.text.pdf.Type1Font: int CapHeight> = 700;

        r0.<com.itextpdf.text.pdf.Type1Font: int XHeight> = 480;

        r0.<com.itextpdf.text.pdf.Type1Font: int Ascender> = 800;

        r0.<com.itextpdf.text.pdf.Type1Font: int Descender> = -200;

        r0.<com.itextpdf.text.pdf.Type1Font: int StdVW> = 80;

        $r30 = new java.util.HashMap;

        specialinvoke $r30.<java.util.HashMap: void <init>()>();

        r0.<com.itextpdf.text.pdf.Type1Font: java.util.HashMap CharMetrics> = $r30;

        $r30 = new java.util.HashMap;

        specialinvoke $r30.<java.util.HashMap: void <init>()>();

        r0.<com.itextpdf.text.pdf.Type1Font: java.util.HashMap KernPairs> = $r30;

        r0.<com.itextpdf.text.pdf.Type1Font: boolean builtinFont> = 0;

        goto label01;

     label01:
        r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String encoding> = $r10;

        r0.<com.itextpdf.text.pdf.Type1Font: boolean embedded> = $z0;

        r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String fileName> = $r9;

        r0.<com.itextpdf.text.pdf.Type1Font: int fontType> = 0;

        $r13 = <com.itextpdf.text.pdf.Type1Font: java.util.HashMap BuiltinFonts14>;

        $z0 = virtualinvoke $r13.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r9);

        $r15 = null;

        if $z0 == 0 goto label37;

        r0.<com.itextpdf.text.pdf.Type1Font: boolean embedded> = 0;

        r0.<com.itextpdf.text.pdf.Type1Font: boolean builtinFont> = 1;

        $r11 = newarray (byte)[1024];

     label02:
        $r16 = <com.itextpdf.text.pdf.Type1Font: com.itextpdf.text.pdf.fonts.FontsResourceAnchor resourceAnchor>;

     label03:
        if $r16 != null goto label06;

     label04:
        $r32 = new com.itextpdf.text.pdf.fonts.FontsResourceAnchor;

     label05:
        specialinvoke $r32.<com.itextpdf.text.pdf.fonts.FontsResourceAnchor: void <init>()>();

        <com.itextpdf.text.pdf.Type1Font: com.itextpdf.text.pdf.fonts.FontsResourceAnchor resourceAnchor> = $r32;

     label06:
        $r33 = new java.lang.StringBuilder;

     label07:
        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("com/itextpdf/text/pdf/fonts/");

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".afm");

        $r17 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = <com.itextpdf.text.pdf.Type1Font: com.itextpdf.text.pdf.fonts.FontsResourceAnchor resourceAnchor>;

        $r18 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r20 = staticinvoke <com.itextpdf.text.io.StreamUtil: java.io.InputStream getResourceStream(java.lang.String,java.lang.ClassLoader)>($r17, $r19);

     label08:
        $r21 = $r20;

        if $r20 == null goto label31;

     label09:
        $r34 = new java.io.ByteArrayOutputStream;

     label10:
        $r22 = $r34;

     label11:
        specialinvoke $r34.<java.io.ByteArrayOutputStream: void <init>()>();

     label12:
        $i0 = virtualinvoke $r20.<java.io.InputStream: int read(byte[])>($r11);

     label13:
        if $i0 < 0 goto label16;

     label14:
        virtualinvoke $r22.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r11, 0, $i0);

     label15:
        goto label12;

     label16:
        $r11 = virtualinvoke $r22.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label17:
        if $r20 == null goto label19;

     label18:
        virtualinvoke $r20.<java.io.InputStream: void close()>();

     label19:
        $r35 = new com.itextpdf.text.pdf.RandomAccessFileOrArray;

     label20:
        $r23 = $r35;

     label21:
        specialinvoke $r35.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(byte[])>($r11);

     label22:
        virtualinvoke r0.<com.itextpdf.text.pdf.Type1Font: void process(com.itextpdf.text.pdf.RandomAccessFileOrArray)>($r35);

     label23:
        virtualinvoke $r35.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

     label24:
        goto label59;

     label25:
        $r24 := @caughtexception;

        $r15 = $r23;

        goto label27;

     label26:
        $r24 := @caughtexception;

     label27:
        if $r15 == null goto label29;

     label28:
        virtualinvoke $r15.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

     label29:
        throw $r24;

     label30:
        $r25 := @caughtexception;

        goto label34;

     label31:
        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = $r9;

        $r9 = staticinvoke <com.itextpdf.text.error_messages.MessageLocalization: java.lang.String getComposedMessage(java.lang.String,java.lang.Object[])>("1.not.found.as.resource", $r14);

        $r26 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r9);

        $r31 = new com.itextpdf.text.DocumentException;

     label32:
        specialinvoke $r31.<com.itextpdf.text.DocumentException: void <init>(java.lang.String)>($r9);

        throw $r31;

     label33:
        $r25 := @caughtexception;

        $r21 = null;

     label34:
        if $r21 == null goto label36;

     label35:
        virtualinvoke $r21.<java.io.InputStream: void close()>();

     label36:
        throw $r25;

     label37:
        $r17 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r17.<java.lang.String: boolean endsWith(java.lang.String)>(".afm");

        if $z0 == 0 goto label47;

     label38:
        $r35 = new com.itextpdf.text.pdf.RandomAccessFileOrArray;

     label39:
        $z0 = <com.itextpdf.text.Document: boolean plainRandomAccess>;

        specialinvoke $r35.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(java.lang.String,boolean,boolean)>($r9, 0, $z0);

     label40:
        $r15 = $r35;

        goto label41;

     label41:
        virtualinvoke r0.<com.itextpdf.text.pdf.Type1Font: void process(com.itextpdf.text.pdf.RandomAccessFileOrArray)>($r15);

     label42:
        virtualinvoke $r15.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

     label43:
        goto label59;

     label44:
        $r27 := @caughtexception;

        if $r15 == null goto label46;

     label45:
        virtualinvoke $r15.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

     label46:
        throw $r27;

     label47:
        $r17 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r17.<java.lang.String: boolean endsWith(java.lang.String)>(".pfm");

        if $z0 == 0 goto label68;

     label48:
        $r34 = new java.io.ByteArrayOutputStream;

     label49:
        $r22 = $r34;

     label50:
        specialinvoke $r34.<java.io.ByteArrayOutputStream: void <init>()>();

     label51:
        $r35 = new com.itextpdf.text.pdf.RandomAccessFileOrArray;

     label52:
        $z0 = <com.itextpdf.text.Document: boolean plainRandomAccess>;

        specialinvoke $r35.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(java.lang.String,boolean,boolean)>($r9, 0, $z0);

     label53:
        $r15 = $r35;

        goto label54;

     label54:
        staticinvoke <com.itextpdf.text.pdf.Pfm2afm: void convert(com.itextpdf.text.pdf.RandomAccessFileOrArray,java.io.OutputStream)>($r15, $r22);

        virtualinvoke $r15.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

        $r35 = new com.itextpdf.text.pdf.RandomAccessFileOrArray;

     label55:
        $r23 = $r35;

     label56:
        $r11 = virtualinvoke $r22.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r35.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void <init>(byte[])>($r11);

     label57:
        virtualinvoke r0.<com.itextpdf.text.pdf.Type1Font: void process(com.itextpdf.text.pdf.RandomAccessFileOrArray)>($r35);

     label58:
        virtualinvoke $r35.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

     label59:
        $r9 = r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String EncodingScheme>;

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String EncodingScheme> = $r9;

        $r9 = r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String EncodingScheme>;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("AdobeStandardEncoding");

        if $z0 != 0 goto label60;

        $r9 = r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String EncodingScheme>;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("StandardEncoding");

        if $z0 == 0 goto label61;

     label60:
        r0.<com.itextpdf.text.pdf.Type1Font: boolean fontSpecific> = 0;

     label61:
        $r9 = r0.<com.itextpdf.text.pdf.Type1Font: java.lang.String encoding>;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z0 != 0 goto label62;

        staticinvoke <com.itextpdf.text.pdf.PdfEncodings: byte[] convertToBytes(java.lang.String,java.lang.String)>(" ", $r10);

     label62:
        virtualinvoke r0.<com.itextpdf.text.pdf.Type1Font: void createEncoding()>();

        return;

     label63:
        $r28 := @caughtexception;

        $r15 = $r23;

        $r29 = $r28;

        goto label65;

     label64:
        $r29 := @caughtexception;

     label65:
        if $r15 == null goto label67;

     label66:
        virtualinvoke $r15.<com.itextpdf.text.pdf.RandomAccessFileOrArray: void close()>();

     label67:
        throw $r29;

     label68:
        $r31 = new com.itextpdf.text.DocumentException;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = $r9;

        $r9 = staticinvoke <com.itextpdf.text.error_messages.MessageLocalization: java.lang.String getComposedMessage(java.lang.String,java.lang.Object[])>("1.is.not.an.afm.or.pfm.font.file", $r14);

        specialinvoke $r31.<com.itextpdf.text.DocumentException: void <init>(java.lang.String)>($r9);

        throw $r31;

     label69:
        $r1 := @caughtexception;

        goto label19;

     label70:
        $r2 := @caughtexception;

        goto label59;

     label71:
        $r3 := @caughtexception;

        goto label29;

     label72:
        $r4 := @caughtexception;

        goto label36;

     label73:
        $r5 := @caughtexception;

        goto label59;

     label74:
        $r6 := @caughtexception;

        goto label46;

     label75:
        $r7 := @caughtexception;

        goto label59;

     label76:
        $r8 := @caughtexception;

        goto label67;

        catch java.lang.Throwable from label02 to label03 with label33;
        catch java.lang.Throwable from label04 to label05 with label33;
        catch java.lang.Throwable from label05 to label07 with label33;
        catch java.lang.Throwable from label07 to label08 with label33;
        catch java.lang.Throwable from label09 to label10 with label30;
        catch java.lang.Throwable from label11 to label13 with label30;
        catch java.lang.Throwable from label14 to label15 with label30;
        catch java.lang.Throwable from label16 to label17 with label30;
        catch java.lang.Exception from label18 to label19 with label69;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.lang.Throwable from label22 to label23 with label25;
        catch java.lang.Exception from label23 to label24 with label70;
        catch java.lang.Exception from label28 to label29 with label71;
        catch java.lang.Throwable from label31 to label32 with label30;
        catch java.lang.Throwable from label32 to label33 with label30;
        catch java.lang.Exception from label35 to label36 with label72;
        catch java.lang.Throwable from label38 to label39 with label44;
        catch java.lang.Throwable from label39 to label40 with label44;
        catch java.lang.Throwable from label41 to label42 with label44;
        catch java.lang.Exception from label42 to label43 with label73;
        catch java.lang.Exception from label45 to label46 with label74;
        catch java.lang.Throwable from label48 to label49 with label64;
        catch java.lang.Throwable from label50 to label51 with label64;
        catch java.lang.Throwable from label51 to label52 with label64;
        catch java.lang.Throwable from label52 to label53 with label64;
        catch java.lang.Throwable from label54 to label55 with label64;
        catch java.lang.Throwable from label56 to label57 with label64;
        catch java.lang.Throwable from label57 to label58 with label63;
        catch java.lang.Exception from label58 to label59 with label75;
        catch java.lang.Exception from label66 to label67 with label76;
    }
