    protected void send(java.io.OutputStream)
    {
        java.lang.Throwable $r23;
        java.util.Date $r12;
        java.text.SimpleDateFormat $r3;
        java.lang.Error $r22;
        long $l0;
        java.util.logging.Level $r25;
        java.util.Locale $r4;
        fi.iki.elonen.NanoHTTPD$ContentType $r10;
        fi.iki.elonen.NanoHTTPD$Method $r20, $r21;
        java.util.Map $r13;
        java.io.OutputStreamWriter $r9;
        java.lang.String $r1, $r18;
        boolean $z0;
        java.io.OutputStream $r2;
        java.io.PrintWriter $r7, $r11;
        java.util.Map$Entry $r17;
        java.util.Iterator $r15;
        java.util.TimeZone $r5;
        java.io.BufferedWriter $r8;
        fi.iki.elonen.NanoHTTPD$Response r0;
        java.util.Set $r14;
        java.util.logging.Logger $r24;
        fi.iki.elonen.NanoHTTPD$Response$IStatus $r6;
        java.lang.Object $r16;
        java.io.InputStream $r19;

        r0 := @this: fi.iki.elonen.NanoHTTPD$Response;

        $r2 := @parameter0: java.io.OutputStream;

        $r3 = new java.text.SimpleDateFormat;

        $r4 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("E, d MMM yyyy HH:mm:ss \'GMT\'", $r4);

        $r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke $r3.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r5);

        $r6 = r0.<fi.iki.elonen.NanoHTTPD$Response: fi.iki.elonen.NanoHTTPD$Response$IStatus status>;

        if $r6 == null goto label40;

        $r7 = new java.io.PrintWriter;

        $r8 = new java.io.BufferedWriter;

        $r9 = new java.io.OutputStreamWriter;

        $r10 = new fi.iki.elonen.NanoHTTPD$ContentType;

        $r1 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.lang.String mimeType>;

     label01:
        specialinvoke $r10.<fi.iki.elonen.NanoHTTPD$ContentType: void <init>(java.lang.String)>($r1);

        $r1 = virtualinvoke $r10.<fi.iki.elonen.NanoHTTPD$ContentType: java.lang.String getEncoding()>();

        specialinvoke $r9.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r2, $r1);

        specialinvoke $r8.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r9);

        specialinvoke $r7.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r8, 0);

        $r11 = virtualinvoke $r7.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("HTTP/1.1 ");

     label02:
        $r6 = r0.<fi.iki.elonen.NanoHTTPD$Response: fi.iki.elonen.NanoHTTPD$Response$IStatus status>;

     label03:
        $r1 = interfaceinvoke $r6.<fi.iki.elonen.NanoHTTPD$Response$IStatus: java.lang.String getDescription()>();

        $r11 = virtualinvoke $r11.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r1);

        virtualinvoke $r11.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(" \r\n");

     label04:
        $r1 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.lang.String mimeType>;

        if $r1 == null goto label06;

        $r1 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.lang.String mimeType>;

     label05:
        virtualinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: void printHeader(java.io.PrintWriter,java.lang.String,java.lang.String)>($r7, "Content-Type", $r1);

     label06:
        $r1 = virtualinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: java.lang.String getHeader(java.lang.String)>("date");

     label07:
        if $r1 != null goto label09;

        $r12 = new java.util.Date;

     label08:
        specialinvoke $r12.<java.util.Date: void <init>()>();

        $r1 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r12);

        virtualinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: void printHeader(java.io.PrintWriter,java.lang.String,java.lang.String)>($r7, "Date", $r1);

     label09:
        $r13 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.util.Map header>;

     label10:
        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Set entrySet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

     label12:
        if $z0 == 0 goto label21;

     label13:
        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

     label14:
        $r17 = (java.util.Map$Entry) $r16;

     label15:
        $r16 = interfaceinvoke $r17.<java.util.Map$Entry: java.lang.Object getKey()>();

     label16:
        $r1 = (java.lang.String) $r16;

     label17:
        $r16 = interfaceinvoke $r17.<java.util.Map$Entry: java.lang.Object getValue()>();

     label18:
        $r18 = (java.lang.String) $r16;

     label19:
        virtualinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: void printHeader(java.io.PrintWriter,java.lang.String,java.lang.String)>($r7, $r1, $r18);

     label20:
        goto label11;

     label21:
        $r1 = virtualinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: java.lang.String getHeader(java.lang.String)>("connection");

     label22:
        if $r1 != null goto label25;

        $z0 = r0.<fi.iki.elonen.NanoHTTPD$Response: boolean keepAlive>;

        if $z0 == 0 goto label23;

        $r1 = "keep-alive";

        goto label24;

     label23:
        $r1 = "close";

     label24:
        virtualinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: void printHeader(java.io.PrintWriter,java.lang.String,java.lang.String)>($r7, "Connection", $r1);

     label25:
        $r1 = virtualinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: java.lang.String getHeader(java.lang.String)>("content-length");

     label26:
        if $r1 == null goto label27;

        r0.<fi.iki.elonen.NanoHTTPD$Response: boolean encodeAsGzip> = 0;

     label27:
        $z0 = r0.<fi.iki.elonen.NanoHTTPD$Response: boolean encodeAsGzip>;

        if $z0 == 0 goto label29;

     label28:
        virtualinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: void printHeader(java.io.PrintWriter,java.lang.String,java.lang.String)>($r7, "Content-Encoding", "gzip");

        virtualinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: void setChunkedTransfer(boolean)>(1);

     label29:
        $r19 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.io.InputStream data>;

        if $r19 == null goto label30;

        $l0 = r0.<fi.iki.elonen.NanoHTTPD$Response: long contentLength>;

        goto label31;

     label30:
        $l0 = 0L;

     label31:
        $r20 = r0.<fi.iki.elonen.NanoHTTPD$Response: fi.iki.elonen.NanoHTTPD$Method requestMethod>;

        $r21 = <fi.iki.elonen.NanoHTTPD$Method: fi.iki.elonen.NanoHTTPD$Method HEAD>;

        if $r20 == $r21 goto label34;

        $z0 = r0.<fi.iki.elonen.NanoHTTPD$Response: boolean chunkedTransfer>;

        if $z0 == 0 goto label34;

     label32:
        virtualinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: void printHeader(java.io.PrintWriter,java.lang.String,java.lang.String)>($r7, "Transfer-Encoding", "chunked");

     label33:
        goto label36;

     label34:
        $z0 = r0.<fi.iki.elonen.NanoHTTPD$Response: boolean encodeAsGzip>;

        if $z0 != 0 goto label36;

     label35:
        $l0 = virtualinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: long sendContentLengthHeaderIfNotAlreadyPresent(java.io.PrintWriter,long)>($r7, $l0);

     label36:
        virtualinvoke $r7.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("\r\n");

        virtualinvoke $r7.<java.io.PrintWriter: void flush()>();

        specialinvoke r0.<fi.iki.elonen.NanoHTTPD$Response: void sendBodyWithCorrectTransferAndEncoding(java.io.OutputStream,long)>($r2, $l0);

        virtualinvoke $r2.<java.io.OutputStream: void flush()>();

     label37:
        $r19 = r0.<fi.iki.elonen.NanoHTTPD$Response: java.io.InputStream data>;

     label38:
        staticinvoke <fi.iki.elonen.NanoHTTPD: void access$000(java.lang.Object)>($r19);

     label39:
        return;

     label40:
        $r22 = new java.lang.Error;

     label41:
        specialinvoke $r22.<java.lang.Error: void <init>(java.lang.String)>("sendResponse(): Status can\'t be null.");

     label42:
        throw $r22;

     label43:
        $r23 := @caughtexception;

        $r24 = staticinvoke <fi.iki.elonen.NanoHTTPD: java.util.logging.Logger access$200()>();

        $r25 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r24.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r25, "Could not send response to the client", $r23);

        return;

        catch java.io.IOException from label01 to label02 with label43;
        catch java.io.IOException from label03 to label04 with label43;
        catch java.io.IOException from label05 to label07 with label43;
        catch java.io.IOException from label08 to label09 with label43;
        catch java.io.IOException from label10 to label12 with label43;
        catch java.io.IOException from label13 to label14 with label43;
        catch java.io.IOException from label15 to label16 with label43;
        catch java.io.IOException from label17 to label18 with label43;
        catch java.io.IOException from label19 to label20 with label43;
        catch java.io.IOException from label21 to label22 with label43;
        catch java.io.IOException from label24 to label26 with label43;
        catch java.io.IOException from label28 to label29 with label43;
        catch java.io.IOException from label32 to label33 with label43;
        catch java.io.IOException from label35 to label36 with label43;
        catch java.io.IOException from label36 to label37 with label43;
        catch java.io.IOException from label38 to label39 with label43;
        catch java.io.IOException from label41 to label42 with label43;
    }
