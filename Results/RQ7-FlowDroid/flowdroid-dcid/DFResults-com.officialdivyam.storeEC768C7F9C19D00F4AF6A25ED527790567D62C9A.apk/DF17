Source: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
$i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in <gnu.text.LineBufferedReader: int fill(int)>
Sink: interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5) in <gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>

<gnu.text.LineBufferedReader: int fill(int)>: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
<gnu.text.LineBufferedReader: int fill(int)>: $r2 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int fill(int)>: r0 := @this: gnu.text.LineBufferedReader
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r2 = staticinvoke <kawa.lib.ports: java.lang.Object inputPortLineNumber(gnu.text.LineBufferedReader)>($r13)
<kawa.lib.ports: java.lang.Object inputPortLineNumber(gnu.text.LineBufferedReader)>: $r4 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r1, $r4)
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r3[1] = $r2
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r3)
<gnu.mapping.MethodProc: java.lang.Object applyN(java.lang.Object[])>: virtualinvoke r0.<gnu.mapping.MethodProc: void checkN(java.lang.Object[],gnu.mapping.CallContext)>($r1, $r2)
<gnu.mapping.Procedure: void checkN(java.lang.Object[],gnu.mapping.CallContext)>: $i0 = virtualinvoke r0.<gnu.mapping.Procedure: int matchN(java.lang.Object[],gnu.mapping.CallContext)>($r1, $r2)
<gnu.mapping.Procedure: int matchN(java.lang.Object[],gnu.mapping.CallContext)>: $r2.<gnu.mapping.CallContext: java.lang.Object[] values> = $r1
<gnu.mapping.Procedure: int matchN(java.lang.Object[],gnu.mapping.CallContext)>: r0 := @this: gnu.mapping.Procedure
<gnu.mapping.Procedure: void checkN(java.lang.Object[],gnu.mapping.CallContext)>: throw $r3
<gnu.mapping.MethodProc: java.lang.Object applyN(java.lang.Object[])>: $r3 = virtualinvoke $r2.<gnu.mapping.CallContext: java.lang.Object runUntilValue()>()
<gnu.mapping.CallContext: java.lang.Object runUntilValue()>: virtualinvoke r0.<gnu.mapping.CallContext: void runUntilDone()>()
<gnu.mapping.CallContext: void runUntilDone()>: virtualinvoke $r1.<gnu.mapping.Procedure: void apply(gnu.mapping.CallContext)>(r0)
<gnu.expr.ModuleMethod: void apply(gnu.mapping.CallContext)>: $r9 = $r1.<gnu.mapping.CallContext: java.lang.Object[] values>
<gnu.expr.ModuleMethod: void apply(gnu.mapping.CallContext)>: $r5 = virtualinvoke r0.<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>($r9)
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: $r2 = virtualinvoke $r3.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>(r0, $r1)
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = $r2[0]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r2 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>($r1, $r4)
<kawa.lib.numbers: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r5 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r3)
<gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>: $r2 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>($r0)
<gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>: $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>()
<gnu.math.IntNum: gnu.math.IntNum asIntNumOrNull(java.lang.Object)>: return $r1
<gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>: $r0 := @parameter0: java.lang.Object
<kawa.lib.numbers: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r3 = $r2[$i0]
<kawa.lib.numbers: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: r0 := @this: kawa.lib.numbers
<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: $r4[1] = $r3
<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r5 = $r2[1]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = $r2[0]
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: $r4 = virtualinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r4, $r5)
<kawa.lib.lists: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.expr.ModuleMethod: void apply(gnu.mapping.CallContext)>: virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r5)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
<gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>: $r2 = (gnu.mapping.Values) $r0
<gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>: virtualinvoke $r2.<gnu.mapping.Values: void consume(gnu.lists.Consumer)>($r1)
<gnu.lists.TreeList: void consume(gnu.lists.Consumer)>: virtualinvoke r0.<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>(0, $i0, $r1)
<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>: $r2 = r0.<gnu.lists.TreeList: char[] data>
<gnu.lists.TreeList: int consumeIRange(int,int,gnu.lists.Consumer)>: interfaceinvoke $r1.<gnu.lists.Consumer: void write(char[],int,int)>($r2, $i3, i5)
