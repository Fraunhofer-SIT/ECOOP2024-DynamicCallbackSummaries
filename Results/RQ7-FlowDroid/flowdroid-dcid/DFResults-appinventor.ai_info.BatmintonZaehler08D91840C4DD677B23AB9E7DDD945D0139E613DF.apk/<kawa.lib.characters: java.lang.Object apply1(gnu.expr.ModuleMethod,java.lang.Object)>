    public java.lang.Object apply1(gnu.expr.ModuleMethod, java.lang.Object)
    {
        kawa.lib.characters r0;
        gnu.expr.ModuleMethod $r1;
        java.lang.Integer $r4;
        java.lang.ClassCastException $r6, $r8;
        gnu.mapping.WrongType $r7;
        gnu.text.Char $r3;
        int $i0;
        java.lang.Boolean r9;
        java.lang.Object $r2;
        java.lang.Number $r5;
        boolean $z0;

        r0 := @this: kawa.lib.characters;

        $r1 := @parameter0: gnu.expr.ModuleMethod;

        $r2 := @parameter1: java.lang.Object;

        $i0 = $r1.<gnu.expr.ModuleMethod: int selector>;

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label6;
            default: goto label1;
        };

     label1:
        $r2 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>($r1, $r2);

        return $r2;

     label2:
        $z0 = staticinvoke <kawa.lib.characters: boolean isChar(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        r9 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r9;

     label3:
        r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r9;

     label4:
        $r3 = (gnu.text.Char) $r2;

     label5:
        $i0 = staticinvoke <kawa.lib.characters: int char$To$Integer(gnu.text.Char)>($r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r4;

     label6:
        $r5 = (java.lang.Number) $r2;

        $i0 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

     label7:
        $r3 = staticinvoke <kawa.lib.characters: gnu.text.Char integer$To$Char(int)>($i0);

        return $r3;

     label8:
        $r6 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r6, "char->integer", 1, $r2);

        throw $r7;

     label9:
        $r8 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r8, "integer->char", 1, $r2);

        throw $r7;

        catch java.lang.ClassCastException from label4 to label5 with label8;
        catch java.lang.ClassCastException from label6 to label7 with label9;
    }
