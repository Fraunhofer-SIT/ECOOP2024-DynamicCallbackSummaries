Source: $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r5, 0, $i0)
$i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r5, 0, $i0) in <t4.j: long a(java.io.InputStream,java.io.OutputStream)>
Sink: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r5, 0, $i0) in <t4.j: long a(java.io.InputStream,java.io.OutputStream)>

<t4.j: long a(java.io.InputStream,java.io.OutputStream)>: $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r5, 0, $i0)
<t4.j: long a(java.io.InputStream,java.io.OutputStream)>: interfaceinvoke $r3.<t4.e: void a(java.lang.Object)>($r5)
<com.facebook.imagepipeline.memory.BasePool: void a(java.lang.Object)>: $z0 = virtualinvoke r0.<com.facebook.imagepipeline.memory.BasePool: boolean r(java.lang.Object)>($r1)
<com.facebook.imagepipeline.memory.BasePool: boolean r(java.lang.Object)>: return 1
<com.facebook.imagepipeline.memory.BasePool: void a(java.lang.Object)>: return
<t4.j: long a(java.io.InputStream,java.io.OutputStream)>: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r5, 0, $i0)
