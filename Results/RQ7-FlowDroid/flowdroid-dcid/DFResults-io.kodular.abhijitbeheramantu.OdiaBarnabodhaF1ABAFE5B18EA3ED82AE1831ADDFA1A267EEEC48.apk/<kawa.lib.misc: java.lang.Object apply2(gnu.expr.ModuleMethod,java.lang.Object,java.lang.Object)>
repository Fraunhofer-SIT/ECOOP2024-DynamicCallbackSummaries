    public java.lang.Object apply2(gnu.expr.ModuleMethod, java.lang.Object, java.lang.Object)
    {
        gnu.mapping.Symbol $r4, $r5;
        gnu.mapping.Environment $r7;
        gnu.expr.ModuleMethod $r1;
        java.lang.ClassCastException $r9, $r11, $r12, $r13;
        int $i0;
        java.lang.Boolean $r6;
        boolean $z0;
        kawa.lib.misc r0;
        gnu.mapping.Procedure $r8;
        gnu.mapping.WrongType $r10;
        java.lang.Object $r2, $r3;

        r0 := @this: kawa.lib.misc;

        $r1 := @parameter0: gnu.expr.ModuleMethod;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $i0 = $r1.<gnu.expr.ModuleMethod: int selector>;

        lookupswitch($i0)
        {
            case 6: goto label02;
            case 17: goto label07;
            case 24: goto label11;
            default: goto label01;
        };

     label01:
        $r2 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>($r1, $r2, $r3);

        return $r2;

     label02:
        $r4 = (gnu.mapping.Symbol) $r2;

     label03:
        $r5 = (gnu.mapping.Symbol) $r3;

     label04:
        $z0 = staticinvoke <kawa.lib.misc: boolean lambda1(gnu.mapping.Symbol,gnu.mapping.Symbol)>($r4, $r5);

        if $z0 == 0 goto label06;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label05:
        return $r6;

     label06:
        $r6 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label05;

     label07:
        $r7 = (gnu.mapping.Environment) $r2;

     label08:
        $z0 = staticinvoke <kawa.lib.misc: boolean isEnvironmentBound(gnu.mapping.Environment,java.lang.Object)>($r7, $r3);

        if $z0 == 0 goto label10;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label09:
        return $r6;

     label10:
        $r6 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label09;

     label11:
        $r8 = (gnu.mapping.Procedure) $r2;

     label12:
        $r2 = staticinvoke <kawa.lib.misc: java.lang.Object procedureProperty(gnu.mapping.Procedure,java.lang.Object)>($r8, $r3);

        return $r2;

     label13:
        $r9 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r9, "lambda", 1, $r2);

        throw $r10;

     label14:
        $r11 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r11, "lambda", 2, $r3);

        throw $r10;

     label15:
        $r12 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r12, "environment-bound?", 1, $r2);

        throw $r10;

     label16:
        $r13 := @caughtexception;

        $r10 = new gnu.mapping.WrongType;

        specialinvoke $r10.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r13, "procedure-property", 1, $r2);

        throw $r10;

        catch java.lang.ClassCastException from label02 to label03 with label13;
        catch java.lang.ClassCastException from label03 to label04 with label14;
        catch java.lang.ClassCastException from label07 to label08 with label15;
        catch java.lang.ClassCastException from label11 to label12 with label16;
    }
