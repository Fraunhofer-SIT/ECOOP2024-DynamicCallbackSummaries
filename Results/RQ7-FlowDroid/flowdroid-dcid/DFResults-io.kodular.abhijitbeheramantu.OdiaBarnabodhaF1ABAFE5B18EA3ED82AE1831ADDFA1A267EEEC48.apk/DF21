Source: $i2 = virtualinvoke $r1.<gnu.text.Lexer: int read()>()
$i2 = virtualinvoke $r1.<gnu.text.Lexer: int read()>() in <gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $i2 = virtualinvoke $r1.<gnu.text.Lexer: int read()>()
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $i0 = $i2
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: $r5 = virtualinvoke $r6.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>($r1, $i0, $i1)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: virtualinvoke $r1.<gnu.text.Lexer: void tokenBufferAppend(int)>($i0)
<gnu.text.Lexer: void tokenBufferAppend(int)>: $i0 = $i0 & 1023
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0 + 56320
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r5 = $r1.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: specialinvoke $r10.<java.lang.String: void <init>(char[],int,int)>($r5, $i1, $i0)
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: $r8 = virtualinvoke $r10.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderTypespec: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r8
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r5
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r4 = staticinvoke <kawa.lib.numbers: java.lang.Number exact$To$Inexact(java.lang.Number)>($r4)
<kawa.lib.numbers: java.lang.Number exact$To$Inexact(java.lang.Number)>: $r0 = staticinvoke <gnu.kawa.functions.Arithmetic: java.lang.Number toInexact(java.lang.Number)>($r0)
<gnu.kawa.functions.Arithmetic: java.lang.Number toInexact(java.lang.Number)>: $r1 = (gnu.math.Numeric) $r0
<gnu.kawa.functions.Arithmetic: java.lang.Number toInexact(java.lang.Number)>: $r1 = virtualinvoke $r1.<gnu.math.Numeric: gnu.math.Numeric toInexact()>()
<gnu.math.Complex: gnu.math.Complex toInexact()>: $r2 = virtualinvoke r0.<gnu.math.Complex: gnu.math.RealNum re()>()
<gnu.math.RealNum: gnu.math.RealNum re()>: return r0
<gnu.math.Complex: gnu.math.Complex toInexact()>: $d0 = virtualinvoke $r2.<gnu.math.RealNum: double doubleValue()>()
<gnu.math.IntFraction: double doubleValue()>: r0 := @this: gnu.math.IntFraction
<gnu.math.Complex: gnu.math.Complex toInexact()>: $r2 = virtualinvoke r0.<gnu.math.Complex: gnu.math.RealNum re()>()
<gnu.math.CComplex: gnu.math.RealNum re()>: $r1 = r0.<gnu.math.CComplex: gnu.math.RealNum real>
<gnu.math.CComplex: gnu.math.RealNum re()>: return $r1
<gnu.math.Complex: gnu.math.Complex toInexact()>: return $r1
<gnu.kawa.functions.Arithmetic: java.lang.Number toInexact(java.lang.Number)>: return $r1
<kawa.lib.numbers: java.lang.Number exact$To$Inexact(java.lang.Number)>: return $r0
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
