Source: $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
$i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>() in <gnu.text.Lexer: int read()>
Sink: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1) in <gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>

<gnu.text.Lexer: int read()>: $i0 = virtualinvoke $r1.<gnu.text.LineBufferedReader: int read()>()
<gnu.text.Lexer: int read()>: return $i0
<gnu.kawa.lispexpr.LispReader: int readHexEscape()>: $c2 = (char) $i1
<gnu.kawa.lispexpr.LispReader: int readHexEscape()>: $i3 = staticinvoke <java.lang.Character: int digit(char,int)>($c2, 16)
<gnu.kawa.lispexpr.LispReader: int readHexEscape()>: i0 = i0 + $i3
<gnu.kawa.lispexpr.LispReader: int readHexEscape()>: return i0
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: return $i0
<gnu.kawa.lispexpr.LispReader: int readEscape()>: return $i0
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: $i0 = i1 & 159
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: return $i0
<gnu.kawa.lispexpr.LispReader: int readEscape()>: return $i0
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: $i0 = i1 | 128
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: return $i0
<gnu.kawa.lispexpr.LispReader: int readEscape()>: return $i0
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: virtualinvoke $r0.<gnu.text.Lexer: void tokenBufferAppend(int)>(i3)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r3 = $r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>($r3, $i1, $i0)
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: $r4 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>()
<gnu.kawa.lispexpr.ReaderString: java.lang.String readString(gnu.text.Lexer,int,int)>: return $r4
<gnu.kawa.lispexpr.ReaderString: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r2
<gnu.kawa.lispexpr.ReaderDispatch: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r5
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke $r2.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r1)
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r4 = staticinvoke <kawa.lib.numbers: java.lang.Number exact$To$Inexact(java.lang.Number)>($r4)
<kawa.lib.numbers: java.lang.Number exact$To$Inexact(java.lang.Number)>: $r0 = staticinvoke <gnu.kawa.functions.Arithmetic: java.lang.Number toInexact(java.lang.Number)>($r0)
<gnu.kawa.functions.Arithmetic: java.lang.Number toInexact(java.lang.Number)>: $d0 = virtualinvoke $r0.<java.lang.Number: double doubleValue()>()
<gnu.kawa.functions.Arithmetic: java.lang.Number toInexact(java.lang.Number)>: $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0)
<gnu.kawa.functions.Arithmetic: java.lang.Number toInexact(java.lang.Number)>: return $r2
<kawa.lib.numbers: java.lang.Number exact$To$Inexact(java.lang.Number)>: return $r0
<kawa.lib.numbers: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r4
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleBody: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<kawa.lib.misc: java.lang.Object apply2(gnu.expr.ModuleMethod,java.lang.Object,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleMethod: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<kawa.lib.ports: java.lang.Object inputPortLineNumber(gnu.text.LineBufferedReader)>: $r4 = virtualinvoke $r2.<gnu.mapping.Procedure: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r1, $r4)
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r3[1] = $r2
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>($r3)
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: $r2 = $r1[0]
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: $r8 = (java.util.List) $r2
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: $r2 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i0)
<gnu.kawa.functions.ApplyToArgs: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply2(java.lang.Object,java.lang.Object)>: return $r1
<kawa.lib.ports: java.lang.Object inputPortLineNumber(gnu.text.LineBufferedReader)>: return $r4
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>: return $r4
<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.expr.ModuleMethod: void apply(gnu.mapping.CallContext)>: virtualinvoke $r1.<gnu.mapping.CallContext: void writeValue(java.lang.Object)>($r5)
<gnu.mapping.CallContext: void writeValue(java.lang.Object)>: staticinvoke <gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>($r1, $r2)
<gnu.mapping.Values: void writeValues(java.lang.Object,gnu.lists.Consumer)>: interfaceinvoke $r1.<gnu.lists.Consumer: void writeObject(java.lang.Object)>($r0)
<gnu.lists.PrintConsumer: void writeObject(java.lang.Object)>: virtualinvoke r0.<gnu.lists.PrintConsumer: void print(java.lang.Object)>($r1)
