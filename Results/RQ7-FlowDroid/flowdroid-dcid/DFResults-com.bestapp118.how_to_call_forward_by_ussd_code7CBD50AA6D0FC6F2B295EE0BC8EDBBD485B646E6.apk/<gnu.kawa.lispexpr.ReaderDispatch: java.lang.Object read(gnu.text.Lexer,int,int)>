    public java.lang.Object read(gnu.text.Lexer, int, int) throws java.io.IOException, gnu.text.SyntaxException
    {
        gnu.kawa.util.RangeTable $r3;
        gnu.mapping.Values r7;
        char $c3;
        gnu.kawa.lispexpr.ReaderDispatch r0;
        int $i0, $i1, $i2;
        gnu.kawa.lispexpr.ReadTableEntry $r5;
        java.lang.Object $r4;
        java.lang.StringBuilder $r8;
        java.lang.String $r2, $r6;
        gnu.text.Lexer $r1;

        r0 := @this: gnu.kawa.lispexpr.ReaderDispatch;

        $r1 := @parameter0: gnu.text.Lexer;

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $i0 = -1;

     label1:
        $i2 = virtualinvoke $r1.<gnu.text.Lexer: int read()>();

        $i1 = $i2;

        if $i2 >= 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected EOF after ");

        $c3 = (char) $i2;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<gnu.text.Lexer: void eofError(java.lang.String)>($r2);

     label2:
        if $i2 > 65536 goto label3;

        $c3 = (char) $i2;

        $i1 = staticinvoke <java.lang.Character: int digit(char,int)>($c3, 10);

        if $i1 >= 0 goto label5;

        $c3 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c3);

        $i1 = (int) $c3;

     label3:
        $r3 = r0.<gnu.kawa.lispexpr.ReaderDispatch: gnu.kawa.util.RangeTable table>;

        $r4 = virtualinvoke $r3.<gnu.kawa.util.RangeTable: java.lang.Object lookup(int,java.lang.Object)>($i1, null);

        $r5 = (gnu.kawa.lispexpr.ReadTableEntry) $r4;

        if $r5 != null goto label4;

        $r2 = virtualinvoke $r1.<gnu.text.Lexer: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<gnu.text.Lexer: int getLineNumber()>();

        $i0 = $i0 + 1;

        $i2 = virtualinvoke $r1.<gnu.text.Lexer: int getColumnNumber()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid dispatch character \'");

        $c3 = (char) $i1;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<gnu.text.Lexer: void error(char,java.lang.String,int,int,java.lang.String)>(101, $r2, $i0, $i2, $r6);

        r7 = <gnu.mapping.Values: gnu.mapping.Values empty>;

        return r7;

     label4:
        $r4 = virtualinvoke $r5.<gnu.kawa.lispexpr.ReadTableEntry: java.lang.Object read(gnu.text.Lexer,int,int)>($r1, $i1, $i0);

        return $r4;

     label5:
        if $i0 >= 0 goto label6;

        $i0 = $i1;

        goto label1;

     label6:
        $i0 = $i0 * 10;

        $i0 = $i0 + $i1;

        goto label1;
    }
