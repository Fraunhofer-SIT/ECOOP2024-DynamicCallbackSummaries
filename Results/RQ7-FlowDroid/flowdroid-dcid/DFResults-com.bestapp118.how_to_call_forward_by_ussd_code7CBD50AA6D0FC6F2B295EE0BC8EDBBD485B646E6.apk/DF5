Source: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
$i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0) in <gnu.mapping.TtyInPort: int fill(int)>
Sink: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.mapping.TtyInPort: int fill(int)>: $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, $i1, $i0)
<gnu.mapping.TtyInPort: int fill(int)>: $r2 = r0.<gnu.mapping.TtyInPort: char[] buffer>
<gnu.mapping.TtyInPort: int fill(int)>: return $i0
<gnu.text.LineBufferedReader: int read()>: return -1
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>($z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<kawa.lang.SyntaxRules: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>($r1, $r4)
<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>: $r1 = virtualinvoke $r7.<kawa.lang.SyntaxRule: java.lang.Object execute(java.lang.Object[],kawa.lang.Translator,kawa.lang.TemplateScope)>($r3, $r2, $r12)
<kawa.lang.SyntaxTemplate: java.lang.Object execute(java.lang.Object[],kawa.lang.Translator,kawa.lang.TemplateScope)>: $r4 = virtualinvoke r0.<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>(0, $r5, 0, $r3, $r1, $r2)
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: $r7 = $r1[$i0]
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: $r1 = r0.<kawa.lang.SyntaxTemplate: java.lang.Object[] literal_values>
<kawa.lang.SyntaxTemplate: java.lang.Object execute(int,java.lang.Object[],int,int[],kawa.lang.Translator,kawa.lang.TemplateScope)>: return $r7
<kawa.lang.SyntaxTemplate: java.lang.Object execute(java.lang.Object[],kawa.lang.Translator,kawa.lang.TemplateScope)>: return $r4
<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>: $r7 = $r6[$i0]
<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>: $r6 = r0.<kawa.lang.SyntaxRules: kawa.lang.SyntaxRule[] rules>
<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>: return $r8
<kawa.lang.SyntaxRules: java.lang.Object apply1(java.lang.Object)>: r0 := @this: kawa.lang.SyntaxRules
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = r0.<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2)
