    public java.lang.Object apply1(gnu.expr.ModuleMethod, java.lang.Object)
    {
        gnu.expr.ModuleMethod $r1;
        java.lang.ClassCastException $r4, $r7, $r8, $r9, $r11, $r13, $r14, $r16, $r18;
        java.lang.Integer $r15;
        kawa.lib.strings r0;
        int $i0;
        java.lang.Boolean r19;
        java.lang.Number $r17;
        boolean $z0;
        java.lang.CharSequence $r3;
        gnu.lists.FString $r10;
        gnu.lists.LList $r12;
        gnu.mapping.WrongType $r5;
        gnu.lists.CharSeq $r6;
        java.lang.Object $r2;

        r0 := @this: kawa.lib.strings;

        $r1 := @parameter0: gnu.expr.ModuleMethod;

        $r2 := @parameter1: java.lang.Object;

        $i0 = $r1.<gnu.expr.ModuleMethod: int selector>;

        if $i0 == 1 goto label30;

        if $i0 == 2 goto label27;

        if $i0 == 5 goto label24;

        lookupswitch($i0)
        {
            case 14: goto label21;
            case 15: goto label18;
            case 16: goto label15;
            default: goto label01;
        };

     label01:
        lookupswitch($i0)
        {
            case 18: goto label12;
            case 19: goto label09;
            case 20: goto label06;
            case 21: goto label03;
            default: goto label02;
        };

     label02:
        $r2 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>($r1, $r2);

        return $r2;

     label03:
        $r3 = (java.lang.CharSequence) $r2;

     label04:
        $r3 = staticinvoke <kawa.lib.strings: java.lang.CharSequence stringCapitalize(java.lang.CharSequence)>($r3);

        return $r3;

     label05:
        $r4 := @caughtexception;

        $r5 = new gnu.mapping.WrongType;

        specialinvoke $r5.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r4, "string-capitalize", 1, $r2);

        throw $r5;

     label06:
        $r6 = (gnu.lists.CharSeq) $r2;

     label07:
        $r3 = staticinvoke <kawa.lib.strings: java.lang.CharSequence stringCapitalize$Ex(gnu.lists.CharSeq)>($r6);

        return $r3;

     label08:
        $r7 := @caughtexception;

        $r5 = new gnu.mapping.WrongType;

        specialinvoke $r5.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r7, "string-capitalize!", 1, $r2);

        throw $r5;

     label09:
        $r6 = (gnu.lists.CharSeq) $r2;

     label10:
        $r3 = staticinvoke <kawa.lib.strings: java.lang.CharSequence stringDowncase$Ex(gnu.lists.CharSeq)>($r6);

        return $r3;

     label11:
        $r8 := @caughtexception;

        $r5 = new gnu.mapping.WrongType;

        specialinvoke $r5.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r8, "string-downcase!", 1, $r2);

        throw $r5;

     label12:
        $r6 = (gnu.lists.CharSeq) $r2;

     label13:
        $r3 = staticinvoke <kawa.lib.strings: java.lang.CharSequence stringUpcase$Ex(gnu.lists.CharSeq)>($r6);

        return $r3;

     label14:
        $r9 := @caughtexception;

        $r5 = new gnu.mapping.WrongType;

        specialinvoke $r5.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r9, "string-upcase!", 1, $r2);

        throw $r5;

     label15:
        $r3 = (java.lang.CharSequence) $r2;

     label16:
        $r10 = staticinvoke <kawa.lib.strings: gnu.lists.FString stringCopy(java.lang.CharSequence)>($r3);

        return $r10;

     label17:
        $r11 := @caughtexception;

        $r5 = new gnu.mapping.WrongType;

        specialinvoke $r5.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r11, "string-copy", 1, $r2);

        throw $r5;

     label18:
        $r12 = (gnu.lists.LList) $r2;

     label19:
        $r3 = staticinvoke <kawa.lib.strings: java.lang.CharSequence list$To$String(gnu.lists.LList)>($r12);

        return $r3;

     label20:
        $r13 := @caughtexception;

        $r5 = new gnu.mapping.WrongType;

        specialinvoke $r5.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r13, "list->string", 1, $r2);

        throw $r5;

     label21:
        $r3 = (java.lang.CharSequence) $r2;

     label22:
        $r12 = staticinvoke <kawa.lib.strings: gnu.lists.LList string$To$List(java.lang.CharSequence)>($r3);

        return $r12;

     label23:
        $r14 := @caughtexception;

        $r5 = new gnu.mapping.WrongType;

        specialinvoke $r5.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r14, "string->list", 1, $r2);

        throw $r5;

     label24:
        $r3 = (java.lang.CharSequence) $r2;

     label25:
        $i0 = staticinvoke <kawa.lib.strings: int stringLength(java.lang.CharSequence)>($r3);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r15;

     label26:
        $r16 := @caughtexception;

        $r5 = new gnu.mapping.WrongType;

        specialinvoke $r5.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r16, "string-length", 1, $r2);

        throw $r5;

     label27:
        $r17 = (java.lang.Number) $r2;

        $i0 = virtualinvoke $r17.<java.lang.Number: int intValue()>();

     label28:
        $r3 = staticinvoke <kawa.lib.strings: java.lang.CharSequence makeString(int)>($i0);

        return $r3;

     label29:
        $r18 := @caughtexception;

        $r5 = new gnu.mapping.WrongType;

        specialinvoke $r5.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r18, "make-string", 1, $r2);

        throw $r5;

     label30:
        $z0 = staticinvoke <kawa.lib.strings: boolean isString(java.lang.Object)>($r2);

        if $z0 == 0 goto label31;

        r19 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r19;

     label31:
        r19 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r19;

        catch java.lang.ClassCastException from label03 to label04 with label05;
        catch java.lang.ClassCastException from label06 to label07 with label08;
        catch java.lang.ClassCastException from label09 to label10 with label11;
        catch java.lang.ClassCastException from label12 to label13 with label14;
        catch java.lang.ClassCastException from label15 to label16 with label17;
        catch java.lang.ClassCastException from label18 to label19 with label20;
        catch java.lang.ClassCastException from label21 to label22 with label23;
        catch java.lang.ClassCastException from label24 to label25 with label26;
        catch java.lang.ClassCastException from label27 to label28 with label29;
    }
