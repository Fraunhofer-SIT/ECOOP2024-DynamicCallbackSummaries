    public java.lang.Object apply1(gnu.expr.ModuleMethod, java.lang.Object)
    {
        gnu.expr.ModuleMethod $r1;
        gnu.math.RatNum $r44;
        java.lang.Integer $r15;
        gnu.math.Quantity $r4;
        gnu.math.IntNum $r14;
        boolean $z0;
        java.lang.CharSequence $r10;
        gnu.mapping.WrongType $r7;
        gnu.math.Complex $r8;
        java.lang.Double $r29;
        java.lang.ClassCastException $r6, $r9, $r11, $r13, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r45, $r46, $r47, $r48, $r49, $r50;
        gnu.math.RealNum $r24;
        int $i0;
        kawa.lib.numbers r0;
        java.lang.Boolean r51;
        java.lang.Number $r12;
        double $d0;
        gnu.math.Duration $r3;
        java.lang.Object $r2;
        gnu.math.Unit $r5;

        r0 := @this: kawa.lib.numbers;

        $r1 := @parameter0: gnu.expr.ModuleMethod;

        $r2 := @parameter1: java.lang.Object;

        $i0 = $r1.<gnu.expr.ModuleMethod: int selector>;

        lookupswitch($i0)
        {
            case 1: goto label128;
            case 2: goto label126;
            case 3: goto label124;
            case 4: goto label122;
            case 5: goto label120;
            case 6: goto label118;
            case 7: goto label116;
            case 8: goto label114;
            case 9: goto label110;
            case 10: goto label106;
            case 11: goto label102;
            case 12: goto label001;
            case 13: goto label001;
            case 14: goto label099;
            case 15: goto label001;
            case 16: goto label001;
            case 17: goto label001;
            case 18: goto label001;
            case 19: goto label096;
            case 20: goto label093;
            case 21: goto label090;
            case 22: goto label087;
            case 23: goto label084;
            case 24: goto label081;
            case 25: goto label001;
            case 26: goto label078;
            case 27: goto label075;
            case 28: goto label072;
            case 29: goto label069;
            case 30: goto label066;
            case 31: goto label063;
            case 32: goto label060;
            case 33: goto label001;
            case 34: goto label057;
            case 35: goto label054;
            case 36: goto label051;
            case 37: goto label001;
            case 38: goto label001;
            case 39: goto label048;
            case 40: goto label045;
            case 41: goto label042;
            case 42: goto label039;
            case 43: goto label036;
            case 44: goto label033;
            case 45: goto label030;
            case 46: goto label027;
            case 47: goto label001;
            case 48: goto label001;
            case 49: goto label001;
            case 50: goto label001;
            case 51: goto label001;
            case 52: goto label001;
            case 53: goto label001;
            case 54: goto label024;
            case 55: goto label021;
            case 56: goto label018;
            case 57: goto label015;
            case 58: goto label001;
            case 59: goto label001;
            case 60: goto label012;
            case 61: goto label001;
            case 62: goto label009;
            case 63: goto label001;
            case 64: goto label006;
            case 65: goto label003;
            case 66: goto label001;
            case 67: goto label002;
            default: goto label001;
        };

     label001:
        $r2 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>($r1, $r2);

        return $r2;

     label002:
        $r3 = staticinvoke <kawa.lib.numbers: gnu.math.Duration duration(java.lang.Object)>($r2);

        return $r3;

     label003:
        $r4 = (gnu.math.Quantity) $r2;

     label004:
        $r5 = staticinvoke <kawa.lib.numbers: gnu.math.Unit quantity$To$Unit(gnu.math.Quantity)>($r4);

        return $r5;

     label005:
        $r6 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r6, "quantity->unit", 1, $r2);

        throw $r7;

     label006:
        $r4 = (gnu.math.Quantity) $r2;

     label007:
        $r8 = staticinvoke <kawa.lib.numbers: gnu.math.Complex quantity$To$Number(gnu.math.Quantity)>($r4);

        return $r8;

     label008:
        $r9 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r9, "quantity->number", 1, $r2);

        throw $r7;

     label009:
        $r10 = (java.lang.CharSequence) $r2;

     label010:
        $r2 = staticinvoke <kawa.lib.numbers: java.lang.Object string$To$Number(java.lang.CharSequence)>($r10);

        return $r2;

     label011:
        $r11 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r11, "string->number", 1, $r2);

        throw $r7;

     label012:
        $r12 = (java.lang.Number) $r2;

     label013:
        $r10 = staticinvoke <kawa.lib.numbers: java.lang.CharSequence number$To$String(java.lang.Number)>($r12);

        return $r10;

     label014:
        $r13 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r13, "number->string", 1, $r2);

        throw $r7;

     label015:
        $r14 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label016:
        $i0 = staticinvoke <kawa.lib.numbers: int bitwiseFirstBitSet(gnu.math.IntNum)>($r14);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r15;

     label017:
        $r16 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r16, "bitwise-first-bit-set", 1, $r2);

        throw $r7;

     label018:
        $r14 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label019:
        $i0 = staticinvoke <kawa.lib.numbers: int bitwiseLength(gnu.math.IntNum)>($r14);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r15;

     label020:
        $r17 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r17, "bitwise-length", 1, $r2);

        throw $r7;

     label021:
        $r14 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label022:
        $i0 = staticinvoke <kawa.lib.numbers: int bitwiseBitCount(gnu.math.IntNum)>($r14);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r15;

     label023:
        $r18 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r18, "bitwise-bit-count", 1, $r2);

        throw $r7;

     label024:
        $r14 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.IntNum coerceIntNum(java.lang.Object)>($r2);

     label025:
        $i0 = staticinvoke <kawa.lib.numbers: int logcount(gnu.math.IntNum)>($r14);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r15;

     label026:
        $r19 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r19, "logcount", 1, $r2);

        throw $r7;

     label027:
        $r12 = (java.lang.Number) $r2;

     label028:
        $r12 = staticinvoke <kawa.lib.numbers: java.lang.Number inexact$To$Exact(java.lang.Number)>($r12);

        return $r12;

     label029:
        $r20 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r20, "inexact->exact", 1, $r2);

        throw $r7;

     label030:
        $r12 = (java.lang.Number) $r2;

     label031:
        $r12 = staticinvoke <kawa.lib.numbers: java.lang.Number exact$To$Inexact(java.lang.Number)>($r12);

        return $r12;

     label032:
        $r21 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r21, "exact->inexact", 1, $r2);

        throw $r7;

     label033:
        $r12 = (java.lang.Number) $r2;

     label034:
        $r12 = staticinvoke <kawa.lib.numbers: java.lang.Number exact(java.lang.Number)>($r12);

        return $r12;

     label035:
        $r22 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r22, "exact", 1, $r2);

        throw $r7;

     label036:
        $r12 = (java.lang.Number) $r2;

     label037:
        $r12 = staticinvoke <kawa.lib.numbers: java.lang.Number inexact(java.lang.Number)>($r12);

        return $r12;

     label038:
        $r23 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r23, "inexact", 1, $r2);

        throw $r7;

     label039:
        $r8 = (gnu.math.Complex) $r2;

     label040:
        $r24 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum angle(gnu.math.Complex)>($r8);

        return $r24;

     label041:
        $r25 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r25, "angle", 1, $r2);

        throw $r7;

     label042:
        $r12 = (java.lang.Number) $r2;

     label043:
        $r12 = staticinvoke <kawa.lib.numbers: java.lang.Number magnitude(java.lang.Number)>($r12);

        return $r12;

     label044:
        $r26 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r26, "magnitude", 1, $r2);

        throw $r7;

     label045:
        $r8 = (gnu.math.Complex) $r2;

     label046:
        $r24 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum imagPart(gnu.math.Complex)>($r8);

        return $r24;

     label047:
        $r27 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r27, "imag-part", 1, $r2);

        throw $r7;

     label048:
        $r8 = (gnu.math.Complex) $r2;

     label049:
        $r24 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum realPart(gnu.math.Complex)>($r8);

        return $r24;

     label050:
        $r28 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r28, "real-part", 1, $r2);

        throw $r7;

     label051:
        $r12 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r12.<java.lang.Number: double doubleValue()>();

     label052:
        $d0 = staticinvoke <kawa.lib.numbers: double lambda4(double)>($d0);

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r29;

     label053:
        $r30 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r30, "lambda", 1, $r2);

        throw $r7;

     label054:
        $r4 = (gnu.math.Quantity) $r2;

     label055:
        $r4 = staticinvoke <kawa.lib.numbers: gnu.math.Quantity lambda3(gnu.math.Quantity)>($r4);

        return $r4;

     label056:
        $r31 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r31, "lambda", 1, $r2);

        throw $r7;

     label057:
        $r12 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r12.<java.lang.Number: double doubleValue()>();

     label058:
        $d0 = staticinvoke <kawa.lib.numbers: double lambda2(double)>($d0);

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r29;

     label059:
        $r32 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r32, "lambda", 1, $r2);

        throw $r7;

     label060:
        $r12 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r12.<java.lang.Number: double doubleValue()>();

     label061:
        $d0 = staticinvoke <kawa.lib.numbers: double acos(double)>($d0);

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r29;

     label062:
        $r33 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r33, "acos", 1, $r2);

        throw $r7;

     label063:
        $r12 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r12.<java.lang.Number: double doubleValue()>();

     label064:
        $d0 = staticinvoke <kawa.lib.numbers: double asin(double)>($d0);

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r29;

     label065:
        $r34 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r34, "asin", 1, $r2);

        throw $r7;

     label066:
        $r12 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r12.<java.lang.Number: double doubleValue()>();

     label067:
        $d0 = staticinvoke <kawa.lib.numbers: double tan(double)>($d0);

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r29;

     label068:
        $r35 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r35, "tan", 1, $r2);

        throw $r7;

     label069:
        $r12 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r12.<java.lang.Number: double doubleValue()>();

     label070:
        $d0 = staticinvoke <kawa.lib.numbers: double cos(double)>($d0);

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r29;

     label071:
        $r36 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r36, "cos", 1, $r2);

        throw $r7;

     label072:
        $r12 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r12.<java.lang.Number: double doubleValue()>();

     label073:
        $d0 = staticinvoke <kawa.lib.numbers: double sin(double)>($d0);

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r29;

     label074:
        $r37 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r37, "sin", 1, $r2);

        throw $r7;

     label075:
        $r8 = (gnu.math.Complex) $r2;

     label076:
        $r8 = staticinvoke <kawa.lib.numbers: gnu.math.Complex log(gnu.math.Complex)>($r8);

        return $r8;

     label077:
        $r38 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r38, "log", 1, $r2);

        throw $r7;

     label078:
        $r8 = (gnu.math.Complex) $r2;

     label079:
        $r8 = staticinvoke <kawa.lib.numbers: gnu.math.Complex exp(gnu.math.Complex)>($r8);

        return $r8;

     label080:
        $r39 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r39, "exp", 1, $r2);

        throw $r7;

     label081:
        $r24 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label082:
        $r24 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum round(gnu.math.RealNum)>($r24);

        return $r24;

     label083:
        $r40 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r40, "round", 1, $r2);

        throw $r7;

     label084:
        $r24 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label085:
        $r24 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum truncate(gnu.math.RealNum)>($r24);

        return $r24;

     label086:
        $r41 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r41, "truncate", 1, $r2);

        throw $r7;

     label087:
        $r24 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label088:
        $r24 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum ceiling(gnu.math.RealNum)>($r24);

        return $r24;

     label089:
        $r42 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r42, "ceiling", 1, $r2);

        throw $r7;

     label090:
        $r24 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label091:
        $r24 = staticinvoke <kawa.lib.numbers: gnu.math.RealNum floor(gnu.math.RealNum)>($r24);

        return $r24;

     label092:
        $r43 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r43, "floor", 1, $r2);

        throw $r7;

     label093:
        $r44 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RatNum coerceRatNum(java.lang.Object)>($r2);

     label094:
        $r14 = staticinvoke <kawa.lib.numbers: gnu.math.IntNum denominator(gnu.math.RatNum)>($r44);

        return $r14;

     label095:
        $r45 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r45, "denominator", 1, $r2);

        throw $r7;

     label096:
        $r44 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RatNum coerceRatNum(java.lang.Object)>($r2);

     label097:
        $r14 = staticinvoke <kawa.lib.numbers: gnu.math.IntNum numerator(gnu.math.RatNum)>($r44);

        return $r14;

     label098:
        $r46 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r46, "numerator", 1, $r2);

        throw $r7;

     label099:
        $r12 = (java.lang.Number) $r2;

     label100:
        $r12 = staticinvoke <kawa.lib.numbers: java.lang.Number abs(java.lang.Number)>($r12);

        return $r12;

     label101:
        $r47 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r47, "abs", 1, $r2);

        throw $r7;

     label102:
        $r24 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label103:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isNegative(gnu.math.RealNum)>($r24);

        if $z0 == 0 goto label104;

        r51 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r51;

     label104:
        r51 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r51;

     label105:
        $r48 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r48, "negative?", 1, $r2);

        throw $r7;

     label106:
        $r24 = staticinvoke <gnu.kawa.lispexpr.LangObjType: gnu.math.RealNum coerceRealNum(java.lang.Object)>($r2);

     label107:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isPositive(gnu.math.RealNum)>($r24);

        if $z0 == 0 goto label108;

        r51 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r51;

     label108:
        r51 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r51;

     label109:
        $r49 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r49, "positive?", 1, $r2);

        throw $r7;

     label110:
        $r12 = (java.lang.Number) $r2;

     label111:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isZero(java.lang.Number)>($r12);

        if $z0 == 0 goto label112;

        r51 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r51;

     label112:
        r51 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r51;

     label113:
        $r50 := @caughtexception;

        $r7 = new gnu.mapping.WrongType;

        specialinvoke $r7.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r50, "zero?", 1, $r2);

        throw $r7;

     label114:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isInexact(java.lang.Object)>($r2);

        if $z0 == 0 goto label115;

        r51 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r51;

     label115:
        r51 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r51;

     label116:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isExact(java.lang.Object)>($r2);

        if $z0 == 0 goto label117;

        r51 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r51;

     label117:
        r51 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r51;

     label118:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isInteger(java.lang.Object)>($r2);

        if $z0 == 0 goto label119;

        r51 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r51;

     label119:
        r51 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r51;

     label120:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isRational(java.lang.Object)>($r2);

        if $z0 == 0 goto label121;

        r51 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r51;

     label121:
        r51 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r51;

     label122:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isReal(java.lang.Object)>($r2);

        if $z0 == 0 goto label123;

        r51 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r51;

     label123:
        r51 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r51;

     label124:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isComplex(java.lang.Object)>($r2);

        if $z0 == 0 goto label125;

        r51 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r51;

     label125:
        r51 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r51;

     label126:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isQuantity(java.lang.Object)>($r2);

        if $z0 == 0 goto label127;

        r51 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r51;

     label127:
        r51 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r51;

     label128:
        $z0 = staticinvoke <kawa.lib.numbers: boolean isNumber(java.lang.Object)>($r2);

        if $z0 == 0 goto label129;

        r51 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r51;

     label129:
        r51 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r51;

        catch java.lang.ClassCastException from label003 to label004 with label005;
        catch java.lang.ClassCastException from label006 to label007 with label008;
        catch java.lang.ClassCastException from label009 to label010 with label011;
        catch java.lang.ClassCastException from label012 to label013 with label014;
        catch java.lang.ClassCastException from label015 to label016 with label017;
        catch java.lang.ClassCastException from label018 to label019 with label020;
        catch java.lang.ClassCastException from label021 to label022 with label023;
        catch java.lang.ClassCastException from label024 to label025 with label026;
        catch java.lang.ClassCastException from label027 to label028 with label029;
        catch java.lang.ClassCastException from label030 to label031 with label032;
        catch java.lang.ClassCastException from label033 to label034 with label035;
        catch java.lang.ClassCastException from label036 to label037 with label038;
        catch java.lang.ClassCastException from label039 to label040 with label041;
        catch java.lang.ClassCastException from label042 to label043 with label044;
        catch java.lang.ClassCastException from label045 to label046 with label047;
        catch java.lang.ClassCastException from label048 to label049 with label050;
        catch java.lang.ClassCastException from label051 to label052 with label053;
        catch java.lang.ClassCastException from label054 to label055 with label056;
        catch java.lang.ClassCastException from label057 to label058 with label059;
        catch java.lang.ClassCastException from label060 to label061 with label062;
        catch java.lang.ClassCastException from label063 to label064 with label065;
        catch java.lang.ClassCastException from label066 to label067 with label068;
        catch java.lang.ClassCastException from label069 to label070 with label071;
        catch java.lang.ClassCastException from label072 to label073 with label074;
        catch java.lang.ClassCastException from label075 to label076 with label077;
        catch java.lang.ClassCastException from label078 to label079 with label080;
        catch java.lang.ClassCastException from label081 to label082 with label083;
        catch java.lang.ClassCastException from label084 to label085 with label086;
        catch java.lang.ClassCastException from label087 to label088 with label089;
        catch java.lang.ClassCastException from label090 to label091 with label092;
        catch java.lang.ClassCastException from label093 to label094 with label095;
        catch java.lang.ClassCastException from label096 to label097 with label098;
        catch java.lang.ClassCastException from label099 to label100 with label101;
        catch java.lang.ClassCastException from label102 to label103 with label105;
        catch java.lang.ClassCastException from label106 to label107 with label109;
        catch java.lang.ClassCastException from label110 to label111 with label113;
    }
