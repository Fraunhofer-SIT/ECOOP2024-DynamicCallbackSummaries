    public java.lang.Object read(gnu.text.Lexer, int, int) throws java.io.IOException, gnu.text.SyntaxException
    {
        gnu.kawa.lispexpr.ReadTable $r4;
        gnu.kawa.reflect.Invoke $r20;
        gnu.mapping.Values $r3;
        java.lang.Integer $r25;
        gnu.lists.SimpleVector $r10;
        boolean $z0, z1;
        gnu.mapping.Procedure $r21;
        gnu.kawa.lispexpr.ReaderDispatchMisc r0;
        gnu.expr.Keyword $r7;
        java.lang.StringBuilder $r11, $r27;
        java.util.regex.Pattern $r12;
        gnu.text.Lexer $r1;
        java.lang.Throwable $r15, $r16, $r22;
        java.lang.Object[] $r19;
        int $i0, $i1, i2, $i4;
        gnu.text.LineBufferedReader $r13;
        java.lang.Boolean $r9;
        gnu.kawa.util.GeneralHashTable $r23, r24;
        java.lang.String $r5, $r26;
        gnu.mapping.InPort $r14;
        gnu.kawa.lispexpr.LispReader $r2;
        char c3;
        gnu.lists.Pair $r18;
        char[] $r6;
        java.lang.Object $r8, $r17;

        r0 := @this: gnu.kawa.lispexpr.ReaderDispatchMisc;

        $r1 := @parameter0: gnu.text.Lexer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = $i0;

        $i0 = $i1;

        $r2 = (gnu.kawa.lispexpr.LispReader) $r1;

        c3 = 0;

        $i4 = r0.<gnu.kawa.lispexpr.ReaderDispatchMisc: int code>;

        if $i4 < 0 goto label01;

        i2 = r0.<gnu.kawa.lispexpr.ReaderDispatchMisc: int code>;

     label01:
        lookupswitch(i2)
        {
            case 33: goto label05;
            case 35: goto label47;
            case 44: goto label30;
            case 47: goto label17;
            case 58: goto label03;
            case 59: goto label24;
            case 61: goto label44;
            case 66: goto label15;
            case 68: goto label13;
            case 69: goto label16;
            case 70: goto label07;
            case 73: goto label16;
            case 79: goto label14;
            case 82: goto label10;
            case 83: goto label09;
            case 84: goto label06;
            case 85: goto label09;
            case 88: goto label12;
            case 92: goto label04;
            case 124: goto label18;
            default: goto label02;
        };

     label02:
        virtualinvoke $r1.<gnu.text.Lexer: void error(java.lang.String)>("An invalid #-construct was read.");

        $r3 = <gnu.mapping.Values: gnu.mapping.Values empty>;

        return $r3;

     label03:
        $i0 = $r2.<gnu.kawa.lispexpr.LispReader: int tokenBufferLength>;

        $i1 = virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: int read()>();

        $r4 = staticinvoke <gnu.kawa.lispexpr.ReadTable: gnu.kawa.lispexpr.ReadTable getCurrent()>();

        virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>($i1, 80, $r4);

        $i1 = $r2.<gnu.kawa.lispexpr.LispReader: int tokenBufferLength>;

        $i1 = $i1 - $i0;

        $r26 = new java.lang.String;

        $r6 = $r2.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>;

        specialinvoke $r26.<java.lang.String: void <init>(char[],int,int)>($r6, $i0, $i1);

        $r2.<gnu.kawa.lispexpr.LispReader: int tokenBufferLength> = $i0;

        $r5 = virtualinvoke $r26.<java.lang.String: java.lang.String intern()>();

        $r7 = staticinvoke <gnu.expr.Keyword: gnu.expr.Keyword make(java.lang.String)>($r5);

        return $r7;

     label04:
        $r8 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object readCharacter(gnu.kawa.lispexpr.LispReader)>($r2);

        return $r8;

     label05:
        $r8 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object readSpecial(gnu.kawa.lispexpr.LispReader)>($r2);

        return $r8;

     label06:
        $r9 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r9;

     label07:
        $i0 = virtualinvoke $r1.<gnu.text.Lexer: int peek()>();

        c3 = (char) $i0;

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c3);

        if $z0 == 0 goto label08;

        $r10 = staticinvoke <gnu.kawa.lispexpr.LispReader: gnu.lists.SimpleVector readSimpleVector(gnu.kawa.lispexpr.LispReader,char)>($r2, 70);

        return $r10;

     label08:
        $r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r9;

     label09:
        c3 = (char) i2;

        $r10 = staticinvoke <gnu.kawa.lispexpr.LispReader: gnu.lists.SimpleVector readSimpleVector(gnu.kawa.lispexpr.LispReader,char)>($r2, c3);

        return $r10;

     label10:
        if $i1 <= 36 goto label11;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the radix ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too big (max is 36)");

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<gnu.text.Lexer: void error(java.lang.String)>($r5);

        $i0 = 36;

     label11:
        $r8 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object readNumberWithRadix(int,gnu.kawa.lispexpr.LispReader,int)>(0, $r2, $i0);

        return $r8;

     label12:
        $r8 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object readNumberWithRadix(int,gnu.kawa.lispexpr.LispReader,int)>(0, $r2, 16);

        return $r8;

     label13:
        $r8 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object readNumberWithRadix(int,gnu.kawa.lispexpr.LispReader,int)>(0, $r2, 10);

        return $r8;

     label14:
        $r8 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object readNumberWithRadix(int,gnu.kawa.lispexpr.LispReader,int)>(0, $r2, 8);

        return $r8;

     label15:
        $r8 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object readNumberWithRadix(int,gnu.kawa.lispexpr.LispReader,int)>(0, $r2, 2);

        return $r8;

     label16:
        virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(35);

        virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>(i2);

        $r8 = staticinvoke <gnu.kawa.lispexpr.LispReader: java.lang.Object readNumberWithRadix(int,gnu.kawa.lispexpr.LispReader,int)>(2, $r2, 0);

        return $r8;

     label17:
        $r12 = staticinvoke <gnu.kawa.lispexpr.ReaderDispatchMisc: java.util.regex.Pattern readRegex(gnu.text.Lexer,int,int)>($r1, i2, $i1);

        return $r12;

     label18:
        $r13 = virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader getPort()>();

        $z0 = $r13 instanceof gnu.mapping.InPort;

        if $z0 == 0 goto label19;

        $r14 = (gnu.mapping.InPort) $r13;

        c3 = $r14.<gnu.mapping.InPort: char readState>;

        $r14 = (gnu.mapping.InPort) $r13;

        $r14.<gnu.mapping.InPort: char readState> = 124;

     label19:
        virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: void readNestedComment(char,char)>(35, 124);

     label20:
        $z0 = $r13 instanceof gnu.mapping.InPort;

        if $z0 == 0 goto label21;

        $r14 = (gnu.mapping.InPort) $r13;

        $r14.<gnu.mapping.InPort: char readState> = c3;

     label21:
        $r3 = <gnu.mapping.Values: gnu.mapping.Values empty>;

        return $r3;

     label22:
        $r15 := @caughtexception;

        $z0 = $r13 instanceof gnu.mapping.InPort;

        if $z0 == 0 goto label23;

        $r14 = (gnu.mapping.InPort) $r13;

        $r14.<gnu.mapping.InPort: char readState> = c3;

     label23:
        throw $r15;

     label24:
        $r13 = virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader getPort()>();

        $z0 = $r13 instanceof gnu.mapping.InPort;

        if $z0 == 0 goto label25;

        $r14 = (gnu.mapping.InPort) $r13;

        c3 = $r14.<gnu.mapping.InPort: char readState>;

        $r14 = (gnu.mapping.InPort) $r13;

        $r14.<gnu.mapping.InPort: char readState> = 59;

     label25:
        virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>();

     label26:
        $z0 = $r13 instanceof gnu.mapping.InPort;

        if $z0 == 0 goto label27;

        $r14 = (gnu.mapping.InPort) $r13;

        $r14.<gnu.mapping.InPort: char readState> = c3;

     label27:
        $r3 = <gnu.mapping.Values: gnu.mapping.Values empty>;

        return $r3;

     label28:
        $r16 := @caughtexception;

        $z0 = $r13 instanceof gnu.mapping.InPort;

        if $z0 == 0 goto label29;

        $r14 = (gnu.mapping.InPort) $r13;

        $r14.<gnu.mapping.InPort: char readState> = c3;

     label29:
        throw $r16;

     label30:
        $r13 = virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: gnu.text.LineBufferedReader getPort()>();

        $i0 = virtualinvoke $r13.<gnu.text.LineBufferedReader: int peek()>();

        if $i0 != 40 goto label43;

        $r17 = virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>();

        $i0 = staticinvoke <gnu.lists.LList: int listLength(java.lang.Object,boolean)>($r17, 0);

        if $i0 <= 0 goto label43;

        $r18 = (gnu.lists.Pair) $r17;

        $r8 = virtualinvoke $r18.<gnu.lists.Pair: java.lang.Object getCar()>();

        $z0 = $r8 instanceof gnu.mapping.Symbol;

        if $z0 == 0 goto label43;

        $r18 = (gnu.lists.Pair) $r17;

        $r8 = virtualinvoke $r18.<gnu.lists.Pair: java.lang.Object getCar()>();

        $r5 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        $r4 = staticinvoke <gnu.kawa.lispexpr.ReadTable: gnu.kawa.lispexpr.ReadTable getCurrent()>();

        $r8 = virtualinvoke $r4.<gnu.kawa.lispexpr.ReadTable: java.lang.Object getReaderCtor(java.lang.String)>($r5);

        if $r8 != null goto label32;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown reader constructor ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<gnu.text.Lexer: void error(java.lang.String)>($r5);

     label31:
        $r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r9;

     label32:
        $z0 = $r8 instanceof gnu.mapping.Procedure;

        if $z0 != 0 goto label33;

        $z0 = $r8 instanceof gnu.bytecode.Type;

        if $z0 != 0 goto label33;

        virtualinvoke $r1.<gnu.text.Lexer: void error(java.lang.String)>("reader constructor must be procedure or type name");

        goto label31;

     label33:
        $i0 = $i0 + -1;

        $z0 = $r8 instanceof gnu.bytecode.Type;

        if $z0 == 0 goto label36;

        $z0 = 1;

     label34:
        z1 = $z0;

        $i1 = $z0 + $i0;

        $r19 = newarray (java.lang.Object)[$i1];

        $r18 = (gnu.lists.Pair) $r17;

        $r17 = virtualinvoke $r18.<gnu.lists.Pair: java.lang.Object getCdr()>();

        $i1 = 0;

     label35:
        if $i1 >= $i0 goto label37;

        $r18 = (gnu.lists.Pair) $r17;

        i2 = z1 + $i1;

        $r17 = virtualinvoke $r18.<gnu.lists.Pair: java.lang.Object getCar()>();

        $r19[i2] = $r17;

        $r17 = virtualinvoke $r18.<gnu.lists.Pair: java.lang.Object getCdr()>();

        $i1 = $i1 + 1;

        goto label35;

     label36:
        $z0 = 0;

        goto label34;

     label37:
        if z1 <= 0 goto label40;

     label38:
        $r19[0] = $r8;

        $r20 = <gnu.kawa.reflect.Invoke: gnu.kawa.reflect.Invoke make>;

        $r8 = virtualinvoke $r20.<gnu.kawa.reflect.Invoke: java.lang.Object applyN(java.lang.Object[])>($r19);

     label39:
        return $r8;

     label40:
        $r21 = (gnu.mapping.Procedure) $r8;

        $r8 = virtualinvoke $r21.<gnu.mapping.Procedure: java.lang.Object applyN(java.lang.Object[])>($r19);

     label41:
        return $r8;

     label42:
        $r22 := @caughtexception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("caught ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" applying reader constructor ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<gnu.text.Lexer: void error(java.lang.String)>($r5);

        goto label31;

     label43:
        virtualinvoke $r1.<gnu.text.Lexer: void error(java.lang.String)>("a non-empty list starting with a symbol must follow #,");

        goto label31;

     label44:
        $r8 = virtualinvoke $r2.<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>();

        $z0 = $r1 instanceof gnu.kawa.lispexpr.LispReader;

        if $z0 == 0 goto label46;

        $r2 = (gnu.kawa.lispexpr.LispReader) $r1;

        $r23 = $r2.<gnu.kawa.lispexpr.LispReader: gnu.kawa.util.GeneralHashTable sharedStructureTable>;

        r24 = $r23;

        if $r23 != null goto label45;

        r24 = new gnu.kawa.util.GeneralHashTable;

        $r23 = r24;

        specialinvoke r24.<gnu.kawa.util.GeneralHashTable: void <init>()>();

        $r2.<gnu.kawa.lispexpr.LispReader: gnu.kawa.util.GeneralHashTable sharedStructureTable> = $r23;

     label45:
        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r24.<gnu.kawa.util.GeneralHashTable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r8);

     label46:
        return $r8;

     label47:
        $z0 = $r1 instanceof gnu.kawa.lispexpr.LispReader;

        if $z0 == 0 goto label48;

        $r2 = (gnu.kawa.lispexpr.LispReader) $r1;

        r24 = $r2.<gnu.kawa.lispexpr.LispReader: gnu.kawa.util.GeneralHashTable sharedStructureTable>;

        if r24 == null goto label48;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r8 = virtualinvoke r24.<gnu.kawa.util.GeneralHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r25, $r1);

        if $r8 == $r1 goto label48;

        return $r8;

     label48:
        virtualinvoke $r1.<gnu.text.Lexer: void error(java.lang.String)>("an unrecognized #n# back-reference was read");

        $r3 = <gnu.mapping.Values: gnu.mapping.Values empty>;

        return $r3;

        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label25 to label26 with label28;
        catch java.lang.Throwable from label38 to label39 with label42;
        catch java.lang.Throwable from label40 to label41 with label42;
    }
