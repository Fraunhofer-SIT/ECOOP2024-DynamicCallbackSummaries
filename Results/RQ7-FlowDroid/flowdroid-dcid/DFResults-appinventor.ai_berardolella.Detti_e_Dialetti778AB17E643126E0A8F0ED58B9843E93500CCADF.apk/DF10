Source: $i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, $i1, $i0)
$i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, $i1, $i0) in <gnu.text.LineBufferedReader: int fill(int)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.LineBufferedReader: int fill(int)>: $i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, $i1, $i0)
<gnu.text.LineBufferedReader: int fill(int)>: $r1 = r0.<gnu.text.LineBufferedReader: char[] buffer>
<gnu.text.LineBufferedReader: int fill(int)>: r0 := @this: gnu.text.LineBufferedReader
<gnu.text.LineBufferedReader: int read()>: virtualinvoke r0.<gnu.text.LineBufferedReader: void lineStart(boolean)>(z0)
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<gnu.mapping.ProcedureN: java.lang.Object applyN(java.lang.Object[])>(r2)
<gnu.kawa.functions.AddOp: java.lang.Object applyN(java.lang.Object[])>: $r2 = staticinvoke <gnu.kawa.functions.AddOp: java.lang.Object applyN(int,java.lang.Object[])>($i0, $r1)
<gnu.kawa.functions.AddOp: java.lang.Object applyN(int,java.lang.Object[])>: r2 = staticinvoke <gnu.kawa.functions.AddOp: java.lang.Object $Mn(java.lang.Object)>(r2)
<gnu.kawa.functions.AddOp: java.lang.Object $Mn(java.lang.Object)>: $r4 = staticinvoke <gnu.kawa.functions.Arithmetic: java.math.BigInteger asBigInteger(java.lang.Object)>($r0)
<gnu.kawa.functions.Arithmetic: java.math.BigInteger asBigInteger(java.lang.Object)>: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>()
<gnu.kawa.functions.Arithmetic: java.math.BigInteger asBigInteger(java.lang.Object)>: specialinvoke r1.<java.math.BigInteger: void <init>(java.lang.String)>($r2)
<gnu.kawa.functions.Arithmetic: java.math.BigInteger asBigInteger(java.lang.Object)>: return r1
<gnu.kawa.functions.AddOp: java.lang.Object $Mn(java.lang.Object)>: $r4 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger negate()>()
<gnu.kawa.functions.AddOp: java.lang.Object $Mn(java.lang.Object)>: return $r4
<gnu.kawa.functions.AddOp: java.lang.Object applyN(int,java.lang.Object[])>: return r2
<gnu.kawa.functions.AddOp: java.lang.Object applyN(java.lang.Object[])>: return $r2
<gnu.mapping.ProcedureN: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<kawa.lang.SyntaxRules: java.lang.Object apply1(java.lang.Object)>: $r1 = virtualinvoke r0.<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>(r2, r4)
<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>: $r1 = r5[0]
<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>: r5 = r0.<kawa.lang.SyntaxRules: java.lang.Object[] literal_identifiers>
<kawa.lang.SyntaxRules: java.lang.Object expand(java.lang.Object,kawa.lang.Translator)>: return $r13
<kawa.lang.SyntaxRules: java.lang.Object apply1(java.lang.Object)>: throw $r7
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = r0.<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
