Source: $i2 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r1, $i4, $i2)
$i2 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r1, $i4, $i2) in <p.b.i.n.a: int a(java.io.InputStream,byte[],int,int)>
Sink: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0) in <p.b.i.n.a: void a(java.io.InputStream,java.io.OutputStream)>

<p.b.i.n.a: int a(java.io.InputStream,byte[],int,int)>: $i2 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r1, $i4, $i2)
<p.b.i.n.a: int a(java.io.InputStream,byte[],int,int)>: return $i3
<p.b.i.n.a: int a(java.io.InputStream,byte[])>: return $i0
<p.b.a.k: byte[] a(p.b.a.v1,byte[][])>: $r2 = $r0[$i1]
<p.b.a.k: byte[] a(p.b.a.v1,byte[][])>: $r1 := @parameter0: p.b.a.v1
<p.b.a.k: p.b.a.t a(int,p.b.a.v1,byte[][])>: $i0 := @parameter0: int
<p.b.a.y: p.b.a.f a()>: $r6 = r0.<p.b.a.y: byte[][] c>
<p.b.a.y: p.b.a.f a()>: throw $r21
<p.b.a.p0: int read(byte[],int,int)>: $r3 = r0.<p.b.a.p0: p.b.a.y a>
<p.b.a.p0: int read(byte[],int,int)>: return $i4
<p.b.a.p0: int read(byte[],int,int)>: $r2 = r0.<p.b.a.p0: java.io.InputStream c>
<p.b.a.p0: int read(byte[],int,int)>: return $i4
<p.b.i.n.a: void a(java.io.InputStream,java.io.OutputStream)>: $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0)
<p.b.i.n.a: void a(java.io.InputStream,java.io.OutputStream)>: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0)
