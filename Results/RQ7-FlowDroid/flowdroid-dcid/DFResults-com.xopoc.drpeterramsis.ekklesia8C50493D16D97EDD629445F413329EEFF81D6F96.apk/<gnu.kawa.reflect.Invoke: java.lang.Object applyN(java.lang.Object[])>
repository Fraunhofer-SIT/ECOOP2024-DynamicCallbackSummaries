    public java.lang.Object applyN(java.lang.Object[]) throws java.lang.Throwable
    {
        gnu.kawa.reflect.Invoke r0;
        gnu.bytecode.ArrayType $r15;
        gnu.expr.Language $r24;
        byte $b4;
        boolean $z0, $z1;
        gnu.expr.TypeValue $r8;
        gnu.mapping.Procedure $r9;
        gnu.bytecode.ObjectType $r6, r7;
        gnu.expr.Keyword $r17;
        java.lang.StringBuilder $r3, $r26;
        gnu.bytecode.Type $r12;
        java.lang.Throwable $r21;
        java.lang.Object[] $r1, $r10;
        gnu.bytecode.ClassType $r14;
        int $i1, $i2, i3, $i5, $i6;
        java.lang.String $r4, $r16;
        java.lang.Number $r18;
        gnu.mapping.MethodProc $r22, $r25;
        char $c0;
        java.lang.RuntimeException $r2, $r27;
        gnu.expr.PairClassType $r13;
        gnu.mapping.CallContext $r23;
        java.lang.Object $r5, $r19, r20;
        java.lang.Class $r11;

        r0 := @this: gnu.kawa.reflect.Invoke;

        $r1 := @parameter0: java.lang.Object[];

        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i1 = (int) $c0;

        if $i1 != 80 goto label01;

        $r27 = new java.lang.RuntimeException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<gnu.kawa.reflect.Invoke: java.lang.String getName()>();

        $r3 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": invoke-special not allowed at run time");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r27;

     label01:
        $i1 = lengthof $r1;

        staticinvoke <gnu.mapping.Procedure: void checkArgCount(gnu.mapping.Procedure,int)>(r0, $i1);

        $r5 = $r1[0];

        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i2 = (int) $c0;

        if $i2 == 86 goto label03;

        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i2 = (int) $c0;

        if $i2 == 42 goto label03;

        $r6 = staticinvoke <gnu.kawa.reflect.Invoke: gnu.bytecode.ObjectType typeFrom(java.lang.Object,gnu.kawa.reflect.Invoke)>($r5, r0);

     label02:
        r7 = $r6;

        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i2 = (int) $c0;

        if $i2 != 78 goto label15;

        $r5 = null;

        $z0 = $r6 instanceof gnu.expr.TypeValue;

        if $z0 == 0 goto label04;

        $r8 = (gnu.expr.TypeValue) $r6;

        $r9 = interfaceinvoke $r8.<gnu.expr.TypeValue: gnu.mapping.Procedure getConstructor()>();

        if $r9 == null goto label04;

        $i1 = $i1 + -1;

        $r10 = newarray (java.lang.Object)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, $r10, 0, $i1);

        $r5 = virtualinvoke $r9.<gnu.mapping.Procedure: java.lang.Object applyN(java.lang.Object[])>($r10);

        return $r5;

     label03:
        $r11 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = staticinvoke <gnu.bytecode.Type: gnu.bytecode.Type make(java.lang.Class)>($r11);

        $r6 = (gnu.bytecode.ObjectType) $r12;

        goto label02;

     label04:
        $z0 = r7 instanceof gnu.expr.PairClassType;

        if $z0 == 0 goto label05;

        $r13 = (gnu.expr.PairClassType) r7;

        r7 = $r13.<gnu.expr.PairClassType: gnu.bytecode.ClassType instanceType>;

     label05:
        $z0 = r7 instanceof gnu.bytecode.ArrayType;

        if $z0 == 0 goto label16;

        $r15 = (gnu.bytecode.ArrayType) r7;

        $r12 = virtualinvoke $r15.<gnu.bytecode.ArrayType: gnu.bytecode.Type getComponentType()>();

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

        if $i1 < 2 goto label12;

        $r5 = $r1[1];

        $z0 = $r5 instanceof gnu.expr.Keyword;

        if $z0 == 0 goto label12;

        $r16 = "length";

        $r5 = $r1[1];

        $r17 = (gnu.expr.Keyword) $r5;

        $r4 = virtualinvoke $r17.<gnu.expr.Keyword: java.lang.String getName()>();

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label06;

        $r16 = "size";

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label12;

     label06:
        $r5 = $r1[2];

        $r18 = (java.lang.Number) $r5;

        i3 = virtualinvoke $r18.<java.lang.Number: int intValue()>();

        $i2 = 3;

        $z0 = 1;

     label07:
        $r11 = virtualinvoke $r12.<gnu.bytecode.Type: java.lang.Class getReflectClass()>();

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r11, i3);

        i3 = 0;

     label08:
        if $i2 > $i1 goto label14;

        $r19 = $r1[$i2];

        r20 = $r19;

        if $z0 == 0 goto label11;

        $z1 = $r19 instanceof gnu.expr.Keyword;

        if $z1 == 0 goto label11;

        if $i2 >= $i1 goto label11;

        $r17 = (gnu.expr.Keyword) $r19;

        $r4 = virtualinvoke $r17.<gnu.expr.Keyword: java.lang.String getName()>();

     label09:
        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label10:
        $i2 = $i2 + 1;

        r20 = $r1[$i2];

     label11:
        $r19 = virtualinvoke $r12.<gnu.bytecode.Type: java.lang.Object coerceFromObject(java.lang.Object)>(r20);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r5, i3, $r19);

        i3 = i3 + 1;

        $i2 = $i2 + 1;

        goto label08;

     label12:
        i3 = $i1;

        $i2 = 1;

        $z0 = 0;

        goto label07;

     label13:
        $r21 := @caughtexception;

        $r27 = new java.lang.RuntimeException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("non-integer keyword \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in array constructor");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r27;

     label14:
        return $r5;

     label15:
        $r5 = $r1[1];

     label16:
        $r22 = virtualinvoke r0.<gnu.kawa.reflect.Invoke: gnu.mapping.MethodProc lookupMethods(gnu.bytecode.ObjectType,java.lang.Object)>(r7, $r5);

        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i2 = (int) $c0;

        if $i2 == 78 goto label22;

        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i2 = (int) $c0;

        if $i2 == 83 goto label17;

        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        $i2 = (int) $c0;

        if $i2 != 115 goto label21;

     label17:
        $b4 = 2;

     label18:
        $i2 = $i1 - $b4;

        $r10 = newarray (java.lang.Object)[$i2];

        $i2 = 0;

        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        i3 = (int) $c0;

        if i3 == 86 goto label19;

        $c0 = r0.<gnu.kawa.reflect.Invoke: char kind>;

        i3 = (int) $c0;

        if i3 != 42 goto label20;

     label19:
        $i2 = 1;

        $r5 = $r1[0];

        $r10[0] = $r5;

     label20:
        $i1 = $i1 + -2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 2, $r10, $i2, $i1);

        $r5 = virtualinvoke $r22.<gnu.mapping.MethodProc: java.lang.Object applyN(java.lang.Object[])>($r10);

        return $r5;

     label21:
        $b4 = 1;

        goto label18;

     label22:
        $r23 = staticinvoke <gnu.mapping.CallContext: gnu.mapping.CallContext getInstance()>();

        $i2 = 0;

     label23:
        i3 = lengthof $r1;

        if $i2 >= i3 goto label24;

        $r5 = $r1[$i2];

        $z0 = $r5 instanceof gnu.expr.Keyword;

        if $z0 != 0 goto label24;

        $i2 = $i2 + 1;

        goto label23;

     label24:
        i3 = -1;

        $i5 = lengthof $r1;

        if $i2 != $i5 goto label31;

        $i5 = virtualinvoke $r22.<gnu.mapping.MethodProc: int matchN(java.lang.Object[],gnu.mapping.CallContext)>($r1, $r23);

        i3 = $i5;

        if $i5 != 0 goto label25;

        $r5 = virtualinvoke $r23.<gnu.mapping.CallContext: java.lang.Object runUntilValue()>();

        return $r5;

     label25:
        $r14 = (gnu.bytecode.ClassType) r7;

        $r24 = r0.<gnu.kawa.reflect.Invoke: gnu.expr.Language language>;

        $r25 = staticinvoke <gnu.kawa.reflect.ClassMethods: gnu.mapping.MethodProc apply(gnu.bytecode.ObjectType,java.lang.String,char,gnu.expr.Language)>($r14, "valueOf", 0, $r24);

        if $r25 == null goto label26;

        i3 = $i1 + -1;

        $r10 = newarray (java.lang.Object)[i3];

        $i1 = $i1 + -1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, $r10, 0, $i1);

        $i1 = virtualinvoke $r25.<gnu.mapping.MethodProc: int matchN(java.lang.Object[],gnu.mapping.CallContext)>($r10, $r23);

        i3 = $i1;

        if $i1 != 0 goto label26;

        $r5 = virtualinvoke $r23.<gnu.mapping.CallContext: java.lang.Object runUntilValue()>();

        return $r5;

     label26:
        $r5 = $r1[0];

        $r5 = virtualinvoke $r22.<gnu.mapping.MethodProc: java.lang.Object apply1(java.lang.Object)>($r5);

     label27:
        $i1 = $i2;

     label28:
        $i5 = $i1 + 1;

        $i6 = lengthof $r1;

        if $i5 >= $i6 goto label29;

        $r19 = $r1[$i1];

        $z0 = $r19 instanceof gnu.expr.Keyword;

        if $z0 != 0 goto label32;

     label29:
        $i5 = lengthof $r1;

        if $i2 != $i5 goto label30;

        $i1 = 1;

     label30:
        $i2 = lengthof $r1;

        if $i1 == $i2 goto label34;

        $r14 = (gnu.bytecode.ClassType) r7;

        $r24 = r0.<gnu.kawa.reflect.Invoke: gnu.expr.Language language>;

        $r25 = staticinvoke <gnu.kawa.reflect.ClassMethods: gnu.mapping.MethodProc apply(gnu.bytecode.ObjectType,java.lang.String,char,gnu.expr.Language)>($r14, "add", 0, $r24);

        if $r25 != null goto label33;

        $r2 = staticinvoke <gnu.mapping.MethodProc: java.lang.RuntimeException matchFailAsException(int,gnu.mapping.Procedure,java.lang.Object[])>(i3, $r22, $r1);

        throw $r2;

     label31:
        $r10 = newarray (java.lang.Object)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r10, 0, $i2);

        $r5 = virtualinvoke $r22.<gnu.mapping.MethodProc: java.lang.Object applyN(java.lang.Object[])>($r10);

        goto label27;

     label32:
        $r17 = (gnu.expr.Keyword) $r19;

        $i5 = $i1 + 1;

        $r19 = $r1[$i5];

        $r4 = virtualinvoke $r17.<gnu.expr.Keyword: java.lang.String getName()>();

        staticinvoke <gnu.kawa.reflect.SlotSet: void apply(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(0, $r5, $r4, $r19);

        $i1 = $i1 + 2;

        goto label28;

     label33:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label34;

        $i2 = $i1;

        $i1 = $i1 + 1;

        $r19 = $r1[$i2];

        virtualinvoke $r25.<gnu.mapping.MethodProc: java.lang.Object apply2(java.lang.Object,java.lang.Object)>($r5, $r19);

        goto label33;

     label34:
        return $r5;

        catch java.lang.Throwable from label09 to label10 with label13;
    }
