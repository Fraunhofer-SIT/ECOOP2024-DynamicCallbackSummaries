Source: $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>()
$i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>() in <gnu.mapping.TtyInPort: int read()>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.mapping.TtyInPort: int read()>: $i0 = specialinvoke r0.<gnu.mapping.InPort: int read()>()
<gnu.mapping.TtyInPort: int read()>: return $i0
<gnu.text.Lexer: int read()>: return $i0
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: void tokenBufferAppend(int)>($i1)
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) $i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r1[i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r1 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.kawa.lispexpr.LispReader: void readToken(int,char,gnu.kawa.lispexpr.ReadTable)>: return
<gnu.kawa.lispexpr.LispReader: java.lang.Object readCharacter(gnu.kawa.lispexpr.LispReader)>: r2 = $r0.<gnu.kawa.lispexpr.LispReader: char[] tokenBuffer>
<gnu.kawa.lispexpr.LispReader: java.lang.Object readCharacter(gnu.kawa.lispexpr.LispReader)>: $c2 = r2[i1]
<gnu.kawa.lispexpr.LispReader: java.lang.Object readCharacter(gnu.kawa.lispexpr.LispReader)>: $i3 = (int) $c2
<gnu.kawa.lispexpr.LispReader: java.lang.Object readCharacter(gnu.kawa.lispexpr.LispReader)>: $i3 = staticinvoke <java.lang.Character: int digit(int,int)>($i3, 8)
<gnu.kawa.lispexpr.LispReader: java.lang.Object readCharacter(gnu.kawa.lispexpr.LispReader)>: i4 = $i3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readCharacter(gnu.kawa.lispexpr.LispReader)>: $r4 = staticinvoke <gnu.text.Char: gnu.text.Char make(int)>(i4)
<gnu.text.Char: gnu.text.Char make(int)>: $r1 = virtualinvoke $r3.<gnu.text.CharMap: gnu.text.Char get(int)>($i0)
<gnu.text.CharMap: gnu.text.Char get(int)>: specialinvoke r5.<gnu.text.Char: void <init>(int)>($i0)
<gnu.text.Char: void <init>(int)>: r0.<gnu.text.Char: int value> = $i0
<gnu.text.Char: void <init>(int)>: return
<gnu.text.CharMap: gnu.text.Char get(int)>: return r5
<gnu.text.Char: gnu.text.Char make(int)>: return $r1
<gnu.kawa.lispexpr.LispReader: java.lang.Object readCharacter(gnu.kawa.lispexpr.LispReader)>: return $r4
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r9
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
