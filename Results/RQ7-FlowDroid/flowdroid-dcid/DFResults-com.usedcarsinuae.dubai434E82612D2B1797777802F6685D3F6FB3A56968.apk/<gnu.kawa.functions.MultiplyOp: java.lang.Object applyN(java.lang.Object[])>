    public java.lang.Object applyN(java.lang.Object[])
    {
        java.lang.Float $r17;
        java.lang.Object[] $r1;
        java.lang.Double $r16;
        long $l4, $l5;
        gnu.math.RatNum $r8, $r9;
        java.lang.Integer $r19;
        java.math.BigDecimal $r10, $r11;
        java.lang.Long $r18;
        int $i0, $i1, $i2, $i3, $i6;
        gnu.math.IntNum $r2, $r12;
        java.math.BigInteger $r13, $r14;
        java.lang.Number $r7;
        double $d0, $d1;
        gnu.math.DFloNum $r15;
        gnu.kawa.functions.MultiplyOp r0;
        gnu.math.Numeric $r5, $r6;
        float $f0, $f1;
        java.lang.Object $r3, $r4;

        r0 := @this: gnu.kawa.functions.MultiplyOp;

        $r1 := @parameter0: java.lang.Object[];

        $i0 = lengthof $r1;

        if $i0 != 0 goto label01;

        $r2 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum one()>();

        return $r2;

     label01:
        $r3 = $r1[0];

        $r3 = (java.lang.Number) $r3;

        $i1 = staticinvoke <gnu.kawa.functions.Arithmetic: int classifyValue(java.lang.Object)>($r3);

        $i2 = 1;

     label02:
        if $i2 >= $i0 goto label16;

        $r4 = $r1[$i2];

        $i3 = staticinvoke <gnu.kawa.functions.Arithmetic: int classifyValue(java.lang.Object)>($r4);

        if $i1 >= $i3 goto label03;

        $i1 = $i3;

     label03:
        lookupswitch($i1)
        {
            case 1: goto label13;
            case 2: goto label12;
            case 3: goto label11;
            case 4: goto label10;
            case 5: goto label09;
            case 6: goto label08;
            case 7: goto label07;
            case 8: goto label06;
            case 9: goto label05;
            default: goto label04;
        };

     label04:
        $r5 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.Numeric asNumeric(java.lang.Object)>($r3);

        $r6 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.Numeric asNumeric(java.lang.Object)>($r4);

        $r3 = virtualinvoke $r5.<gnu.math.Numeric: gnu.math.Numeric mul(java.lang.Object)>($r6);

        goto label15;

     label05:
        $d0 = staticinvoke <gnu.kawa.functions.Arithmetic: double asDouble(java.lang.Object)>($r3);

        $d1 = staticinvoke <gnu.kawa.functions.Arithmetic: double asDouble(java.lang.Object)>($r4);

        $r15 = new gnu.math.DFloNum;

        $r3 = $r15;

        $d0 = $d0 * $d1;

        specialinvoke $r15.<gnu.math.DFloNum: void <init>(double)>($d0);

        goto label15;

     label06:
        $d0 = staticinvoke <gnu.kawa.functions.Arithmetic: double asDouble(java.lang.Object)>($r3);

        $d1 = staticinvoke <gnu.kawa.functions.Arithmetic: double asDouble(java.lang.Object)>($r4);

        $r16 = new java.lang.Double;

        $r3 = $r16;

        $d0 = $d0 * $d1;

        specialinvoke $r16.<java.lang.Double: void <init>(double)>($d0);

        goto label15;

     label07:
        $f0 = staticinvoke <gnu.kawa.functions.Arithmetic: float asFloat(java.lang.Object)>($r3);

        $f1 = staticinvoke <gnu.kawa.functions.Arithmetic: float asFloat(java.lang.Object)>($r4);

        $r17 = new java.lang.Float;

        $r7 = $r17;

        $f0 = $f0 * $f1;

        specialinvoke $r17.<java.lang.Float: void <init>(float)>($f0);

        goto label14;

     label08:
        $r8 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.RatNum asRatNum(java.lang.Object)>($r3);

        $r9 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.RatNum asRatNum(java.lang.Object)>($r4);

        $r3 = staticinvoke <gnu.math.RatNum: gnu.math.RatNum times(gnu.math.RatNum,gnu.math.RatNum)>($r8, $r9);

        goto label15;

     label09:
        $r10 = staticinvoke <gnu.kawa.functions.Arithmetic: java.math.BigDecimal asBigDecimal(java.lang.Object)>($r3);

        $r11 = staticinvoke <gnu.kawa.functions.Arithmetic: java.math.BigDecimal asBigDecimal(java.lang.Object)>($r4);

        $r3 = virtualinvoke $r10.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r11);

        goto label15;

     label10:
        $r2 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.IntNum asIntNum(java.lang.Object)>($r3);

        $r12 = staticinvoke <gnu.kawa.functions.Arithmetic: gnu.math.IntNum asIntNum(java.lang.Object)>($r4);

        $r3 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum times(gnu.math.IntNum,gnu.math.IntNum)>($r2, $r12);

        goto label15;

     label11:
        $r13 = staticinvoke <gnu.kawa.functions.Arithmetic: java.math.BigInteger asBigInteger(java.lang.Object)>($r3);

        $r14 = staticinvoke <gnu.kawa.functions.Arithmetic: java.math.BigInteger asBigInteger(java.lang.Object)>($r4);

        $r3 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r14);

        goto label15;

     label12:
        $l4 = staticinvoke <gnu.kawa.functions.Arithmetic: long asLong(java.lang.Object)>($r3);

        $l5 = staticinvoke <gnu.kawa.functions.Arithmetic: long asLong(java.lang.Object)>($r4);

        $r18 = new java.lang.Long;

        $r3 = $r18;

        $l4 = $l4 * $l5;

        specialinvoke $r18.<java.lang.Long: void <init>(long)>($l4);

        goto label15;

     label13:
        $i3 = staticinvoke <gnu.kawa.functions.Arithmetic: int asInt(java.lang.Object)>($r3);

        $i6 = staticinvoke <gnu.kawa.functions.Arithmetic: int asInt(java.lang.Object)>($r4);

        $r19 = new java.lang.Integer;

        $r7 = $r19;

        $i3 = $i3 * $i6;

        specialinvoke $r19.<java.lang.Integer: void <init>(int)>($i3);

     label14:
        $r3 = $r7;

     label15:
        $i2 = $i2 + 1;

        goto label02;

     label16:
        return $r3;
    }
