Source: $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
$r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir") in <gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>
Sink: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir")
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r5, $r1)
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: $r3 = $r7
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: r0 = staticinvoke <gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>($r3)
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: specialinvoke $r1.<gnu.text.FilePath: void <init>(java.io.File)>($r0)
<gnu.text.FilePath: void <init>(java.io.File)>: r0.<gnu.text.FilePath: java.io.File file> = $r2
<gnu.text.FilePath: void <init>(java.io.File)>: return
<gnu.text.FilePath: gnu.text.FilePath valueOf(java.io.File)>: return $r1
<gnu.text.FilePath: gnu.text.Path resolve(java.lang.String)>: return r0
<gnu.text.Path: gnu.text.Path resolve(gnu.text.Path)>: return r0
<gnu.xml.NodeTree: gnu.text.Path baseUriOfPos(int,boolean)>: return $r5
<gnu.kawa.xml.KNode: gnu.text.Path baseURI()>: return $r1
<kawa.lib.misc: java.lang.Object baseUri(java.lang.Object)>: return $r2
<kawa.lib.misc: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r2 = virtualinvoke $r1.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>(r0, $r2)
<com.niotron.allinfoapps4.UsedCarsinDubai.Screen1$frame: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: virtualinvoke $r3.<com.niotron.allinfoapps4.UsedCarsinDubai.Screen1: void addToFormDoAfterCreation(java.lang.Object)>($r2)
<com.niotron.allinfoapps4.UsedCarsinDubai.Screen1: void addToFormDoAfterCreation(java.lang.Object)>: $r2 = staticinvoke <kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>($r3, $r1)
<kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>: specialinvoke $r2.<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1)
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: r0.<gnu.lists.Pair: java.lang.Object car> = $r1
<gnu.lists.Pair: void <init>(java.lang.Object,java.lang.Object)>: return
<kawa.lib.lists: gnu.lists.Pair cons(java.lang.Object,java.lang.Object)>: return $r2
<com.niotron.allinfoapps4.UsedCarsinDubai.Screen1: void addToFormDoAfterCreation(java.lang.Object)>: r0.<com.niotron.allinfoapps4.UsedCarsinDubai.Screen1: gnu.lists.LList form$Mndo$Mnafter$Mncreation> = $r2
<com.niotron.allinfoapps4.UsedCarsinDubai.Screen1: void addToFormDoAfterCreation(java.lang.Object)>: return
<com.niotron.allinfoapps4.UsedCarsinDubai.Screen1$frame: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: $r3 = r0.<com.niotron.allinfoapps4.UsedCarsinDubai.Screen1$frame: com.niotron.allinfoapps4.UsedCarsinDubai.Screen1 $main>
<com.niotron.allinfoapps4.UsedCarsinDubai.Screen1$frame: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return r11
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: $r1 = r0.<gnu.expr.ModuleMethod: gnu.expr.ModuleBody module>
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: r0 := @this: gnu.expr.ModuleMethod
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r3 = r0.<gnu.mapping.TtyInPort: gnu.mapping.Procedure prompter>
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<gnu.mapping.Procedure: java.lang.Object apply1(java.lang.Object)>(r0)
<gnu.kawa.xml.MakeText: java.lang.Object apply1(java.lang.Object)>: return $r2
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r5)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r1.<gnu.mapping.OutPort: void print(java.lang.String)>($r2)
