    public static gnu.math.RatNum make(gnu.math.IntNum, gnu.math.IntNum)
    {
        gnu.math.IntFraction $r4;
        gnu.math.IntNum $r0, $r1, $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: gnu.math.IntNum;

        $r1 := @parameter1: gnu.math.IntNum;

        $r2 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum gcd(gnu.math.IntNum,gnu.math.IntNum)>($r0, $r1);

        $r3 = $r2;

        $z0 = virtualinvoke $r1.<gnu.math.IntNum: boolean isNegative()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum 'neg'(gnu.math.IntNum)>($r2);

     label1:
        $z0 = virtualinvoke $r3.<gnu.math.IntNum: boolean isOne()>();

        if $z0 != 0 goto label2;

        $r0 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum quotient(gnu.math.IntNum,gnu.math.IntNum)>($r0, $r3);

        $r1 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum quotient(gnu.math.IntNum,gnu.math.IntNum)>($r1, $r3);

     label2:
        $z0 = virtualinvoke $r1.<gnu.math.IntNum: boolean isOne()>();

        if $z0 == 0 goto label3;

        return $r0;

     label3:
        $r4 = new gnu.math.IntFraction;

        specialinvoke $r4.<gnu.math.IntFraction: void <init>(gnu.math.IntNum,gnu.math.IntNum)>($r0, $r1);

        return $r4;
    }
