    public java.lang.Object applyN(gnu.expr.ModuleMethod, java.lang.Object[])
    {
        java.lang.Object[] $r2, $r5;
        gnu.mapping.Symbol $r8, $r9;
        gnu.mapping.Values r12;
        gnu.expr.ModuleMethod $r1;
        java.lang.ClassCastException $r6, $r10, $r11;
        int $i0, $i1;
        java.lang.Boolean r13;
        gnu.expr.GenericProc $r4;
        boolean $z0;
        kawa.lib.misc r0;
        gnu.mapping.WrongType $r14;
        java.lang.Object $r3, $r7;

        r0 := @this: kawa.lib.misc;

        $r1 := @parameter0: gnu.expr.ModuleMethod;

        $r2 := @parameter1: java.lang.Object[];

        $i0 = $r1.<gnu.expr.ModuleMethod: int selector>;

        if $i0 == 7 goto label11;

        if $i0 == 16 goto label10;

        if $i0 == 28 goto label07;

        if $i0 == 32 goto label01;

        $r3 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object applyN(gnu.expr.ModuleMethod,java.lang.Object[])>($r1, $r2);

        return $r3;

     label01:
        $r3 = $r2[0];

     label02:
        $r4 = (gnu.expr.GenericProc) $r3;

     label03:
        $i0 = lengthof $r2;

        $i0 = $i0 - 1;

        $r5 = newarray (java.lang.Object)[$i0];

     label04:
        $i0 = $i0 + -1;

        if $i0 >= 0 goto label05;

        staticinvoke <kawa.lib.misc: void addProcedureProperties(gnu.expr.GenericProc,java.lang.Object[])>($r4, $r5);

        r12 = <gnu.mapping.Values: gnu.mapping.Values empty>;

        return r12;

     label05:
        $i1 = $i0 + 1;

        $r3 = $r2[$i1];

        $r5[$i0] = $r3;

        goto label04;

     label06:
        $r6 := @caughtexception;

        $r14 = new gnu.mapping.WrongType;

        specialinvoke $r14.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r6, "add-procedure-properties", 1, $r3);

        throw $r14;

     label07:
        $r3 = $r2[0];

        $i0 = lengthof $r2;

        $i0 = $i0 - 1;

        $r5 = newarray (java.lang.Object)[$i0];

     label08:
        $i0 = $i0 + -1;

        if $i0 >= 0 goto label09;

        $r3 = staticinvoke <kawa.lib.misc: java.lang.Object error$V(java.lang.Object,java.lang.Object[])>($r3, $r5);

        return $r3;

     label09:
        $i1 = $i0 + 1;

        $r7 = $r2[$i1];

        $r5[$i0] = $r7;

        goto label08;

     label10:
        $r3 = staticinvoke <kawa.lib.misc: java.lang.Object values(java.lang.Object[])>($r2);

        return $r3;

     label11:
        $r3 = $r2[0];

     label12:
        $r8 = (gnu.mapping.Symbol) $r3;

     label13:
        $r3 = $r2[1];

     label14:
        $r9 = (gnu.mapping.Symbol) $r3;

     label15:
        $i0 = lengthof $r2;

        $i0 = $i0 - 2;

        $r5 = newarray (java.lang.Object)[$i0];

     label16:
        $i0 = $i0 + -1;

        if $i0 >= 0 goto label18;

        $z0 = staticinvoke <kawa.lib.misc: boolean lambda2$V(gnu.mapping.Symbol,gnu.mapping.Symbol,java.lang.Object[])>($r8, $r9, $r5);

        if $z0 == 0 goto label17;

        r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r13;

     label17:
        r13 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r13;

     label18:
        $i1 = $i0 + 2;

        $r3 = $r2[$i1];

        $r5[$i0] = $r3;

        goto label16;

     label19:
        $r10 := @caughtexception;

        $r14 = new gnu.mapping.WrongType;

        specialinvoke $r14.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r10, "lambda", 2, $r3);

        throw $r14;

     label20:
        $r11 := @caughtexception;

        $r14 = new gnu.mapping.WrongType;

        specialinvoke $r14.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r11, "lambda", 1, $r3);

        throw $r14;

        catch java.lang.ClassCastException from label02 to label03 with label06;
        catch java.lang.ClassCastException from label12 to label13 with label20;
        catch java.lang.ClassCastException from label14 to label15 with label19;
    }
