    public static final gnu.math.IntNum times(gnu.math.IntNum, gnu.math.IntNum)
    {
        int[] $r0, $r3, $r4;
        int $i0, $i1, $i2;
        gnu.math.IntNum $r1, $r2;
        boolean $z0, $z1;

        $r1 := @parameter0: gnu.math.IntNum;

        $r2 := @parameter1: gnu.math.IntNum;

        $r3 = $r2.<gnu.math.IntNum: int[] words>;

        if $r3 != null goto label1;

        $i1 = $r2.<gnu.math.IntNum: int ival>;

        $r1 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum times(gnu.math.IntNum,int)>($r1, $i1);

        return $r1;

     label1:
        $r3 = $r1.<gnu.math.IntNum: int[] words>;

        if $r3 != null goto label2;

        $i1 = $r1.<gnu.math.IntNum: int ival>;

        $r1 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum times(gnu.math.IntNum,int)>($r2, $i1);

        return $r1;

     label2:
        $i1 = $r1.<gnu.math.IntNum: int ival>;

        $i2 = $r2.<gnu.math.IntNum: int ival>;

        $z0 = virtualinvoke $r1.<gnu.math.IntNum: boolean isNegative()>();

        if $z0 == 0 goto label3;

        $r3 = newarray (int)[$i1];

        $r4 = $r1.<gnu.math.IntNum: int[] words>;

        staticinvoke <gnu.math.IntNum: boolean negate(int[],int[],int)>($r3, $r4, $i1);

        $z0 = 1;

        goto label4;

     label3:
        $r3 = $r1.<gnu.math.IntNum: int[] words>;

        $z0 = 0;

     label4:
        $z1 = virtualinvoke $r2.<gnu.math.IntNum: boolean isNegative()>();

        if $z1 == 0 goto label5;

        $z0 = $z0 ^ 1;

        $r4 = newarray (int)[$i2];

        $r0 = $r2.<gnu.math.IntNum: int[] words>;

        staticinvoke <gnu.math.IntNum: boolean negate(int[],int[],int)>($r4, $r0, $i2);

        goto label6;

     label5:
        $r4 = $r2.<gnu.math.IntNum: int[] words>;

     label6:
        if $i1 >= $i2 goto label7;

        $i0 = $i2;

        $i2 = $i1;

        $i1 = $i0;

        $r0 = $r4;

        $r4 = $r3;

        $r3 = $r0;

     label7:
        $i0 = $i1 + $i2;

        $r1 = staticinvoke <gnu.math.IntNum: gnu.math.IntNum alloc(int)>($i0);

        $r0 = $r1.<gnu.math.IntNum: int[] words>;

        staticinvoke <gnu.math.MPN: void mul(int[],int[],int,int[],int)>($r0, $r3, $i1, $r4, $i2);

        $r1.<gnu.math.IntNum: int ival> = $i0;

        if $z0 == 0 goto label8;

        virtualinvoke $r1.<gnu.math.IntNum: void setNegative()>();

     label8:
        $r1 = virtualinvoke $r1.<gnu.math.IntNum: gnu.math.IntNum canonicalize()>();

        return $r1;
    }
