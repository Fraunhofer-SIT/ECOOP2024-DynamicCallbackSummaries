    public java.lang.Object apply1(gnu.expr.ModuleMethod, java.lang.Object)
    {
        gnu.mapping.OutPort $r7;
        gnu.mapping.Values r26;
        gnu.expr.ModuleMethod $r1;
        java.lang.Integer $r13;
        kawa.lib.ports r0;
        gnu.mapping.CharArrayOutPort $r18;
        boolean $z0;
        java.lang.CharSequence $r21;
        gnu.mapping.Procedure $r11;
        gnu.lists.FString $r19;
        gnu.mapping.WrongType $r28;
        gnu.text.Char $r16;
        java.lang.ClassCastException $r4, $r6, $r8, $r9, $r12, $r14, $r15, $r17, $r20, $r22, $r24, $r25;
        gnu.text.Path $r23;
        int $i0;
        gnu.text.LineBufferedReader $r3;
        java.lang.Boolean r27;
        gnu.mapping.InPort $r5;
        char $c1;
        gnu.mapping.TtyInPort $r10;
        java.lang.Object $r2;

        r0 := @this: kawa.lib.ports;

        $r1 := @parameter0: gnu.expr.ModuleMethod;

        $r2 := @parameter1: java.lang.Object;

        $i0 = $r1.<gnu.expr.ModuleMethod: int selector>;

        lookupswitch($i0)
        {
            case 1: goto label56;
            case 2: goto label53;
            case 3: goto label01;
            case 4: goto label01;
            case 5: goto label01;
            case 6: goto label01;
            case 7: goto label51;
            case 8: goto label49;
            case 9: goto label48;
            case 10: goto label47;
            case 11: goto label46;
            case 12: goto label45;
            case 13: goto label01;
            case 14: goto label42;
            case 15: goto label01;
            case 16: goto label39;
            case 17: goto label01;
            case 18: goto label36;
            case 19: goto label35;
            case 20: goto label01;
            case 21: goto label34;
            case 22: goto label01;
            case 23: goto label32;
            case 24: goto label30;
            case 25: goto label01;
            case 26: goto label29;
            case 27: goto label01;
            case 28: goto label28;
            case 29: goto label01;
            case 30: goto label27;
            case 31: goto label01;
            case 32: goto label24;
            case 33: goto label01;
            case 34: goto label21;
            case 35: goto label20;
            case 36: goto label19;
            case 37: goto label18;
            case 38: goto label01;
            case 39: goto label15;
            case 40: goto label12;
            case 41: goto label09;
            case 42: goto label06;
            case 43: goto label01;
            case 44: goto label03;
            case 45: goto label01;
            case 46: goto label01;
            case 47: goto label02;
            default: goto label01;
        };

     label01:
        $r2 = specialinvoke r0.<gnu.expr.ModuleBody: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>($r1, $r2);

        return $r2;

     label02:
        staticinvoke <kawa.lib.ports: void transcriptOn(java.lang.Object)>($r2);

        r26 = <gnu.mapping.Values: gnu.mapping.Values empty>;

        return r26;

     label03:
        $r3 = (gnu.text.LineBufferedReader) $r2;

     label04:
        $r2 = staticinvoke <kawa.lib.ports: java.lang.Object readLine(gnu.text.LineBufferedReader)>($r3);

        return $r2;

     label05:
        $r4 := @caughtexception;

        $r28 = new gnu.mapping.WrongType;

        specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r4, "read-line", 1, $r2);

        throw $r28;

     label06:
        $r5 = (gnu.mapping.InPort) $r2;

     label07:
        $r2 = staticinvoke <kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>($r5);

        return $r2;

     label08:
        $r6 := @caughtexception;

        $r28 = new gnu.mapping.WrongType;

        specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r6, "read", 1, $r2);

        throw $r28;

     label09:
        $r7 = (gnu.mapping.OutPort) $r2;

     label10:
        $r2 = staticinvoke <kawa.lib.ports: java.lang.Object closeOutputPort(gnu.mapping.OutPort)>($r7);

        return $r2;

     label11:
        $r8 := @caughtexception;

        $r28 = new gnu.mapping.WrongType;

        specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r8, "close-output-port", 1, $r2);

        throw $r28;

     label12:
        $r5 = (gnu.mapping.InPort) $r2;

     label13:
        $r2 = staticinvoke <kawa.lib.ports: java.lang.Object closeInputPort(gnu.mapping.InPort)>($r5);

        return $r2;

     label14:
        $r9 := @caughtexception;

        $r28 = new gnu.mapping.WrongType;

        specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r9, "close-input-port", 1, $r2);

        throw $r28;

     label15:
        $r10 = (gnu.mapping.TtyInPort) $r2;

     label16:
        $r11 = staticinvoke <kawa.lib.ports: gnu.mapping.Procedure inputPortPrompter(gnu.mapping.TtyInPort)>($r10);

        return $r11;

     label17:
        $r12 := @caughtexception;

        $r28 = new gnu.mapping.WrongType;

        specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r12, "input-port-prompter", 1, $r2);

        throw $r28;

     label18:
        $r2 = staticinvoke <kawa.lib.ports: java.lang.Object defaultPrompter(java.lang.Object)>($r2);

        return $r2;

     label19:
        $i0 = staticinvoke <kawa.lib.ports: int inputPortColumnNumber(java.lang.Object)>($r2);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r13;

     label20:
        $i0 = staticinvoke <kawa.lib.ports: int portColumn(java.lang.Object)>($r2);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r13;

     label21:
        $r3 = (gnu.text.LineBufferedReader) $r2;

     label22:
        $r2 = staticinvoke <kawa.lib.ports: java.lang.Object inputPortLineNumber(gnu.text.LineBufferedReader)>($r3);

        return $r2;

     label23:
        $r14 := @caughtexception;

        $r28 = new gnu.mapping.WrongType;

        specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r14, "input-port-line-number", 1, $r2);

        throw $r28;

     label24:
        $r3 = (gnu.text.LineBufferedReader) $r2;

     label25:
        $i0 = staticinvoke <kawa.lib.ports: int portLine(gnu.text.LineBufferedReader)>($r3);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r13;

     label26:
        $r15 := @caughtexception;

        $r28 = new gnu.mapping.WrongType;

        specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r15, "port-line", 1, $r2);

        throw $r28;

     label27:
        $c1 = staticinvoke <kawa.lib.ports: char inputPortReadState(java.lang.Object)>($r2);

        $i0 = (int) $c1;

        $r16 = staticinvoke <gnu.text.Char: gnu.text.Char make(int)>($i0);

        return $r16;

     label28:
        staticinvoke <kawa.lib.ports: void display(java.lang.Object)>($r2);

        r26 = <gnu.mapping.Values: gnu.mapping.Values empty>;

        return r26;

     label29:
        staticinvoke <kawa.lib.ports: void write(java.lang.Object)>($r2);

        r26 = <gnu.mapping.Values: gnu.mapping.Values empty>;

        return r26;

     label30:
        $z0 = staticinvoke <kawa.lib.ports: boolean isCharReady(java.lang.Object)>($r2);

        if $z0 == 0 goto label31;

        r27 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r27;

     label31:
        r27 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r27;

     label32:
        $z0 = staticinvoke <kawa.lib.ports: boolean isEofObject(java.lang.Object)>($r2);

        if $z0 == 0 goto label33;

        r27 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r27;

     label33:
        r27 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r27;

     label34:
        staticinvoke <kawa.lib.ports: void newline(java.lang.Object)>($r2);

        r26 = <gnu.mapping.Values: gnu.mapping.Values empty>;

        return r26;

     label35:
        staticinvoke <kawa.lib.ports: void forceOutput(java.lang.Object)>($r2);

        r26 = <gnu.mapping.Values: gnu.mapping.Values empty>;

        return r26;

     label36:
        $r11 = (gnu.mapping.Procedure) $r2;

     label37:
        $r2 = staticinvoke <kawa.lib.ports: java.lang.Object callWithOutputString(gnu.mapping.Procedure)>($r11);

        return $r2;

     label38:
        $r17 := @caughtexception;

        $r28 = new gnu.mapping.WrongType;

        specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r17, "call-with-output-string", 1, $r2);

        throw $r28;

     label39:
        $r18 = (gnu.mapping.CharArrayOutPort) $r2;

     label40:
        $r19 = staticinvoke <kawa.lib.ports: gnu.lists.FString getOutputString(gnu.mapping.CharArrayOutPort)>($r18);

        return $r19;

     label41:
        $r20 := @caughtexception;

        $r28 = new gnu.mapping.WrongType;

        specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r20, "get-output-string", 1, $r2);

        throw $r28;

     label42:
        $r21 = (java.lang.CharSequence) $r2;

     label43:
        $r5 = staticinvoke <kawa.lib.ports: gnu.mapping.InPort openInputString(java.lang.CharSequence)>($r21);

        return $r5;

     label44:
        $r22 := @caughtexception;

        $r28 = new gnu.mapping.WrongType;

        specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r22, "open-input-string", 1, $r2);

        throw $r28;

     label45:
        staticinvoke <kawa.lib.ports: void writeChar(java.lang.Object)>($r2);

        r26 = <gnu.mapping.Values: gnu.mapping.Values empty>;

        return r26;

     label46:
        $r2 = staticinvoke <kawa.lib.ports: java.lang.Object lambda3(java.lang.Object)>($r2);

        return $r2;

     label47:
        $r2 = staticinvoke <kawa.lib.ports: java.lang.Object lambda2(java.lang.Object)>($r2);

        return $r2;

     label48:
        $r2 = staticinvoke <kawa.lib.ports: java.lang.Object lambda1(java.lang.Object)>($r2);

        return $r2;

     label49:
        $z0 = staticinvoke <kawa.lib.ports: boolean isOutputPort(java.lang.Object)>($r2);

        if $z0 == 0 goto label50;

        r27 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r27;

     label50:
        r27 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r27;

     label51:
        $z0 = staticinvoke <kawa.lib.ports: boolean isInputPort(java.lang.Object)>($r2);

        if $z0 == 0 goto label52;

        r27 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r27;

     label52:
        r27 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r27;

     label53:
        $r23 = staticinvoke <gnu.text.Path: gnu.text.Path valueOf(java.lang.Object)>($r2);

     label54:
        $r7 = staticinvoke <kawa.lib.ports: gnu.mapping.OutPort openOutputFile(gnu.text.Path)>($r23);

        return $r7;

     label55:
        $r24 := @caughtexception;

        $r28 = new gnu.mapping.WrongType;

        specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r24, "open-output-file", 1, $r2);

        throw $r28;

     label56:
        $r23 = staticinvoke <gnu.text.Path: gnu.text.Path valueOf(java.lang.Object)>($r2);

     label57:
        $r5 = staticinvoke <kawa.lib.ports: gnu.mapping.InPort openInputFile(gnu.text.Path)>($r23);

        return $r5;

     label58:
        $r25 := @caughtexception;

        $r28 = new gnu.mapping.WrongType;

        specialinvoke $r28.<gnu.mapping.WrongType: void <init>(java.lang.ClassCastException,java.lang.String,int,java.lang.Object)>($r25, "open-input-file", 1, $r2);

        throw $r28;

        catch java.lang.ClassCastException from label03 to label04 with label05;
        catch java.lang.ClassCastException from label06 to label07 with label08;
        catch java.lang.ClassCastException from label09 to label10 with label11;
        catch java.lang.ClassCastException from label12 to label13 with label14;
        catch java.lang.ClassCastException from label15 to label16 with label17;
        catch java.lang.ClassCastException from label21 to label22 with label23;
        catch java.lang.ClassCastException from label24 to label25 with label26;
        catch java.lang.ClassCastException from label36 to label37 with label38;
        catch java.lang.ClassCastException from label39 to label40 with label41;
        catch java.lang.ClassCastException from label42 to label43 with label44;
        catch java.lang.ClassCastException from label53 to label54 with label55;
        catch java.lang.ClassCastException from label56 to label57 with label58;
    }
