Source: $i0 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
$i0 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>() in <gnu.kawa.lispexpr.LispReader: int readEscape(int)>
Sink: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1) in <gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>

<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: $i0 = virtualinvoke r0.<gnu.kawa.lispexpr.LispReader: int read()>()
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: i1 = $i0
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: $i0 = i1 & 159
<gnu.kawa.lispexpr.LispReader: int readEscape(int)>: return $i0
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.util.regex.Pattern readRegex(gnu.text.Lexer,int,int)>: i5 = $i4
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.util.regex.Pattern readRegex(gnu.text.Lexer,int,int)>: virtualinvoke $r0.<gnu.text.Lexer: void tokenBufferAppend(int)>(i5)
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0 - 65536
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = i1 >> 10
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = i1 + 55296
<gnu.text.Lexer: void tokenBufferAppend(int)>: virtualinvoke r0.<gnu.text.Lexer: void tokenBufferAppend(int)>(i1)
<gnu.text.Lexer: void tokenBufferAppend(int)>: $i0 = $i0 & 1023
<gnu.text.Lexer: void tokenBufferAppend(int)>: i1 = $i0 + 56320
<gnu.text.Lexer: void tokenBufferAppend(int)>: $c3 = (char) i1
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2[$i0] = $c3
<gnu.text.Lexer: void tokenBufferAppend(int)>: r2 = r0.<gnu.text.Lexer: char[] tokenBuffer>
<gnu.text.Lexer: void tokenBufferAppend(int)>: return
<gnu.text.Lexer: void tokenBufferAppend(int)>: r0 := @this: gnu.text.Lexer
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.util.regex.Pattern readRegex(gnu.text.Lexer,int,int)>: $r0 := @parameter0: gnu.text.Lexer
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r2 = (gnu.kawa.lispexpr.LispReader) $r1
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r2 = (gnu.kawa.lispexpr.LispReader) $r1
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: $r8 = virtualinvoke r24.<gnu.kawa.util.GeneralHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r25, $r1)
<gnu.kawa.util.AbstractHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>: $r1 = $r2
<gnu.kawa.util.AbstractHashTable: java.lang.Object get(java.lang.Object,java.lang.Object)>: return $r1
<gnu.kawa.lispexpr.ReaderDispatchMisc: java.lang.Object read(gnu.text.Lexer,int,int)>: return $r8
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTableEntry,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readValues(int,gnu.kawa.lispexpr.ReadTable)>: return $r3
<gnu.kawa.lispexpr.LispReader: java.lang.Object readObject()>: return $r4
<kawa.lib.ports: java.lang.Object read(gnu.mapping.InPort)>: return $r2
<kawa.lib.ports: java.lang.Object apply1(gnu.expr.ModuleMethod,java.lang.Object)>: return $r2
<gnu.expr.ModuleMethod: java.lang.Object apply1(java.lang.Object)>: return $r1
<gnu.mapping.TtyInPort: void lineStart(boolean)>: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>()
<gnu.mapping.TtyInPort: void lineStart(boolean)>: virtualinvoke r0.<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>($r4)
<gnu.mapping.TtyInPort: void emitPrompt(java.lang.String)>: virtualinvoke $r2.<gnu.mapping.OutPort: void print(java.lang.String)>($r1)
