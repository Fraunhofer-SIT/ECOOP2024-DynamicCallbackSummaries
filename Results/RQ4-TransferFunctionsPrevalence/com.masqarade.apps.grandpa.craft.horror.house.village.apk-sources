<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>
<android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,int)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.app.ActivityOptions: android.app.ActivityOptions makeCustomAnimation(android.content.Context,int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.os.Parcel: void writeStringList(java.util.List)>
<android.os.Parcel: void writeStringList(java.util.List)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<android.view.LayoutInflater: android.view.LayoutInflater cloneInContext(android.content.Context)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)>
<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.lang.Runnable: void run()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)>
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.widget.ListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)>
<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>
<java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setSummaryText(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setSummaryText(java.lang.CharSequence)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setSummaryText(java.lang.CharSequence)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.app.Notification$Builder: android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.text.Html: java.lang.String escapeHtml(java.lang.CharSequence)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void println()>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.os.Parcel: void writeTypedList(java.util.List)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<android.os.Parcel: void writeTypedList(java.util.List)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>
<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.os.Parcel: void writeTypedList(java.util.List)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener)>
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener)>
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener,java.lang.String)>
<java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>
<java.lang.Character: int codePointAt(java.lang.CharSequence,int)>
<java.util.Set: boolean containsAll(java.util.Collection)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.view.GestureDetector: void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener)>
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)>
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)>
<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.view.View: void postOnAnimationDelayed(java.lang.Runnable,long)>
<android.view.View: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.support.v4.view.ViewCompat: void postOnAnimation(android.view.View,java.lang.Runnable)>
<java.lang.Runnable: void run()>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.support.v4.view.ViewPager: void setCurrentItem(int,boolean)>
<android.support.v4.view.ViewPager: void setCurrentItem(int,boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.support.v4.view.ViewCompat: void postOnAnimation(android.view.View,java.lang.Runnable)>
<java.lang.Runnable: void run()>
<android.support.v4.widget.DrawerLayout: void closeDrawer(android.view.View)>
<android.support.v4.widget.DrawerLayout: void closeDrawer(android.view.View)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.support.v4.widget.DrawerLayout: void openDrawer(android.view.View)>
<android.support.v4.widget.DrawerLayout: void openDrawer(android.view.View)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.support.v4.widget.DrawerLayout: void openDrawer(android.view.View)>
<android.support.v4.widget.DrawerLayout: void closeDrawer(android.view.View)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.View: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)>
<android.support.v4.widget.ScrollerCompat: android.support.v4.widget.ScrollerCompat create(android.content.Context,android.view.animation.Interpolator)>
<android.widget.SearchView: void setOnQueryTextListener(android.widget.SearchView$OnQueryTextListener)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.support.v4.view.ViewCompat: void postOnAnimation(android.view.View,java.lang.Runnable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.View: void layout(int,int,int,int)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.view.View: void layout(int,int,int,int)>
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.support.v4.widget.ScrollerCompat: android.support.v4.widget.ScrollerCompat create(android.content.Context,android.view.animation.Interpolator)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int,java.lang.Object[])>
<android.widget.ArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.widget.ListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.widget.SimpleCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor,java.lang.String[],int[])>
<android.widget.ListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int,java.lang.Object[])>
<android.widget.ListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.Window: void setCallback(android.view.Window$Callback)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.support.v4.view.ViewCompat: void postOnAnimation(android.view.View,java.lang.Runnable)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<java.lang.Runnable: void run()>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.Window: void setCallback(android.view.Window$Callback)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.support.v7.widget.Toolbar: void setOnMenuItemClickListener(android.support.v7.widget.Toolbar$OnMenuItemClickListener)>
<android.support.v4.view.ViewCompat: void postOnAnimation(android.view.View,java.lang.Runnable)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.view.LayoutInflater: android.view.LayoutInflater cloneInContext(android.content.Context)>
<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.support.v7.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,android.support.v7.view.menu.MenuPresenter,int)>
<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<android.support.v7.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,android.support.v7.view.menu.MenuPresenter,int)>
<java.lang.Runnable: void run()>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Collections: void sort(java.util.List)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>
<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.CompoundButton: void setButtonDrawable(android.graphics.drawable.Drawable)>
<android.widget.CompoundButton: void setButtonDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.ClipDrawable: void <init>(android.graphics.drawable.Drawable,int,int)>
<android.widget.ProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)>
<android.widget.ListAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.widget.Spinner: void setAdapter(android.widget.SpinnerAdapter)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.Spinner: void setAdapter(android.widget.SpinnerAdapter)>
<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<android.text.SpannableString: void <init>(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.Spinner: void setAdapter(android.widget.SpinnerAdapter)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<android.os.Parcel: void writeStringList(java.util.List)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>
<android.webkit.WebViewDatabase: android.webkit.WebViewDatabase getInstance(android.content.Context)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.util.List: boolean contains(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<java.util.Timer: void schedule(java.util.TimerTask,long)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<java.util.List: boolean contains(java.lang.Object)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>
<java.io.OutputStream: void write(byte[])>
<java.net.CookieHandler: void setDefault(java.net.CookieHandler)>
<java.io.PrintStream: void println(java.lang.String)>
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<com.google.android.gms.ads.AdView: void setAdListener(com.google.android.gms.ads.AdListener)>
<com.google.android.gms.ads.AdView: void setAdListener(com.google.android.gms.ads.AdListener)>
<com.google.android.gms.ads.InterstitialAd: void loadAd(com.google.android.gms.ads.AdRequest)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.HashMap: void putAll(java.util.Map)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.util.List: boolean contains(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.ObjectInputStream: int readInt()>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.io.ObjectInputStream: void close()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>
<com.google.android.gms.ads.InterstitialAd: void loadAd(com.google.android.gms.ads.AdRequest)>
<com.google.android.gms.ads.AdView: void setAdListener(com.google.android.gms.ads.AdListener)>
<com.google.android.gms.ads.InterstitialAd: void loadAd(com.google.android.gms.ads.AdRequest)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.os.Parcel: void writeStringList(java.util.List)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>
<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.io.DataOutputStream: void writeInt(int)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<android.view.View: void layout(int,int,int,int)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<java.util.Set: boolean addAll(java.util.Collection)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: void sort(java.util.List)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>
<android.app.Notification$Builder: android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<com.google.android.gms.common.api.PendingResult: void setResultCallback(com.google.android.gms.common.api.ResultCallback)>
<com.google.android.gms.common.api.GoogleApiClient$Builder: com.google.android.gms.common.api.GoogleApiClient$Builder addConnectionCallbacks(com.google.android.gms.common.api.GoogleApiClient$ConnectionCallbacks)>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.google.android.gms.common.api.PendingResult: void setResultCallback(com.google.android.gms.common.api.ResultCallback)>
<java.io.DataOutputStream: void writeInt(int)>
<java.io.DataOutputStream: void writeInt(int)>
<java.io.DataOutputStream: void writeInt(int)>
<java.io.DataOutputStream: void writeUTF(java.lang.String)>
<java.io.DataInputStream: java.lang.String readUTF()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Runnable: void run()>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.os.Parcel: void writeStringList(java.util.List)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<java.util.List: boolean contains(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>
<java.util.Collections: void sort(java.util.List)>
<java.lang.Runnable: void run()>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.lang.Runnable: void run()>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.os.Parcel: void writeStringList(java.util.List)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>
<java.lang.Runnable: void run()>
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>
<android.view.View: void layout(int,int,int,int)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>
<java.lang.Runnable: void run()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.Character: int codePointAt(java.lang.CharSequence,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>
<java.io.InputStream: int read()>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<org.apache.http.client.methods.HttpPost: void setEntity(org.apache.http.HttpEntity)>
<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<javax.net.ssl.HttpsURLConnection: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>
<java.util.HashMap: void putAll(java.util.Map)>
<java.util.HashMap: void putAll(java.util.Map)>
<android.os.Parcel: void writeTypedList(java.util.List)>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<com.google.android.gms.ads.AdView: void setAdListener(com.google.android.gms.ads.AdListener)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<com.google.android.gms.ads.InterstitialAd: void loadAd(com.google.android.gms.ads.AdRequest)>
<com.google.android.gms.ads.reward.RewardedVideoAd: void setRewardedVideoAdListener(com.google.android.gms.ads.reward.RewardedVideoAdListener)>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
<java.lang.Runnable: void run()>
<org.apache.http.impl.client.DefaultHttpClient: void setRedirectHandler(org.apache.http.client.RedirectHandler)>
<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>
<org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>
<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>
<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<org.apache.http.protocol.SyncBasicHttpContext: void <init>(org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.client.DefaultHttpClient: void setRedirectHandler(org.apache.http.client.RedirectHandler)>
<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>
<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>
<java.lang.Runnable: void run()>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.security.KeyStore: void load(java.io.InputStream,char[])>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)>
<java.util.Collections: void sort(java.util.List)>
<org.apache.http.client.utils.URLEncodedUtils: java.lang.String format(java.util.List,java.lang.String)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectInputStream: int readInt()>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
<java.io.OutputStream: void write(byte[])>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<java.lang.Runnable: void run()>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean containsAll(java.util.Collection)>
<java.util.Set: boolean containsAll(java.util.Collection)>
<java.util.Set: boolean containsAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Runnable: void run()>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: java.lang.String readLine()>
<java.util.HashMap: void putAll(java.util.Map)>
<java.lang.Runnable: void run()>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.io.BufferedOutputStream: void write(byte[],int,int)>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.widget.ListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)>
<android.widget.ListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.widget.ListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.widget.ListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)>
<java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>
<android.view.View: void layout(int,int,int,int)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.HashMap: void <init>(java.util.Map)>
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<android.support.v4.view.ViewPager: void setAdapter(android.support.v4.view.PagerAdapter)>
<org.json.JSONArray: void <init>(java.util.Collection)>
<org.json.JSONArray: void <init>(java.util.Collection)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean removeAll(java.util.Collection)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<android.database.DatabaseUtils: void cursorRowToContentValues(android.database.Cursor,android.content.ContentValues)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.io.BufferedWriter: void write(java.lang.String)>
<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>
<javax.crypto.Cipher: void init(int,java.security.Key)>
<javax.crypto.Mac: void init(java.security.Key)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>
<javax.crypto.Cipher: void init(int,java.security.Key)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.util.List: boolean contains(java.lang.Object)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.io.PrintStream: void println(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<java.util.Timer: void schedule(java.util.TimerTask,long)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.io.PrintStream: void println(java.lang.String)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.io.PrintStream: void println(java.lang.String)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>
<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintStream: void println(java.lang.String)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<android.media.MediaScannerConnection: void scanFile(android.content.Context,java.lang.String[],java.lang.String[],android.media.MediaScannerConnection$OnScanCompletedListener)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.InputStream: int read()>
<java.io.InputStream: int read()>
<java.io.InputStream: int read()>
<java.io.InputStream: int read()>
<java.io.InputStream: int read()>
<java.lang.Runnable: void run()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<java.io.Reader: int read(char[],int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<java.io.Reader: int read(char[],int,int)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<javax.crypto.Mac: void init(java.security.Key)>
<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)>
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>
<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>
<java.util.Timer: void schedule(java.util.TimerTask,long)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.lang.Runnable: void run()>
<org.json.JSONArray: void <init>(java.util.Collection)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Properties: void load(java.io.InputStream)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.util.List: boolean contains(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: java.lang.String readLine()>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: java.lang.String readLine()>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>
<android.view.View: void layout(int,int,int,int)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<java.lang.Runnable: void run()>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setSummaryText(java.lang.CharSequence)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setSummaryText(java.lang.CharSequence)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)>
<android.view.View: void layout(int,int,int,int)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean removeAll(java.util.Collection)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setSummaryText(java.lang.CharSequence)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>
<java.io.Writer: void flush()>
<java.io.Writer: void flush()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.Reader: int read(char[],int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.io.OutputStream: void write(byte[])>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<android.view.Window: void setCallback(android.view.Window$Callback)>
<android.view.Window: void setCallback(android.view.Window$Callback)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<java.lang.Runnable: void run()>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<java.io.PrintStream: void println(java.lang.String)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.widget.SimpleAdapter: void <init>(android.content.Context,java.util.List,int,java.lang.String[],int[])>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.GestureDetector: void <init>(android.view.GestureDetector$OnGestureListener)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.util.List: boolean contains(java.lang.Object)>
<org.json.JSONArray: void <init>(java.util.Collection)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.json.JSONArray: void <init>(java.util.Collection)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<org.json.JSONArray: void <init>(java.util.Collection)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: java.lang.String readLine()>
<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.lang.String: boolean contentEquals(java.lang.CharSequence)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<android.os.Handler: void <init>(android.os.Handler$Callback)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>
<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Runnable: void run()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Runnable: void run()>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<javax.net.ssl.HttpsURLConnection: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>
<java.util.List: boolean contains(java.lang.Object)>
<android.hardware.Camera: void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)>
<android.hardware.Camera: void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)>
<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)>
<android.app.Presentation: void <init>(android.content.Context,android.view.Display)>
<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<android.app.Dialog: void <init>(android.content.Context)>
<android.widget.EditText: void addTextChangedListener(android.text.TextWatcher)>
<android.text.Selection: void removeSelection(android.text.Spannable)>
<android.widget.EditText: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)>
<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.HashMap: void <init>(java.util.Map)>
<org.json.JSONArray: void <init>(java.util.Collection)>
<org.json.JSONArray: void <init>(java.util.Collection)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Runnable: void run()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.lang.StringBuilder)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<org.json.JSONArray: void <init>(java.util.Collection)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<dagger.internal.DoubleCheck: javax.inject.Provider provider(javax.inject.Provider)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<com.google.android.gms.common.api.GoogleApiClient$Builder: com.google.android.gms.common.api.GoogleApiClient$Builder addConnectionCallbacks(com.google.android.gms.common.api.GoogleApiClient$ConnectionCallbacks)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>
<java.io.OutputStream: void write(byte[])>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.List: boolean contains(java.lang.Object)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
