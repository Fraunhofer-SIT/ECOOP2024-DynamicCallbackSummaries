<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.animation.AnimatorInflater: android.animation.Animator loadAnimator(android.content.Context,int)>
<android.animation.AnimatorSet: void playTogether(java.util.Collection)>
<android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.os.Parcel: void writeStringList(java.util.List)>
<android.os.Parcel: void writeStringList(java.util.List)>
<android.view.LayoutInflater: android.view.LayoutInflater cloneInContext(android.content.Context)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>
<android.animation.AnimatorInflater: android.animation.Animator loadAnimator(android.content.Context,int)>
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>
<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)>
<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<java.lang.Runnable: void run()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.os.Parcel: void writeTypedList(java.util.List)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.lang.Runnable: void run()>
<java.util.Set: boolean containsAll(java.util.Collection)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)>
<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)>
<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)>
<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>
<java.io.OutputStream: void write(byte[])>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>
<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Set: boolean addAll(java.util.Collection)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: void sort(java.util.List)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(java.lang.String)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>
<android.app.Notification$Builder: android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.io.PrintWriter: void <init>(java.io.Writer)>
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>
<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener)>
<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Set: boolean addAll(java.util.Collection)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>
<java.lang.Runnable: void run()>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<java.util.HashMap: void putAll(java.util.Map)>
<java.lang.Character: int codePointAt(java.lang.CharSequence,int)>
<java.util.Collections: void sort(java.util.List)>
<java.util.Collections: void sort(java.util.List)>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.lang.Runnable: void run()>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.Runnable: void run()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>
<java.io.OutputStream: void write(byte[])>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener)>
<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener)>
<android.view.LayoutInflater: android.view.LayoutInflater cloneInContext(android.content.Context)>
<android.os.Handler: void <init>(android.os.Handler$Callback)>
<android.net.http.SslCertificate: void <init>(java.security.cert.X509Certificate)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<java.util.List: boolean contains(java.lang.Object)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: java.lang.String readLine()>
<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>
<java.lang.Runnable: void run()>
<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>
<java.lang.Runnable: void run()>
<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>
<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>
<android.os.Looper: void setMessageLogging(android.util.Printer)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>
<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: java.lang.String readLine()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.widget.SeekBar: void setOnSeekBarChangeListener(android.widget.SeekBar$OnSeekBarChangeListener)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.View: void setContentDescription(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.View: void setContentDescription(java.lang.CharSequence)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<android.hardware.input.InputManager: void registerInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener,android.os.Handler)>
<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>
<android.animation.ValueAnimator: void start()>
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.text.SpannableString: void <init>(java.lang.CharSequence)>
<android.text.SpannableString: void <init>(java.lang.CharSequence)>
<java.lang.Runnable: void run()>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.ListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.util.List)>
<android.widget.ArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.CheckedTextView: void setCheckMarkDrawable(android.graphics.drawable.Drawable)>
<android.widget.CheckedTextView: void setCheckMarkDrawable(android.graphics.drawable.Drawable)>
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.ListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.ListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.text.SpannableString: void <init>(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.text.SpannableString: void <init>(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>
<android.widget.DatePicker: void init(int,int,int,android.widget.DatePicker$OnDateChangedListener)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.widget.TimePicker: void setOnTimeChangedListener(android.widget.TimePicker$OnTimeChangedListener)>
<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.util.List)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>
<android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)>
<android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)>
<android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.Runnable: void run()>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>
<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<java.lang.Runnable: void run()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Collections: java.lang.Object min(java.util.Collection,java.util.Comparator)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>
<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.hardware.Camera: void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.lang.String: boolean contentEquals(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<android.hardware.Camera$Parameters: void setFocusAreas(java.util.List)>
<android.hardware.Camera$Parameters: void setMeteringAreas(java.util.List)>
<java.util.List: boolean contains(java.lang.Object)>
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
<java.lang.Runnable: void run()>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.lang.Runnable: void run()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>
<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>
<java.lang.Runnable: void run()>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Runnable: void run()>
<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.util.concurrent.Executor: void execute(java.lang.Runnable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.ListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)>
<android.content.ClipData: android.content.ClipData newHtmlText(java.lang.CharSequence,java.lang.CharSequence,java.lang.String)>
<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.hardware.input.InputManager: void registerInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener,android.os.Handler)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
