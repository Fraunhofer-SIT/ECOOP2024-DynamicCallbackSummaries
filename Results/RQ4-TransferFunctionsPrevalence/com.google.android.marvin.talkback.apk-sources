<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setSummaryText(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setSummaryText(java.lang.CharSequence)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setSummaryText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.View: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)>
<android.view.View: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.support.v4.view.ViewCompat: void postOnAnimation(android.view.View,java.lang.Runnable)>
<java.lang.Runnable: void run()>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void layout(int,int,int,int)>
<android.support.v4.view.ViewPager: void setCurrentItem(int,boolean)>
<android.support.v4.view.ViewPager: void setCurrentItem(int,boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.lang.Runnable: void run()>
<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>
<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.util.List)>
<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>
<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<java.util.List: boolean removeAll(java.util.Collection)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int,java.lang.Object[])>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.ListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<java.util.List: boolean contains(java.lang.Object)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>
<android.media.SoundPool: void setOnLoadCompleteListener(android.media.SoundPool$OnLoadCompleteListener)>
<android.media.SoundPool: int load(android.content.Context,int,int)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: java.lang.String readLine()>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>
<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: void reverse(java.util.List)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.util.Xml: void parse(java.lang.String,org.xml.sax.ContentHandler)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: java.lang.String readLine()>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.widget.EditText: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)>
<android.widget.EditText: void addTextChangedListener(android.text.TextWatcher)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.widget.EditText: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)>
<android.widget.EditText: void addTextChangedListener(android.text.TextWatcher)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.util.List)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.util.List)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.view.View: void layout(int,int,int,int)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.View: void setContentDescription(java.lang.CharSequence)>
<android.view.View: void setContentDescription(java.lang.CharSequence)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.View: void setContentDescription(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.View: void setContentDescription(java.lang.CharSequence)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.ListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.widget.ListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.view.View: void setContentDescription(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener,java.lang.String)>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: java.lang.String readLine()>
<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.SpannableString: void <init>(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
<java.util.Collections: java.util.List unmodifiableList(java.util.List)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.List: boolean contains(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.Set: boolean addAll(java.util.Collection)>
<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Timer: void schedule(java.util.TimerTask,long)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.util.Timer: void schedule(java.util.TimerTask,long)>
<java.util.Timer: void schedule(java.util.TimerTask,long)>
<java.util.Timer: void schedule(java.util.TimerTask,long)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.lang.Runnable: void run()>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>
<android.os.Parcel: void writeTypedList(java.util.List)>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>
<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
