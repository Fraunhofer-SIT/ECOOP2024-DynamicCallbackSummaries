<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<java.io.PrintStream: void println(java.lang.String)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<android.widget.ListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int,java.util.List)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<java.io.PrintStream: void println(java.lang.String)>
<java.util.Calendar: int compareTo(java.util.Calendar)>
<java.io.PrintStream: void println(java.lang.String)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<java.io.InputStream: int read()>
<java.io.InputStream: int read()>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.OutputStream: void write(byte[])>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.io.ObjectInputStream: void close()>
<java.io.ObjectInputStream: void close()>
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>
<java.io.OutputStream: void write(byte[])>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<java.io.BufferedReader: void <init>(java.io.Reader,int)>
<java.io.BufferedReader: java.lang.String readLine()>
<java.io.BufferedReader: java.lang.String readLine()>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<java.io.BufferedReader: void <init>(java.io.Reader,int)>
<java.io.BufferedReader: java.lang.String readLine()>
<java.io.BufferedReader: java.lang.String readLine()>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.io.BufferedReader: java.lang.String readLine()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)>
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<java.util.List: boolean contains(java.lang.Object)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<java.util.List: boolean contains(java.lang.Object)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<java.util.List: boolean contains(java.lang.Object)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.util.List: boolean contains(java.lang.Object)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>
<java.util.List: boolean contains(java.lang.Object)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
